<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:podcast="https://podcastindex.org/namespace/1.0" xmlns:googleplay="http://www.google.com/schemas/play-podcasts/1.0" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <channel>
    <title>Developer Voices</title>
    <description><![CDATA[<p>Deep-dive discussions with the smartest developers we know, explaining what they're working on, how they're trying to move the industry forward, and what we can learn from them.</p><p>You might find the solution to your next architectural headache, pick up a new programming language, or just hear some good war stories from the frontline of technology.</p><p>Join your host Kris Jenkins as we try to figure out what tomorrow's computing will look like the best way we know how - by listening directly to the developers' voices.</p>]]></description>
    <generator>Zencastr, Inc</generator>
    <atom:link href="https://feeds.zencastr.com/f/oSn1i316.rss" rel="self" type="application/rss+xml"/>
    <link>http://www.developervoices.com</link>
    <docs>http://www.developervoices.com</docs>
    <language>en</language>
    <pubDate>Sat, 06 May 2023 09:44:27 GMT</pubDate>
    <lastBuildDate>Thu, 31 Oct 2024 15:26:25 GMT</lastBuildDate>
    <itunes:author>Kris Jenkins</itunes:author>
    <itunes:summary><![CDATA[Deep-dive discussions with the smartest developers we know, explaining what they're working on, how they're trying to move the industry forward, and what we can learn from them.

You might find the solution to your next architectural headache, pick up a new programming language, or just hear some good war stories from the frontline of technology.

Join your host Kris Jenkins as we try to figure out what tomorrow's computing will look like the best way we know how - by listening directly to the developers' voices.]]></itunes:summary>
    <itunes:type>episodic</itunes:type>
    <itunes:explicit>false</itunes:explicit>
    <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/cde8d1f5-e1f1-4c33-9f47-781a27ad1d2e.png"/>
    <image>
      <url>https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/cde8d1f5-e1f1-4c33-9f47-781a27ad1d2e.png</url>
      <link>http://www.developervoices.com</link>
      <title>Developer Voices</title>
    </image>
    <itunes:new-feed-url>https://feeds.zencastr.com/f/oSn1i316.rss</itunes:new-feed-url>
    <itunes:owner>
      <itunes:name>Kris Jenkins</itunes:name>
    </itunes:owner>
    <copyright><![CDATA[Clearer Code Limited]]></copyright>
    <itunes:keywords>programming,software development,programming languages,databases,software,software archtecture</itunes:keywords>
    <itunes:category text="Technology"/>
    <itunes:category text="News">
      <itunes:category text="Tech News"/>
    </itunes:category>
    <item>
      <title>Pony: High-Performance, Memory-Safe Actors (with Sean Allen)</title>
      <link>https://zencastr.com/z/P4-WeO28</link>
      <itunes:title>Pony: High-Performance, Memory-Safe Actors (with Sean Allen)</itunes:title>
      <itunes:summary>Pony is a language born out of what should be a simple need - actor-style programming with C performance. On the face of it, that shouldn&apos;t be too hard to do. Writing an actor framework isn&apos;t trivial, but it&apos;s well-trodden ground. The hard part is balancing performance and memory management. When your actors start passing hundreds of thousands of complex messages around, either you need some complex rules about who owns and frees which piece of memory, or you just copy every piece of data and kill your performance. Pony&apos;s solution is a third way - a novel approach to memory management called reference capabilities.

In this week&apos;s Developer Voices, Sean Allen joins us from the Pony team to explain what reference capabilities are, how Pony uses them in its high-performance actor framework, and how they implement a garbage collector without stop-the-world pauses. The result is a language for performant actors, and a set of ideas bigger than the language itself…

–

Pony: https://www.ponylang.io/

The Pony Tutorial: https://tutorial.ponylang.io/

The Pony Playground: https://playground.ponylang.io/

Azul Garbage Collector: https://www.azul.com/products/components/pgc/

Shenandoah Garbage Collector: https://wiki.openjdk.org/display/shenandoah/Main

A String of Ponies (Distributed Actors Paper): https://www.doc.ic.ac.uk/~scb12/publications/s.blessing.pdf

Garbage Collection with Pony-ORCA: https://tutorial.ponylang.io/appendices/garbage-collection.html

–

Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices

Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Thu, 31 Oct 2024 15:25:43 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="105689812" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/6723a17775cd3f17270161ed/size/105689812/audio-files/619e48a9649c44004c5a44e8/5af6e1e2-b4d9-4e98-8301-4b18f77ca296.mp3"/>
      <description><![CDATA[<p>Pony is a language born out of what should be a simple need - actor-style programming with C performance. On the face of it, that shouldn’t be too hard to do. Writing an actor framework isn’t trivial, but it’s well-trodden ground. The hard part is balancing performance and memory management. When your actors start passing hundreds of thousands of complex messages around, either you need some complex rules about who owns and frees which piece of memory, or you just copy every piece of data and kill your performance. Pony’s solution is a third way - a novel approach to memory management called reference capabilities.</p><p>In this week’s Developer Voices, Sean Allen joins us from the Pony team to explain what reference capabilities are, how Pony uses them in its high-performance actor framework, and how they implement a garbage collector without stop-the-world pauses. The result is a language for performant actors, and a set of ideas bigger than the language itself…</p><p>–</p><p>Pony: https://www.ponylang.io/</p><p>The Pony Tutorial: https://tutorial.ponylang.io/</p><p>The Pony Playground: https://playground.ponylang.io/</p><p>Azul Garbage Collector: https://www.azul.com/products/components/pgc/</p><p>Shenandoah Garbage Collector: https://wiki.openjdk.org/display/shenandoah/Main</p><p>A String of Ponies (Distributed Actors Paper): https://www.doc.ic.ac.uk/~scb12/publications/s.blessing.pdf</p><p>Garbage Collection with Pony-ORCA: https://tutorial.ponylang.io/appendices/garbage-collection.html</p><p>–</p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></description>
      <content:encoded><![CDATA[<p>Pony is a language born out of what should be a simple need - actor-style programming with C performance. On the face of it, that shouldn’t be too hard to do. Writing an actor framework isn’t trivial, but it’s well-trodden ground. The hard part is balancing performance and memory management. When your actors start passing hundreds of thousands of complex messages around, either you need some complex rules about who owns and frees which piece of memory, or you just copy every piece of data and kill your performance. Pony’s solution is a third way - a novel approach to memory management called reference capabilities.</p><p>In this week’s Developer Voices, Sean Allen joins us from the Pony team to explain what reference capabilities are, how Pony uses them in its high-performance actor framework, and how they implement a garbage collector without stop-the-world pauses. The result is a language for performant actors, and a set of ideas bigger than the language itself…</p><p>–</p><p>Pony: https://www.ponylang.io/</p><p>The Pony Tutorial: https://tutorial.ponylang.io/</p><p>The Pony Playground: https://playground.ponylang.io/</p><p>Azul Garbage Collector: https://www.azul.com/products/components/pgc/</p><p>Shenandoah Garbage Collector: https://wiki.openjdk.org/display/shenandoah/Main</p><p>A String of Ponies (Distributed Actors Paper): https://www.doc.ic.ac.uk/~scb12/publications/s.blessing.pdf</p><p>Garbage Collection with Pony-ORCA: https://tutorial.ponylang.io/appendices/garbage-collection.html</p><p>–</p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></content:encoded>
      <guid isPermaLink="false">2d2ab2d3-6f76-44af-a64d-448e2e654c93</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4403</itunes:duration>
    </item>
    <item>
      <title>Architecting a Rust Game Engine (with Alice Cecile)</title>
      <link>https://zencastr.com/z/T2ZZPDzB</link>
      <itunes:title>Architecting a Rust Game Engine (with Alice Cecile)</itunes:title>
      <itunes:summary>This week we take a look at Bevy, a new game engine written in Rust. And in particular, we look at a core component of Bevy that has something to teach you even if you never write a game: its Entity Component System, or ECS. An ECS is an approach to managing complex systems with large numbers of moving parts, that takes some inspiration from the Relational Database world, and a little from Functional Programming to build something entirely unique and surprisingly high-performance.

Joining us to explain all is Alice Cecile. She&apos;s part of the Bevy foundation, which is charting a course from data-management and rendering tool to fully-featured game development environment. A journey they&apos;ve made huge progress on, but still expect to take another decade to come to full fruition. We look at the core ECS, and the wider project-management approaches they need to make the journey.

–

Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices

Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join



Bevy: https://bevyengine.org/

Bevy Examples: https://bevyengine.org/examples/

Flecs (C++): https://github.com/SanderMertens/flecs

Tiny Glade (game): https://store.steampowered.com/app/2198150/Tiny_Glade/



Alice on Mastodon: https://mastodon.gamedev.place/@alice_i_cecile

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 23 Oct 2024 14:30:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="112515988" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/671906e1290be1cfcf7bdb4c/size/112515988/audio-files/619e48a9649c44004c5a44e8/ca476c72-f688-4c22-93cc-6c8e6bc5326f.mp3"/>
      <description><![CDATA[<p>This week we take a look at Bevy, a new game engine written in Rust. And in particular, we look at a core component of Bevy that has something to teach you even if you never write a game: its Entity Component System, or ECS. An ECS is an approach to managing complex systems with large numbers of moving parts, that takes some inspiration from the Relational Database world, and a little from Functional Programming to build something entirely unique and surprisingly high-performance.</p><p>Joining us to explain all is Alice Cecile. She’s part of the Bevy foundation, which is charting a course from data-management and rendering tool to fully-featured game development environment. A journey they’ve made huge progress on, but still expect to take another decade to come to full fruition. We look at the core ECS, and the wider project-management approaches they need to make the journey.</p><p>–</p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join</p><p><br></p><p>Bevy: https://bevyengine.org/</p><p>Bevy Examples: https://bevyengine.org/examples/</p><p>Flecs (C++): https://github.com/SanderMertens/flecs</p><p>Tiny Glade (game): https://store.steampowered.com/app/2198150/Tiny_Glade/</p><p><br></p><p>Alice on Mastodon: https://mastodon.gamedev.place/@alice_i_cecile</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></description>
      <content:encoded><![CDATA[<p>This week we take a look at Bevy, a new game engine written in Rust. And in particular, we look at a core component of Bevy that has something to teach you even if you never write a game: its Entity Component System, or ECS. An ECS is an approach to managing complex systems with large numbers of moving parts, that takes some inspiration from the Relational Database world, and a little from Functional Programming to build something entirely unique and surprisingly high-performance.</p><p>Joining us to explain all is Alice Cecile. She’s part of the Bevy foundation, which is charting a course from data-management and rendering tool to fully-featured game development environment. A journey they’ve made huge progress on, but still expect to take another decade to come to full fruition. We look at the core ECS, and the wider project-management approaches they need to make the journey.</p><p>–</p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join</p><p><br></p><p>Bevy: https://bevyengine.org/</p><p>Bevy Examples: https://bevyengine.org/examples/</p><p>Flecs (C++): https://github.com/SanderMertens/flecs</p><p>Tiny Glade (game): https://store.steampowered.com/app/2198150/Tiny_Glade/</p><p><br></p><p>Alice on Mastodon: https://mastodon.gamedev.place/@alice_i_cecile</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></content:encoded>
      <guid isPermaLink="false">c5219b54-c8f7-4a64-b2d6-afa615723aa8</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4688</itunes:duration>
    </item>
    <item>
      <title>Writing a CAD Language in Rust (with Adam Chalmers)</title>
      <link>https://zencastr.com/z/P09dhin9</link>
      <itunes:title>Writing a CAD Language in Rust (with Adam Chalmers)</itunes:title>
      <itunes:summary>Given how many languages have been written in C over the years, it&apos;s not surprising to see new languages being written in Rust. What is surprising about this week&apos;s guest is the domain he&apos;s writing for: Computer Aided Design (CAD). Could Rust be sneaking its way into the CAD world too?

Joining me to discuss the design and implementation of a CAD programming language is Adam Chalmers. He works at Zoo, developing KCL - a language that looks like JavaScript, runs on Rust, and offers users a seamless hybrid experience of both coding and point-and-click modelling. So, how does that all fit together?

In this episode we look at the design and implementation of a programming language in Rust; how KittyCAD creates that hybrid environment for text-based programming and point-and-click modelling; and how we can learn to write our own Rust-interpreted languages.

–

Adam&apos;s Blog: https://adamchalmers.com/

Adam&apos;s Guide To Writing Parsers: https://www.youtube.com/watch?v=QF3kMyzMC40

Zoo&apos;s Modelling App: https://zoo.dev/modeling-app

Mechanical CAD: https://zoo.dev/blog/mechanical-cad-yesterday-today-and-tomorrow

A Lego brick in KCL: https://zoo.dev/docs/kcl-samples/lego

Winnow: https://docs.rs/winnow/latest/winnow/

Nom: https://docs.rs/nom/latest/nom/

Factorio: https://www.factorio.com/

Satisfactory: https://store.steampowered.com/app/526870/Satisfactory/

Crafting Interpreters: https://craftinginterpreters.com/

Coding in Antarctica: https://brr.fyi/



Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices

Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join



Adam on Mastodon: https://mastodon.social/@adam_chal@hachyderm.io

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 16 Oct 2024 15:33:37 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="119244820" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/670fdcd19f4868fb900088da/size/119244820/audio-files/619e48a9649c44004c5a44e8/c305d268-4945-4ae8-a5cb-f623057b8d25.mp3"/>
      <description><![CDATA[<p>Given how many languages have been written in C over the years, it’s not surprising to see new languages being written in Rust. What is surprising about this week’s guest is the domain he’s writing for: Computer Aided Design (CAD). Could Rust be sneaking its way into the CAD world too?</p><p>Joining me to discuss the design and implementation of a CAD programming language is Adam Chalmers. He works at Zoo, developing KCL - a language that looks like JavaScript, runs on Rust, and offers users a seamless hybrid experience of both coding and point-and-click modelling. So, how does that all fit together?</p><p>In this episode we look at the design and implementation of a programming language in Rust; how KittyCAD creates that hybrid environment for text-based programming and point-and-click modelling; and how we can learn to write our own Rust-interpreted languages.</p><p>–</p><p>Adam’s Blog: https://adamchalmers.com/</p><p>Adam’s Guide To Writing Parsers: https://www.youtube.com/watch?v=QF3kMyzMC40</p><p>Zoo’s Modelling App: https://zoo.dev/modeling-app</p><p>Mechanical CAD: https://zoo.dev/blog/mechanical-cad-yesterday-today-and-tomorrow</p><p>A Lego brick in KCL: https://zoo.dev/docs/kcl-samples/lego</p><p>Winnow: https://docs.rs/winnow/latest/winnow/</p><p>Nom: https://docs.rs/nom/latest/nom/</p><p>Factorio: https://www.factorio.com/</p><p>Satisfactory: https://store.steampowered.com/app/526870/Satisfactory/</p><p>Crafting Interpreters: https://craftinginterpreters.com/</p><p>Coding in Antarctica: https://brr.fyi/</p><p><br></p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join</p><p><br></p><p>Adam on Mastodon: https://mastodon.social/@adam_chal@hachyderm.io</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></description>
      <content:encoded><![CDATA[<p>Given how many languages have been written in C over the years, it’s not surprising to see new languages being written in Rust. What is surprising about this week’s guest is the domain he’s writing for: Computer Aided Design (CAD). Could Rust be sneaking its way into the CAD world too?</p><p>Joining me to discuss the design and implementation of a CAD programming language is Adam Chalmers. He works at Zoo, developing KCL - a language that looks like JavaScript, runs on Rust, and offers users a seamless hybrid experience of both coding and point-and-click modelling. So, how does that all fit together?</p><p>In this episode we look at the design and implementation of a programming language in Rust; how KittyCAD creates that hybrid environment for text-based programming and point-and-click modelling; and how we can learn to write our own Rust-interpreted languages.</p><p>–</p><p>Adam’s Blog: https://adamchalmers.com/</p><p>Adam’s Guide To Writing Parsers: https://www.youtube.com/watch?v=QF3kMyzMC40</p><p>Zoo’s Modelling App: https://zoo.dev/modeling-app</p><p>Mechanical CAD: https://zoo.dev/blog/mechanical-cad-yesterday-today-and-tomorrow</p><p>A Lego brick in KCL: https://zoo.dev/docs/kcl-samples/lego</p><p>Winnow: https://docs.rs/winnow/latest/winnow/</p><p>Nom: https://docs.rs/nom/latest/nom/</p><p>Factorio: https://www.factorio.com/</p><p>Satisfactory: https://store.steampowered.com/app/526870/Satisfactory/</p><p>Crafting Interpreters: https://craftinginterpreters.com/</p><p>Coding in Antarctica: https://brr.fyi/</p><p><br></p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join</p><p><br></p><p>Adam on Mastodon: https://mastodon.social/@adam_chal@hachyderm.io</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></content:encoded>
      <guid isPermaLink="false">dbbefc5f-92b5-4796-822f-1a5b75d7ac22</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4968</itunes:duration>
    </item>
    <item>
      <title>Text User Interfaces in Rust (with Orhun Parmaksız)</title>
      <link>https://zencastr.com/z/Pb1MUopa</link>
      <itunes:title>Text User Interfaces in Rust (with Orhun Parmaksız)</itunes:title>
      <itunes:summary>For some kinds of application, there is no faster or cheaper way to build a user interface than in the terminal. Sure, it&apos;s not going to suit every kind of user out there, but for those of us that are happy on the command line, rich Text User Interfaces (or TUIs) open all the exploration and discoverability benefits of a GUI are a fraction of the development time.

This week we&apos;re looking at a Rust TUI library with the excellent name &apos;ratatui&apos;. We&apos;re joined by Orhun Parmaksız, one of the lead developers and a huge TUI enthusiast on a quest to see how far Text UIs can be pushed.

–

Ratatui: https://ratatui.rs/

Ratatouille Tutorials: https://ratatui.rs/tutorials/

Tui Realm: https://github.com/veeso/tui-realm

Awesome Ratatui: https://github.com/ratatui/awesome-ratatui

RTL SDR: https://www.rtl-sdr.com/about-rtl-sdr/

Rust Snake AI: https://github.com/bones-ai/rust-snake-ai-ratatui

SystemCtl-Tui: https://github.com/rgwood/systemctl-tui

GitU: https://github.com/altsem/gitu

…and GitUi: https://github.com/extrawurst/gitui

GitCliff Changelog Tool: https://git-cliff.org/

ATAC (Postman in the Terminal): https://github.com/Julien-cpsn/ATAC

BubbleTea (TUIs in Golang): https://github.com/charmbracelet/bubbletea

Imgcat (images in the terminal): https://github.com/danielgatis/imgcat

TachyonFX: https://github.com/junkdog/tachyonfx

ASCIITheatre: https://ascii.theater/

Rio Terminal: https://raphamorim.io/rio/

–

Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices

Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 09 Oct 2024 14:30:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="95600020" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/67067fde943e665837859434/size/95600020/audio-files/619e48a9649c44004c5a44e8/e691a362-2849-42de-8d26-be9a39c5bda2.mp3"/>
      <description><![CDATA[<p>For some kinds of application, there is no faster or cheaper way to build a user interface than in the terminal. Sure, it’s not going to suit every kind of user out there, but for those of us that are happy on the command line, rich Text User Interfaces (or TUIs) open all the exploration and discoverability benefits of a GUI are a fraction of the development time.</p><p>This week we’re looking at a Rust TUI library with the excellent name ‘ratatui’. We’re joined by Orhun Parmaksız, one of the lead developers and a huge TUI enthusiast on a quest to see how far Text UIs can be pushed.</p><p>–</p><p>Ratatui: <a href="https://ratatui.rs/">https://ratatui.rs/</a></p><p>Ratatouille Tutorials: <a href="https://ratatui.rs/tutorials/">https://ratatui.rs/tutorials/</a></p><p>Tui Realm: <a href="https://github.com/veeso/tui-realm">https://github.com/veeso/tui-realm</a></p><p>Awesome Ratatui: <a href="https://github.com/ratatui/awesome-ratatui">https://github.com/ratatui/awesome-ratatui</a></p><p>RTL SDR: <a href="https://www.rtl-sdr.com/about-rtl-sdr/">https://www.rtl-sdr.com/about-rtl-sdr/</a></p><p>Rust Snake AI: <a href="https://github.com/bones-ai/rust-snake-ai-ratatui">https://github.com/bones-ai/rust-snake-ai-ratatui</a></p><p>SystemCtl-Tui: <a href="https://github.com/rgwood/systemctl-tui">https://github.com/rgwood/systemctl-tui</a></p><p>GitU: <a href="https://github.com/altsem/gitu">https://github.com/altsem/gitu</a></p><p>…and GitUi: <a href="https://github.com/extrawurst/gitui">https://github.com/extrawurst/gitui</a></p><p>GitCliff Changelog Tool: <a href="https://git-cliff.org/">https://git-cliff.org/</a></p><p>ATAC (Postman in the Terminal): <a href="https://github.com/Julien-cpsn/ATAC">https://github.com/Julien-cpsn/ATAC</a></p><p>BubbleTea (TUIs in Golang): <a href="https://github.com/charmbracelet/bubbletea">https://github.com/charmbracelet/bubbletea</a></p><p>Imgcat (images in the terminal): <a href="https://github.com/danielgatis/imgcat">https://github.com/danielgatis/imgcat</a></p><p>TachyonFX: <a href="https://github.com/junkdog/tachyonfx">https://github.com/junkdog/tachyonfx</a></p><p>ASCIITheatre: <a href="https://ascii.theater/">https://ascii.theater/</a></p><p>Rio Terminal: <a href="https://raphamorim.io/rio/">https://raphamorim.io/rio/</a></p><p>–</p><p>Support Developer Voices on Patreon: <a href="https://patreon.com/DeveloperVoices">https://patreon.com/DeveloperVoices</a></p><p>Support Developer Voices on YouTube: <a href="https://www.youtube.com/@developervoices/join">https://www.youtube.com/@developervoices/join</a></p><p>Kris on Mastodon: <a href="http://mastodon.social/@krisajenkins">http://mastodon.social/@krisajenkins</a></p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p>]]></description>
      <content:encoded><![CDATA[<p>For some kinds of application, there is no faster or cheaper way to build a user interface than in the terminal. Sure, it’s not going to suit every kind of user out there, but for those of us that are happy on the command line, rich Text User Interfaces (or TUIs) open all the exploration and discoverability benefits of a GUI are a fraction of the development time.</p><p>This week we’re looking at a Rust TUI library with the excellent name ‘ratatui’. We’re joined by Orhun Parmaksız, one of the lead developers and a huge TUI enthusiast on a quest to see how far Text UIs can be pushed.</p><p>–</p><p>Ratatui: <a href="https://ratatui.rs/">https://ratatui.rs/</a></p><p>Ratatouille Tutorials: <a href="https://ratatui.rs/tutorials/">https://ratatui.rs/tutorials/</a></p><p>Tui Realm: <a href="https://github.com/veeso/tui-realm">https://github.com/veeso/tui-realm</a></p><p>Awesome Ratatui: <a href="https://github.com/ratatui/awesome-ratatui">https://github.com/ratatui/awesome-ratatui</a></p><p>RTL SDR: <a href="https://www.rtl-sdr.com/about-rtl-sdr/">https://www.rtl-sdr.com/about-rtl-sdr/</a></p><p>Rust Snake AI: <a href="https://github.com/bones-ai/rust-snake-ai-ratatui">https://github.com/bones-ai/rust-snake-ai-ratatui</a></p><p>SystemCtl-Tui: <a href="https://github.com/rgwood/systemctl-tui">https://github.com/rgwood/systemctl-tui</a></p><p>GitU: <a href="https://github.com/altsem/gitu">https://github.com/altsem/gitu</a></p><p>…and GitUi: <a href="https://github.com/extrawurst/gitui">https://github.com/extrawurst/gitui</a></p><p>GitCliff Changelog Tool: <a href="https://git-cliff.org/">https://git-cliff.org/</a></p><p>ATAC (Postman in the Terminal): <a href="https://github.com/Julien-cpsn/ATAC">https://github.com/Julien-cpsn/ATAC</a></p><p>BubbleTea (TUIs in Golang): <a href="https://github.com/charmbracelet/bubbletea">https://github.com/charmbracelet/bubbletea</a></p><p>Imgcat (images in the terminal): <a href="https://github.com/danielgatis/imgcat">https://github.com/danielgatis/imgcat</a></p><p>TachyonFX: <a href="https://github.com/junkdog/tachyonfx">https://github.com/junkdog/tachyonfx</a></p><p>ASCIITheatre: <a href="https://ascii.theater/">https://ascii.theater/</a></p><p>Rio Terminal: <a href="https://raphamorim.io/rio/">https://raphamorim.io/rio/</a></p><p>–</p><p>Support Developer Voices on Patreon: <a href="https://patreon.com/DeveloperVoices">https://patreon.com/DeveloperVoices</a></p><p>Support Developer Voices on YouTube: <a href="https://www.youtube.com/@developervoices/join">https://www.youtube.com/@developervoices/join</a></p><p>Kris on Mastodon: <a href="http://mastodon.social/@krisajenkins">http://mastodon.social/@krisajenkins</a></p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p>]]></content:encoded>
      <guid isPermaLink="false">cb82101a-1d1d-4321-9487-4fbd055269c8</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3983</itunes:duration>
    </item>
    <item>
      <title>Designing The Lustre Web Framework (with Hayleigh Thompson)</title>
      <link>https://zencastr.com/z/GWl6bUoT</link>
      <itunes:title>Designing The Lustre Web Framework (with Hayleigh Thompson)</itunes:title>
      <itunes:summary>Lustre is a web framework that takes a lot of inspiration from Elm, some from React, and a surprising amount from Erlang&apos;s actor model, to provide a library that blurs the lines between executing on the client, or on the server.

Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices

Support Developer Voices on YouTube: https://www.youtube.com/@DeveloperVoices/join

–

Lustre: https://hexdocs.pm/lustre/index.html

Gleam: https://gleam.run/

Join the Gleam Community: https://gleam.run/community/

Processing (AV Framework for Java): https://processing.org/

Vue.js: https://vuejs.org/

Svelte: https://svelte.dev/

Elm: https://elm-lang.org/

Elm Table: https://package.elm-lang.org/packages/gribouille/elm-table/5.3.0/

Hayleigh on Twitter: https://x.com/hayleighdotdev

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 02 Oct 2024 14:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="92824852" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/66fd408048413baa9f0f5278/size/92824852/audio-files/619e48a9649c44004c5a44e8/ebdf14b5-9e47-401b-9c54-e4bde42a6ecb.mp3"/>
      <description><![CDATA[<p>Lustre is a web framework that takes a lot of inspiration from Elm, some from React, and a surprising amount from Erlang’s actor model, to provide a library that blurs the lines between executing on the client, or on the server.</p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@DeveloperVoices/join</p><p>–</p><p>Lustre: https://hexdocs.pm/lustre/index.html</p><p>Gleam: https://gleam.run/</p><p>Join the Gleam Community: https://gleam.run/community/</p><p>Processing (AV Framework for Java): https://processing.org/</p><p>Vue.js: https://vuejs.org/</p><p>Svelte: https://svelte.dev/</p><p>Elm: https://elm-lang.org/</p><p>Elm Table: https://package.elm-lang.org/packages/gribouille/elm-table/5.3.0/</p><p>Hayleigh on Twitter: https://x.com/hayleighdotdev</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></description>
      <content:encoded><![CDATA[<p>Lustre is a web framework that takes a lot of inspiration from Elm, some from React, and a surprising amount from Erlang’s actor model, to provide a library that blurs the lines between executing on the client, or on the server.</p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@DeveloperVoices/join</p><p>–</p><p>Lustre: https://hexdocs.pm/lustre/index.html</p><p>Gleam: https://gleam.run/</p><p>Join the Gleam Community: https://gleam.run/community/</p><p>Processing (AV Framework for Java): https://processing.org/</p><p>Vue.js: https://vuejs.org/</p><p>Svelte: https://svelte.dev/</p><p>Elm: https://elm-lang.org/</p><p>Elm Table: https://package.elm-lang.org/packages/gribouille/elm-table/5.3.0/</p><p>Hayleigh on Twitter: https://x.com/hayleighdotdev</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></content:encoded>
      <guid isPermaLink="false">6622034c-23fa-418a-b821-4b6056b5d89c</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3867</itunes:duration>
    </item>
    <item>
      <title>Faust: A Programming Language For Sound (with Romain Michon)</title>
      <link>https://zencastr.com/z/NhzOz6aW</link>
      <itunes:title>Faust: A Programming Language For Sound (with Romain Michon)</itunes:title>
      <itunes:summary>I&apos;m always interested in what factors shape the design of a programming language. This week we&apos;re taking a look at a language that&apos;s wholly shaped by its need to support a very specific kind of program - audio processing. Anything from creating a simple echo sound effect, to building an entire digital instrument based on a 17th-century harpsichord.

The language in question is Faust, and this week we&apos;re joined by Romain Michon, who works on and teaches Faust, as we look at how it&apos;s designed, what kind of programmers it&apos;s for, and how it does the job of turning audio-pipeline definitions into executable code.

And one of the surprising parts of that compilation strategy is the decision to have it compile to multiple targets, from the expected ones like C and Rust, to the exotic destination of FPGAs (Field Programmable Gate Arrays). FPGAs are like reprogrammable circuit boards, and Romain dives into Faust&apos;s attempts to go from a high-level description of an audio program, all the way down to instructions that tell a chip exactly how it should wire itself.

So rather aptly for a technology podcast, we start this week with what your ear can hear and go all the way down to logic gates and circuit boards…

–

Try Faust in the Browser: https://faustide.grame.fr/

Faust Online Course: https://www.kadenze.com/courses/real-time-audio-signal-processing-in-faust/info

FPGAs: https://en.wikipedia.org/wiki/Field-programmable_gate_array

VHDL: https://en.wikipedia.org/wiki/VHDL

Verilog: https://en.wikipedia.org/wiki/Verilog

Grame: https://www.grame.fr/

The (Strawberry Jam) Gramophone: https://www.grame.fr/articles/gramophone

Gramophone Workshops: https://www.grame.fr/evenements/atelier-gramophones-65ca16b19fec4



Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices

Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join



Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 25 Sep 2024 14:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="112349524" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/66f3b5df7e794d40a5d9e914/size/112349524/audio-files/619e48a9649c44004c5a44e8/7ba2f9ac-14f7-480a-b9df-2c9c0d6d61ad.mp3"/>
      <description><![CDATA[<p>I’m always interested in what factors shape the design of a programming language. This week we’re taking a look at a language that’s wholly shaped by its need to support a very specific kind of program - audio processing. Anything from creating a simple echo sound effect, to building an entire digital instrument based on a 17th-century harpsichord.</p><p>The language in question is Faust, and this week we’re joined by Romain Michon, who works on and teaches Faust, as we look at how it’s designed, what kind of programmers it's for, and how it does the job of turning audio-pipeline definitions into executable code.</p><p>And one of the surprising parts of that compilation strategy is the decision to have it compile to multiple targets, from the expected ones like C and Rust, to the exotic destination of FPGAs (Field Programmable Gate Arrays). FPGAs are like reprogrammable circuit boards, and Romain dives into Faust’s attempts to go from a high-level description of an audio program, all the way down to instructions that tell a chip exactly how it should wire itself.</p><p>So rather aptly for a technology podcast, we start this week with what your ear can hear and go all the way down to logic gates and circuit boards…</p><p>–</p><p>Try Faust in the Browser: https://faustide.grame.fr/</p><p>Faust Online Course: https://www.kadenze.com/courses/real-time-audio-signal-processing-in-faust/info</p><p>FPGAs: https://en.wikipedia.org/wiki/Field-programmable_gate_array</p><p>VHDL: https://en.wikipedia.org/wiki/VHDL</p><p>Verilog: https://en.wikipedia.org/wiki/Verilog</p><p>Grame: https://www.grame.fr/</p><p>The (Strawberry Jam) Gramophone: https://www.grame.fr/articles/gramophone</p><p>Gramophone Workshops: https://www.grame.fr/evenements/atelier-gramophones-65ca16b19fec4</p><p><br></p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join</p><p><br></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></description>
      <content:encoded><![CDATA[<p>I’m always interested in what factors shape the design of a programming language. This week we’re taking a look at a language that’s wholly shaped by its need to support a very specific kind of program - audio processing. Anything from creating a simple echo sound effect, to building an entire digital instrument based on a 17th-century harpsichord.</p><p>The language in question is Faust, and this week we’re joined by Romain Michon, who works on and teaches Faust, as we look at how it’s designed, what kind of programmers it's for, and how it does the job of turning audio-pipeline definitions into executable code.</p><p>And one of the surprising parts of that compilation strategy is the decision to have it compile to multiple targets, from the expected ones like C and Rust, to the exotic destination of FPGAs (Field Programmable Gate Arrays). FPGAs are like reprogrammable circuit boards, and Romain dives into Faust’s attempts to go from a high-level description of an audio program, all the way down to instructions that tell a chip exactly how it should wire itself.</p><p>So rather aptly for a technology podcast, we start this week with what your ear can hear and go all the way down to logic gates and circuit boards…</p><p>–</p><p>Try Faust in the Browser: https://faustide.grame.fr/</p><p>Faust Online Course: https://www.kadenze.com/courses/real-time-audio-signal-processing-in-faust/info</p><p>FPGAs: https://en.wikipedia.org/wiki/Field-programmable_gate_array</p><p>VHDL: https://en.wikipedia.org/wiki/VHDL</p><p>Verilog: https://en.wikipedia.org/wiki/Verilog</p><p>Grame: https://www.grame.fr/</p><p>The (Strawberry Jam) Gramophone: https://www.grame.fr/articles/gramophone</p><p>Gramophone Workshops: https://www.grame.fr/evenements/atelier-gramophones-65ca16b19fec4</p><p><br></p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join</p><p><br></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></content:encoded>
      <guid isPermaLink="false">7f237960-e2db-47ac-ab15-53b53a666555</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4681</itunes:duration>
    </item>
    <item>
      <title>GPUs, from Simulation to Encryption (with Agnès Leroy)</title>
      <link>https://zencastr.com/z/ROjua4zi</link>
      <itunes:title>GPUs, from Simulation to Encryption (with Agnès Leroy)</itunes:title>
      <itunes:summary>This week we take a look at what you can do with a GPU when you get away from just using it to draw polygons. Agnès Leroy has spent most of her career programming, optimizing and converting programs to run on that oh-so-curious piece of specialised processing hardware, and we go through all the places that journey has taken her. From simulating the flow of fluids in hydroelectric powerstations, to figuring out how to make a new approach to encryption run fast enough to make it practical…

–

Become a Developer Voices supporter! https://patreon.com/DeveloperVoices

A Fully Homomorphic Encryption Scheme (pdf): https://crypto.stanford.edu/craig/craig-thesis.pdf

CUDA platform: https://developer.nvidia.com/cuda-zone

Rust-CUDA: https://github.com/Rust-GPU/Rust-CUDA

And in case anyone was wondering, A List of Hydroelectric Power Stations in France: https://en.wikipedia.org/wiki/Category:Hydroelectric_power_stations_in_France

–

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 18 Sep 2024 14:56:21 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="91892884" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/66eaea15e25d25591ebef399/size/91892884/audio-files/619e48a9649c44004c5a44e8/353041de-e50b-412d-9bf7-f2d6a6c0ae50.mp3"/>
      <description><![CDATA[<p>This week we take a look at what you can do with a GPU when you get away from just using it to draw polygons. Agnès Leroy has spent most of her career programming, optimizing and converting programs to run on that oh-so-curious piece of specialised processing hardware, and we go through all the places that journey has taken her. From simulating the flow of fluids in hydroelectric powerstations, to figuring out how to make a new approach to encryption run fast enough to make it practical…</p><p>–</p><p>Become a Developer Voices supporter! <a href="https://patreon.com/DeveloperVoices">https://patreon.com/DeveloperVoices</a></p><p>A Fully Homomorphic Encryption Scheme (pdf): <a href="https://crypto.stanford.edu/craig/craig-thesis.pdf">https://crypto.stanford.edu/craig/craig-thesis.pdf</a></p><p>CUDA platform: <a href="https://developer.nvidia.com/cuda-zone">https://developer.nvidia.com/cuda-zone</a></p><p>Rust-CUDA: <a href="https://github.com/Rust-GPU/Rust-CUDA">https://github.com/Rust-GPU/Rust-CUDA</a></p><p>And in case anyone was wondering, A List of Hydroelectric Power Stations in France: <a href="https://en.wikipedia.org/wiki/Category:Hydroelectric_power_stations_in_France">https://en.wikipedia.org/wiki/Category:Hydroelectric_power_stations_in_France</a></p><p>–</p><p>Kris on Mastodon: <a href="http://mastodon.social/@krisajenkins">http://mastodon.social/@krisajenkins</a></p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p>]]></description>
      <content:encoded><![CDATA[<p>This week we take a look at what you can do with a GPU when you get away from just using it to draw polygons. Agnès Leroy has spent most of her career programming, optimizing and converting programs to run on that oh-so-curious piece of specialised processing hardware, and we go through all the places that journey has taken her. From simulating the flow of fluids in hydroelectric powerstations, to figuring out how to make a new approach to encryption run fast enough to make it practical…</p><p>–</p><p>Become a Developer Voices supporter! <a href="https://patreon.com/DeveloperVoices">https://patreon.com/DeveloperVoices</a></p><p>A Fully Homomorphic Encryption Scheme (pdf): <a href="https://crypto.stanford.edu/craig/craig-thesis.pdf">https://crypto.stanford.edu/craig/craig-thesis.pdf</a></p><p>CUDA platform: <a href="https://developer.nvidia.com/cuda-zone">https://developer.nvidia.com/cuda-zone</a></p><p>Rust-CUDA: <a href="https://github.com/Rust-GPU/Rust-CUDA">https://github.com/Rust-GPU/Rust-CUDA</a></p><p>And in case anyone was wondering, A List of Hydroelectric Power Stations in France: <a href="https://en.wikipedia.org/wiki/Category:Hydroelectric_power_stations_in_France">https://en.wikipedia.org/wiki/Category:Hydroelectric_power_stations_in_France</a></p><p>–</p><p>Kris on Mastodon: <a href="http://mastodon.social/@krisajenkins">http://mastodon.social/@krisajenkins</a></p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p>]]></content:encoded>
      <guid isPermaLink="false">6d6c1db8-5ccd-4e7d-98d1-eb390ac61328</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3828</itunes:duration>
    </item>
    <item>
      <title>The State of Full-Stack OCaml (with António Monteiro)</title>
      <link>https://zencastr.com/z/gRQHx6Hj</link>
      <itunes:title>The State of Full-Stack OCaml (with António Monteiro)</itunes:title>
      <itunes:summary>OCaml has one of the best-loved compilers available, and parts of it are surprisingly pluggable, so it&apos;s not surprising that someone would eventually try to wed OCaml with JavaScript and the web browser. In fact, the ecosystem has gone further, and there are now a bevvy of options for people who want to write OCaml and run it in the browser, or want to write OCaml in the browser, or want to write something that looks like JavaScript but runs OCaml on the backend.

Joining me to explore the OCaml-meets-JavaScript world is Antonio Montiero. He&apos;s a key maintainer/contributor for Melange and ReasonML, as well as several other interesting OCaml web projects.

We kick off by discussing the benefits of OCaml and how it clicked with him personally, before we dive into how and why the compiler is being adapted and tweaked to take it to a whole new audience of web-hungry developers.

–

Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices

Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join

Sponsor Antonio&apos;s Work: https://github.com/sponsors/anmonteiro/

–

The OCaml Platform: https://ocaml.org/platform

OCaml on Discord: https://discuss.ocaml.org/t/ocaml-discord-server/1884

ReasonML: https://reasonml.github.io/en/

What is Melange? https://melange.re/v4.0.0/what-is-melange.html

Melange for React Devs: https://react-book.melange.re/

The Melange Playground: https://melange.re/v4.0.0/playground/

js_of_ocaml: https://github.com/ocsigen/js_of_ocaml

FUN OCaml Conference: https://fun-ocaml.com/

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 11 Sep 2024 14:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="125652244" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/66df20d9537db84b89da9d48/size/125652244/audio-files/619e48a9649c44004c5a44e8/b3172be1-d648-4e6e-9875-bf47da2406a6.mp3"/>
      <description><![CDATA[<p>OCaml has one of the best-loved compilers available, and parts of it are surprisingly pluggable, so it’s not surprising that someone would eventually try to wed OCaml with JavaScript and the web browser. In fact, the ecosystem has gone further, and there are now a bevvy of options for people who want to write OCaml and run it in the browser, or want to write OCaml in the browser, or want to write something that looks like JavaScript but runs OCaml on the backend.</p><p>Joining me to explore the OCaml-meets-JavaScript world is Antonio Montiero. He’s a key maintainer/contributor for Melange and ReasonML, as well as several other interesting OCaml web projects.</p><p>We kick off by discussing the benefits of OCaml and how it clicked with him personally, before we dive into how and why the compiler is being adapted and tweaked to take it to a whole new audience of web-hungry developers.</p><p>–</p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join</p><p>Sponsor Antonio’s Work: https://github.com/sponsors/anmonteiro/</p><p>–</p><p>The OCaml Platform: https://ocaml.org/platform</p><p>OCaml on Discord: https://discuss.ocaml.org/t/ocaml-discord-server/1884</p><p>ReasonML: https://reasonml.github.io/en/</p><p>What is Melange? https://melange.re/v4.0.0/what-is-melange.html</p><p>Melange for React Devs: https://react-book.melange.re/</p><p>The Melange Playground: https://melange.re/v4.0.0/playground/</p><p>js_of_ocaml: https://github.com/ocsigen/js_of_ocaml</p><p>FUN OCaml Conference: https://fun-ocaml.com/</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></description>
      <content:encoded><![CDATA[<p>OCaml has one of the best-loved compilers available, and parts of it are surprisingly pluggable, so it’s not surprising that someone would eventually try to wed OCaml with JavaScript and the web browser. In fact, the ecosystem has gone further, and there are now a bevvy of options for people who want to write OCaml and run it in the browser, or want to write OCaml in the browser, or want to write something that looks like JavaScript but runs OCaml on the backend.</p><p>Joining me to explore the OCaml-meets-JavaScript world is Antonio Montiero. He’s a key maintainer/contributor for Melange and ReasonML, as well as several other interesting OCaml web projects.</p><p>We kick off by discussing the benefits of OCaml and how it clicked with him personally, before we dive into how and why the compiler is being adapted and tweaked to take it to a whole new audience of web-hungry developers.</p><p>–</p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join</p><p>Sponsor Antonio’s Work: https://github.com/sponsors/anmonteiro/</p><p>–</p><p>The OCaml Platform: https://ocaml.org/platform</p><p>OCaml on Discord: https://discuss.ocaml.org/t/ocaml-discord-server/1884</p><p>ReasonML: https://reasonml.github.io/en/</p><p>What is Melange? https://melange.re/v4.0.0/what-is-melange.html</p><p>Melange for React Devs: https://react-book.melange.re/</p><p>The Melange Playground: https://melange.re/v4.0.0/playground/</p><p>js_of_ocaml: https://github.com/ocsigen/js_of_ocaml</p><p>FUN OCaml Conference: https://fun-ocaml.com/</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></content:encoded>
      <guid isPermaLink="false">9516175f-7872-4e49-a231-e2155fa3a731</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/cde8d1f5-e1f1-4c33-9f47-781a27ad1d2e.png"/>
      <itunes:duration>5235</itunes:duration>
    </item>
    <item>
      <title>Multiplatform Maps Built As Layers on Rust (with Ian Wagner)</title>
      <link>https://zencastr.com/z/H8ZviOiG</link>
      <itunes:title>Multiplatform Maps Built As Layers on Rust (with Ian Wagner)</itunes:title>
      <itunes:summary>Mapping is a hugely complex task to take on. Even if you moved as much of the data-management as you can out to 3rd-party services, you&apos;d still have a tonne of work to do weaving together map tiles, routing information, GPS data, points of interest, search and more. And as if that wasn&apos;t enough, you&apos;d probably want that software to work on a whole range of platforms, so you have to build something that works on iOS, Android and more. It&apos;s little wonder that the space is dominated by a few closed-source projects owned by huge companies with near-limitless resources.

But that doesn&apos;t mean the problem can&apos;t be cracked as an open-source project. This week we look at the open source map library Ferrostar. Joining me to discuss it is the project&apos;s lead developer, Ian Wagner, as we explore the problem space and dive down into Ferrostar&apos;s architecture: A core Rust library serving a suite of custom UI shells written in Kotlin, Swift, WASM and TypeScript.

Along the way there are tips for anyone attempting to build a map, or wanting to interop Rust with other languages.

–

Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices

Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join

Ferrostar on Github: https://github.com/stadiamaps/ferrostar

Ferrostar user guide: https://stadiamaps.github.io/ferrostar/

MapLibre: https://maplibre.org/

Project OSRM: https://project-osrm.org/

Dioxus (Rust UI framework): https://dioxuslabs.com/

Slint: https://slint.dev/

UniFFI (repo): https://github.com/mozilla/uniffi-rs

UniFFI (user guide): https://mozilla.github.io/uniffi-rs/latest/

Beeline (navigation device): https://beeline.co/

Ian on Mastodon: https://fosstodon.org/@ianthetechie

Ian on Twitter: https://x.com/ianthetechie

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 21 Aug 2024 14:30:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="88276180" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/66c44689cc2f7905777d5267/size/88276180/audio-files/619e48a9649c44004c5a44e8/341b7bde-2e61-40f6-a0e7-ca790d913b55.mp3"/>
      <description><![CDATA[<p>Mapping is a hugely complex task to take on. Even if you moved as much of the data-management as you can out to 3rd-party services, you’d still have a tonne of work to do weaving together map tiles, routing information, GPS data, points of interest, search and more. And as if that wasn’t enough, you’d probably want that software to work on a whole range of platforms, so you have to build something that works on iOS, Android and more. It’s little wonder that the space is dominated by a few closed-source projects owned by huge companies with near-limitless resources.</p><p>But that doesn’t mean the problem can’t be cracked as an open-source project. This week we look at the open source map library Ferrostar. Joining me to discuss it is the project’s lead developer, Ian Wagner, as we explore the problem space and dive down into Ferrostar’s architecture: A core Rust library serving a suite of custom UI shells written in Kotlin, Swift, WASM and TypeScript.</p><p>Along the way there are tips for anyone attempting to build a map, or wanting to interop Rust with other languages.</p><p>–</p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join</p><p>Ferrostar on Github: https://github.com/stadiamaps/ferrostar</p><p>Ferrostar user guide: https://stadiamaps.github.io/ferrostar/</p><p>MapLibre: https://maplibre.org/</p><p>Project OSRM: https://project-osrm.org/</p><p>Dioxus (Rust UI framework): https://dioxuslabs.com/</p><p>Slint: https://slint.dev/</p><p>UniFFI (repo): https://github.com/mozilla/uniffi-rs</p><p>UniFFI (user guide): https://mozilla.github.io/uniffi-rs/latest/</p><p>Beeline (navigation device): https://beeline.co/</p><p>Ian on Mastodon: https://fosstodon.org/@ianthetechie</p><p>Ian on Twitter: https://x.com/ianthetechie</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></description>
      <content:encoded><![CDATA[<p>Mapping is a hugely complex task to take on. Even if you moved as much of the data-management as you can out to 3rd-party services, you’d still have a tonne of work to do weaving together map tiles, routing information, GPS data, points of interest, search and more. And as if that wasn’t enough, you’d probably want that software to work on a whole range of platforms, so you have to build something that works on iOS, Android and more. It’s little wonder that the space is dominated by a few closed-source projects owned by huge companies with near-limitless resources.</p><p>But that doesn’t mean the problem can’t be cracked as an open-source project. This week we look at the open source map library Ferrostar. Joining me to discuss it is the project’s lead developer, Ian Wagner, as we explore the problem space and dive down into Ferrostar’s architecture: A core Rust library serving a suite of custom UI shells written in Kotlin, Swift, WASM and TypeScript.</p><p>Along the way there are tips for anyone attempting to build a map, or wanting to interop Rust with other languages.</p><p>–</p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join</p><p>Ferrostar on Github: https://github.com/stadiamaps/ferrostar</p><p>Ferrostar user guide: https://stadiamaps.github.io/ferrostar/</p><p>MapLibre: https://maplibre.org/</p><p>Project OSRM: https://project-osrm.org/</p><p>Dioxus (Rust UI framework): https://dioxuslabs.com/</p><p>Slint: https://slint.dev/</p><p>UniFFI (repo): https://github.com/mozilla/uniffi-rs</p><p>UniFFI (user guide): https://mozilla.github.io/uniffi-rs/latest/</p><p>Beeline (navigation device): https://beeline.co/</p><p>Ian on Mastodon: https://fosstodon.org/@ianthetechie</p><p>Ian on Twitter: https://x.com/ianthetechie</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></content:encoded>
      <guid isPermaLink="false">ab149bb5-a0a8-409e-847c-82a0c574d6b1</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3678</itunes:duration>
    </item>
    <item>
      <title>Building a New Terminal App (with Zach Lloyd)</title>
      <link>https://zencastr.com/z/YHEpsIUb</link>
      <itunes:title>Building a New Terminal App (with Zach Lloyd)</itunes:title>
      <itunes:summary>The terminal might be the most used development tool in history. So it&apos;s a little odd that it hasn&apos;t changed that much in the decades since the terminal first came into being. Is the terminal a &quot;completed&quot; project? Or are there new ways to look at it that might make it even more useful?

This week&apos;s guest—Zach Lloyd—is convinced the terminal is ripe for a new approach that&apos;s more than just a new coat of paint. And in this episode we dive into what that approach is, what he&apos;s trying to do with the Warp Terminal, and how it&apos;s put together using a combination of Rust and GPU shaders.

Along the way we look at what LLMs could do to improve the terminal experience, where the boundary lies between terminal and shell, and where Go has solved some problems and created others over at Warp HQ.

–

Become a Supporter on Patreon: https://patreon.com/DeveloperVoices

Become a Supporter on YouTube: https://www.youtube.com/@developervoices/join

Warp Homepage: https://app.warp.dev/referral/VQGWW3

VT100 Information: https://vt100.net/

Game of Life in Rust: https://github.com/krisajenkins/game-of-life-rust

Zed (Text editor in Rust): https://zed.dev/

Flutter: https://flutter.dev/

The Painter&apos;s Algorithm: https://en.wikipedia.org/wiki/Painter%27s_algorithm

Zach on LinkedIn: https://www.linkedin.com/in/zachlloyd/

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins

–

0:00 Intro

2:22 Why Create A New Terminal?

7:28 Blurring the Lines Between Terminal and Shell

16:04 How Do You Build A Terminal Program?

24:55 Implementing a Terminal in Rust

30:32 Rust Frameworks for GPU Shaders

40:04 Will Any Of This Go Open Source?

42:49 Managing a Mixture of Rust and Go

47:52 What&apos;s the DX of Warp?

51:43 Integrating LLMs into the Terminal

1:05:58 Outro</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 14 Aug 2024 14:30:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="97430548" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/66bca1c514dce93958e139f8/size/97430548/audio-files/619e48a9649c44004c5a44e8/aa56b188-a7a0-4587-a1f4-246cf67c3011.mp3"/>
      <description><![CDATA[<p>The terminal might be the most used development tool in history. So it’s a little odd that it hasn’t changed that much in the decades since the terminal first came into being. Is the terminal a “completed” project? Or are there new ways to look at it that might make it even more useful?</p><p>This week’s guest—Zach Lloyd—is convinced the terminal is ripe for a new approach that’s more than just a new coat of paint. And in this episode we dive into what that approach is, what he’s trying to do with the Warp Terminal, and how it’s put together using a combination of Rust and GPU shaders.</p><p>Along the way we look at what LLMs could do to improve the terminal experience, where the boundary lies between terminal and shell, and where Go has solved some problems and created others over at Warp HQ.</p><p>–</p><p>Become a Supporter on Patreon: https://patreon.com/DeveloperVoices</p><p>Become a Supporter on YouTube: https://www.youtube.com/@developervoices/join</p><p>Warp Homepage: https://app.warp.dev/referral/VQGWW3</p><p>VT100 Information: https://vt100.net/</p><p>Game of Life in Rust: https://github.com/krisajenkins/game-of-life-rust</p><p>Zed (Text editor in Rust): https://zed.dev/</p><p>Flutter: https://flutter.dev/</p><p>The Painter’s Algorithm: https://en.wikipedia.org/wiki/Painter%27s_algorithm</p><p>Zach on LinkedIn: https://www.linkedin.com/in/zachlloyd/</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p>–</p><p>0:00 Intro</p><p>2:22 Why Create A New Terminal?</p><p>7:28 Blurring the Lines Between Terminal and Shell</p><p>16:04 How Do You Build A Terminal Program?</p><p>24:55 Implementing a Terminal in Rust</p><p>30:32 Rust Frameworks for GPU Shaders</p><p>40:04 Will Any Of This Go Open Source?</p><p>42:49 Managing a Mixture of Rust and Go</p><p>47:52 What’s the DX of Warp?</p><p>51:43 Integrating LLMs into the Terminal</p><p>1:05:58 Outro</p>]]></description>
      <content:encoded><![CDATA[<p>The terminal might be the most used development tool in history. So it’s a little odd that it hasn’t changed that much in the decades since the terminal first came into being. Is the terminal a “completed” project? Or are there new ways to look at it that might make it even more useful?</p><p>This week’s guest—Zach Lloyd—is convinced the terminal is ripe for a new approach that’s more than just a new coat of paint. And in this episode we dive into what that approach is, what he’s trying to do with the Warp Terminal, and how it’s put together using a combination of Rust and GPU shaders.</p><p>Along the way we look at what LLMs could do to improve the terminal experience, where the boundary lies between terminal and shell, and where Go has solved some problems and created others over at Warp HQ.</p><p>–</p><p>Become a Supporter on Patreon: https://patreon.com/DeveloperVoices</p><p>Become a Supporter on YouTube: https://www.youtube.com/@developervoices/join</p><p>Warp Homepage: https://app.warp.dev/referral/VQGWW3</p><p>VT100 Information: https://vt100.net/</p><p>Game of Life in Rust: https://github.com/krisajenkins/game-of-life-rust</p><p>Zed (Text editor in Rust): https://zed.dev/</p><p>Flutter: https://flutter.dev/</p><p>The Painter’s Algorithm: https://en.wikipedia.org/wiki/Painter%27s_algorithm</p><p>Zach on LinkedIn: https://www.linkedin.com/in/zachlloyd/</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p>–</p><p>0:00 Intro</p><p>2:22 Why Create A New Terminal?</p><p>7:28 Blurring the Lines Between Terminal and Shell</p><p>16:04 How Do You Build A Terminal Program?</p><p>24:55 Implementing a Terminal in Rust</p><p>30:32 Rust Frameworks for GPU Shaders</p><p>40:04 Will Any Of This Go Open Source?</p><p>42:49 Managing a Mixture of Rust and Go</p><p>47:52 What’s the DX of Warp?</p><p>51:43 Integrating LLMs into the Terminal</p><p>1:05:58 Outro</p>]]></content:encoded>
      <guid isPermaLink="false">21dcf626-f084-4bc3-aec4-0aef31ed3939</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4059</itunes:duration>
    </item>
    <item>
      <title>Building A Programming Language From Its Core (with Peter Saxton)</title>
      <link>https://zencastr.com/z/LKLWYQcD</link>
      <itunes:title>Building A Programming Language From Its Core (with Peter Saxton)</itunes:title>
      <itunes:summary>A language&apos;s AST—it&apos;s abstract syntax tree—is nearly always a hidden implementation detail. It&apos;s not treated as part of the language, but merely the intermediate step between parsing and compiling. But this week&apos;s guest aims to flip that relationship on its head...

Peter Saxton joins me to talk about EYG - an AST-first language that defines the fundamental capabilities first, and then stretches out from there to surface syntax and final execution.

The result is something that can teach us a lot about how a typed, functional programming language works; how an extensible effects system works; and could make writing a new programming language as easy as defining the syntax you want, and parsing that into EYG&apos;s AST.

--

EYG Homepage: https://github.com/crowdhailer/eyg-lang

TinyGo: https://tinygo.org/

Become a Supporter on Patreon: https://patreon.com/DeveloperVoices

Become a Supporter on YouTube: https://www.youtube.com/@developervoices/join

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 07 Aug 2024 14:30:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="88352212" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/66af46ae7b4f3376f63392ad/size/88352212/audio-files/619e48a9649c44004c5a44e8/3951471d-432a-45b0-b163-d62e05e7845c.mp3"/>
      <description><![CDATA[<p>A language’s AST—it’s abstract syntax tree—is nearly always a hidden implementation detail. It’s not treated as part of the language, but merely the intermediate step between parsing and compiling. But this week’s guest aims to flip that relationship on its head... <br><br>Peter Saxton joins me to talk about EYG - an AST-first language that defines the fundamental capabilities first, and then stretches out from there to surface syntax and final execution. <br><br>The result is something that can teach us a lot about how a typed, functional programming language works; how an extensible effects system works; and could make writing a new programming language as easy as defining the syntax you want, and parsing that into EYG's AST.<br><br>--</p><p>EYG Homepage: <a href="https://github.com/crowdhailer/eyg-lang">https://github.com/crowdhailer/eyg-lang</a></p><p>TinyGo: <a href="https://tinygo.org/">https://tinygo.org/</a></p><p>Become a Supporter on Patreon: https://patreon.com/DeveloperVoices</p><p>Become a Supporter on YouTube: <a href="https://www.youtube.com/@developervoices/join">https://www.youtube.com/@developervoices/join</a></p><p>Kris on Mastodon: <a href="http://mastodon.social/@krisajenkins">http://mastodon.social/@krisajenkins</a></p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p>]]></description>
      <content:encoded><![CDATA[<p>A language’s AST—it’s abstract syntax tree—is nearly always a hidden implementation detail. It’s not treated as part of the language, but merely the intermediate step between parsing and compiling. But this week’s guest aims to flip that relationship on its head... <br><br>Peter Saxton joins me to talk about EYG - an AST-first language that defines the fundamental capabilities first, and then stretches out from there to surface syntax and final execution. <br><br>The result is something that can teach us a lot about how a typed, functional programming language works; how an extensible effects system works; and could make writing a new programming language as easy as defining the syntax you want, and parsing that into EYG's AST.<br><br>--</p><p>EYG Homepage: <a href="https://github.com/crowdhailer/eyg-lang">https://github.com/crowdhailer/eyg-lang</a></p><p>TinyGo: <a href="https://tinygo.org/">https://tinygo.org/</a></p><p>Become a Supporter on Patreon: https://patreon.com/DeveloperVoices</p><p>Become a Supporter on YouTube: <a href="https://www.youtube.com/@developervoices/join">https://www.youtube.com/@developervoices/join</a></p><p>Kris on Mastodon: <a href="http://mastodon.social/@krisajenkins">http://mastodon.social/@krisajenkins</a></p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p>]]></content:encoded>
      <guid isPermaLink="false">f88aa4df-abbf-4704-b5fe-74dd778bd5da</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/cde8d1f5-e1f1-4c33-9f47-781a27ad1d2e.png"/>
      <itunes:duration>3681</itunes:duration>
    </item>
    <item>
      <title>Practical Applications for DuckDB (with Simon Aubury &amp; Ned Letcher)</title>
      <link>https://zencastr.com/z/c63k-FFz</link>
      <itunes:title>Practical Applications for DuckDB (with Simon Aubury &amp; Ned Letcher)</itunes:title>
      <itunes:summary>DuckDB&apos;s become a favourite data-handling tool of mine, simply because it does so many small things well. It can read and write a huge number of data formats; it can infer schemas automatically when you just want to move quickly; and it can interface with most languages, run like lightning on the desktop or be embedded into a webpage. I&apos;m a huge fan.

But I&apos;m not nearly as knowledgeable as this week&apos;s two fans, Simon Aubury and Ned Letcher, who&apos;ve just written a book on all the many ways you can use DuckDB and all the hidden tricks and tips that help you make the most of this. So in this episode we&apos;re taking a practical look at DuckDB, what problems it can solve at work, and how to start getting the most out of it.

–

Getting Started with DuckDB (book): https://packt.link/byKYt

DuckDB episode with Hannes Mühleisen: https://youtu.be/pZV9FvdKmLc

DuckDB: https://duckdb.org/

dplyr, the data-manipulation language: https://dplyr.tidyverse.org/

duckplyr, DuckDB&apos;s &apos;native&apos; version: https://github.com/duckdblabs/duckplyr

Substrait: https://substrait.io/

Observable (Markdown+DuckDB=Reports): https://observablehq.com/framework/

DuckDB&apos;s &quot;friendly&quot; SQL: https://duckdb.org/docs/sql/dialect/friendly_sql.html

Community Extensions: https://community-extensions.duckdb.org/

DuckCon #5: https://duckdb.org/2024/08/15/duckcon5.html

Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices

Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join

Simon on Twitter: https://x.com/SimonAubury

Ned on Twitter: https://x.com/nletcher

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 31 Jul 2024 14:30:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="98026708" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/66aa47173be48345cb3de63c/size/98026708/audio-files/619e48a9649c44004c5a44e8/22b56d31-c901-4a9c-a576-ab606691fc1d.mp3"/>
      <description><![CDATA[<p>DuckDB’s become a favourite data-handling tool of mine, simply because it does so many small things well. It can read and write a huge number of data formats; it can infer schemas automatically when you just want to move quickly; and it can interface with most languages, run like lightning on the desktop or be embedded into a webpage. I’m a huge fan.</p><p>But I’m not nearly as knowledgeable as this week’s two fans, Simon Aubury and Ned Letcher, who’ve just written a book on all the many ways you can use DuckDB and all the hidden tricks and tips that help you make the most of this. So in this episode we’re taking a practical look at DuckDB, what problems it can solve at work, and how to start getting the most out of it.</p><p>–</p><p>Getting Started with DuckDB (book): https://packt.link/byKYt</p><p>DuckDB episode with Hannes Mühleisen: https://youtu.be/pZV9FvdKmLc</p><p>DuckDB: https://duckdb.org/</p><p>dplyr, the data-manipulation language: https://dplyr.tidyverse.org/</p><p>duckplyr, DuckDB’s ‘native’ version: https://github.com/duckdblabs/duckplyr</p><p>Substrait: https://substrait.io/</p><p>Observable (Markdown+DuckDB=Reports): https://observablehq.com/framework/</p><p>DuckDB’s “friendly” SQL: https://duckdb.org/docs/sql/dialect/friendly_sql.html</p><p>Community Extensions: https://community-extensions.duckdb.org/</p><p>DuckCon #5: https://duckdb.org/2024/08/15/duckcon5.html</p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join</p><p>Simon on Twitter: https://x.com/SimonAubury</p><p>Ned on Twitter: https://x.com/nletcher</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></description>
      <content:encoded><![CDATA[<p>DuckDB’s become a favourite data-handling tool of mine, simply because it does so many small things well. It can read and write a huge number of data formats; it can infer schemas automatically when you just want to move quickly; and it can interface with most languages, run like lightning on the desktop or be embedded into a webpage. I’m a huge fan.</p><p>But I’m not nearly as knowledgeable as this week’s two fans, Simon Aubury and Ned Letcher, who’ve just written a book on all the many ways you can use DuckDB and all the hidden tricks and tips that help you make the most of this. So in this episode we’re taking a practical look at DuckDB, what problems it can solve at work, and how to start getting the most out of it.</p><p>–</p><p>Getting Started with DuckDB (book): https://packt.link/byKYt</p><p>DuckDB episode with Hannes Mühleisen: https://youtu.be/pZV9FvdKmLc</p><p>DuckDB: https://duckdb.org/</p><p>dplyr, the data-manipulation language: https://dplyr.tidyverse.org/</p><p>duckplyr, DuckDB’s ‘native’ version: https://github.com/duckdblabs/duckplyr</p><p>Substrait: https://substrait.io/</p><p>Observable (Markdown+DuckDB=Reports): https://observablehq.com/framework/</p><p>DuckDB’s “friendly” SQL: https://duckdb.org/docs/sql/dialect/friendly_sql.html</p><p>Community Extensions: https://community-extensions.duckdb.org/</p><p>DuckCon #5: https://duckdb.org/2024/08/15/duckcon5.html</p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join</p><p>Simon on Twitter: https://x.com/SimonAubury</p><p>Ned on Twitter: https://x.com/nletcher</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></content:encoded>
      <guid isPermaLink="false">a7fbe902-3d0a-4471-9567-15ac8b9ee199</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4084</itunes:duration>
    </item>
    <item>
      <title>Recording and Replaying the Browser (with Justin Halsall)</title>
      <link>https://zencastr.com/z/PoPRBp8F</link>
      <itunes:title>Recording and Replaying the Browser (with Justin Halsall)</itunes:title>
      <itunes:summary>RRWeb is based on a simple idea: If you capture all the DOM events in a browser session, and when they happened, you could play it back later. Play it back for diagnosing error conditions, for understanding your user&apos;s journey, or for creating demo videos that can be edited element-by-element instead of frame-by-frame.

Unfortunately, the simple idea gets tricky when you try to implement, for a whole host of browser specific glitches, differences, and places where the HTML5 spec ran out. It&apos;s exactly the kind of project where might want to use it, but you want someone else to maintain it!

Joining us this week is Justin Halsall—a chief contributor to rrweb—to teach us about some of the more barren corners of the browser spec, how he&apos;s fought through them, and what the benefits are on the other side…

–

RRWeb homepage: https://www.rrweb.io/

RRWeb on Github: https://github.com/rrweb-io/rrweb

RecordOnce: https://recordonce.com/

Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices

Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join

Justin on Twitter: https://x.com/juice10

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins

–

0:00 Intro

3:10 What is rrweb Doing?

6:12 Beginning With A Naive Implementation

9:49 Supporting Canvas Tags

13:05 Exotic HTML 5 Tags Like Midi

14:31 The Internal Data Format

17:39 How Reliable Can This Be In Practice?

23:04 Cross-Browser Support

24:32 Exploring The Use Cases

30:17 Privacy Issues

33:46 Analyzing User Interactions En-Masse

36:40 Is The Spec Greater Than The Tool?

38:20 The Practical Benefits Of Contributing To Open Source

44:45 Updating Recordings After The Website Changes

49:55 Playing Well (Or Badly) With Popular Frameworks

53:21 The Runtime Burden

54:17 What&apos;s Coming In The Future?

1:01:02 Outro</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 24 Jul 2024 14:30:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="90497812" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/66a01067747f65207cdce67a/size/90497812/audio-files/619e48a9649c44004c5a44e8/dedeb8d0-19e1-4690-bd0e-680a49d4a6f4.mp3"/>
      <description><![CDATA[<p>RRWeb is based on a simple idea: If you capture all the DOM events in a browser session, and when they happened, you could play it back later. Play it back for diagnosing error conditions, for understanding your user’s journey, or for creating demo videos that can be edited element-by-element instead of frame-by-frame.</p><p>Unfortunately, the simple idea gets tricky when you try to implement, for a whole host of browser specific glitches, differences, and places where the HTML5 spec ran out. It’s exactly the kind of project where might want to use it, but you want someone else to maintain it!</p><p>Joining us this week is Justin Halsall—a chief contributor to rrweb—to teach us about some of the more barren corners of the browser spec, how he’s fought through them, and what the benefits are on the other side…</p><p>–</p><p>RRWeb homepage: https://www.rrweb.io/</p><p>RRWeb on Github: https://github.com/rrweb-io/rrweb</p><p>RecordOnce: https://recordonce.com/</p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join</p><p>Justin on Twitter: https://x.com/juice10</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p>–</p><p>0:00 Intro</p><p>3:10 What is rrweb Doing?</p><p>6:12 Beginning With A Naive Implementation</p><p>9:49 Supporting Canvas Tags</p><p>13:05 Exotic HTML 5 Tags Like Midi</p><p>14:31 The Internal Data Format</p><p>17:39 How Reliable Can This Be In Practice?</p><p>23:04 Cross-Browser Support</p><p>24:32 Exploring The Use Cases</p><p>30:17 Privacy Issues</p><p>33:46 Analyzing User Interactions En-Masse</p><p>36:40 Is The Spec Greater Than The Tool?</p><p>38:20 The Practical Benefits Of Contributing To Open Source</p><p>44:45 Updating Recordings After The Website Changes</p><p>49:55 Playing Well (Or Badly) With Popular Frameworks</p><p>53:21 The Runtime Burden</p><p>54:17 What's Coming In The Future?</p><p>1:01:02 Outro</p>]]></description>
      <content:encoded><![CDATA[<p>RRWeb is based on a simple idea: If you capture all the DOM events in a browser session, and when they happened, you could play it back later. Play it back for diagnosing error conditions, for understanding your user’s journey, or for creating demo videos that can be edited element-by-element instead of frame-by-frame.</p><p>Unfortunately, the simple idea gets tricky when you try to implement, for a whole host of browser specific glitches, differences, and places where the HTML5 spec ran out. It’s exactly the kind of project where might want to use it, but you want someone else to maintain it!</p><p>Joining us this week is Justin Halsall—a chief contributor to rrweb—to teach us about some of the more barren corners of the browser spec, how he’s fought through them, and what the benefits are on the other side…</p><p>–</p><p>RRWeb homepage: https://www.rrweb.io/</p><p>RRWeb on Github: https://github.com/rrweb-io/rrweb</p><p>RecordOnce: https://recordonce.com/</p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join</p><p>Justin on Twitter: https://x.com/juice10</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p>–</p><p>0:00 Intro</p><p>3:10 What is rrweb Doing?</p><p>6:12 Beginning With A Naive Implementation</p><p>9:49 Supporting Canvas Tags</p><p>13:05 Exotic HTML 5 Tags Like Midi</p><p>14:31 The Internal Data Format</p><p>17:39 How Reliable Can This Be In Practice?</p><p>23:04 Cross-Browser Support</p><p>24:32 Exploring The Use Cases</p><p>30:17 Privacy Issues</p><p>33:46 Analyzing User Interactions En-Masse</p><p>36:40 Is The Spec Greater Than The Tool?</p><p>38:20 The Practical Benefits Of Contributing To Open Source</p><p>44:45 Updating Recordings After The Website Changes</p><p>49:55 Playing Well (Or Badly) With Popular Frameworks</p><p>53:21 The Runtime Burden</p><p>54:17 What's Coming In The Future?</p><p>1:01:02 Outro</p>]]></content:encoded>
      <guid isPermaLink="false">e5b364b4-68b0-4ad4-b1cc-0f2b075a9b88</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3770</itunes:duration>
    </item>
    <item>
      <title>Zig as a Multi-OS Build System (with Loris Cro)</title>
      <link>https://zencastr.com/z/SkXkcelT</link>
      <itunes:title>Zig as a Multi-OS Build System (with Loris Cro)</itunes:title>
      <itunes:summary>The ZigLang team have put an astonishing amount of effort into making Zig work an effective tool for compiling C across different architectures. Work that benefits the Zig language, but also has a chance to benefit languages like Python and Rust. Or indeed, any language that uses native C libraries somewhere in its stack.

So this week we&apos;re joined by Loris Cro of the Zig team to dive into how you make a reliable, cross-platform toolchain that can compile C anywhere it finds it. And in doing so, 



–



Zig Homepage: https://ziglang.org/

Zig on Github: https://github.com/ziglang/zig

MingW for Windows: https://www.mingw-w64.org/

All Your Codebase: https://allyourcodebase.com/

Ziglang on PyPi: https://pypi.org/project/ziglang/

Shout out to Whitequark: https://pypi.org/user/whitequark/

Darling: https://www.darlinghq.org/

WineHQ: https://www.winehq.org/

PyPi Stats: https://pypistats.org/packages/__all__

The Zine static site generator: https://zine-ssg.io/

The Zine source code: https://github.com/kristoff-it/zine



Loris&apos; website: https://kristoff.it/

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 17 Jul 2024 14:03:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="113905876" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/6696c828438a745015751bc1/size/113905876/audio-files/619e48a9649c44004c5a44e8/9dd9c627-cbaa-4097-ab25-e55391d88987.mp3"/>
      <description><![CDATA[<p>The ZigLang team have put an astonishing amount of effort into making Zig work an effective tool for compiling C across different architectures. Work that benefits the Zig language, but also has a chance to benefit languages like Python and Rust. Or indeed, any language that uses native C libraries somewhere in its stack.</p><p>So this week we’re joined by Loris Cro of the Zig team to dive into how you make a reliable, cross-platform toolchain that can compile C anywhere it finds it. And in doing so,&nbsp;</p><p><br></p><p>–</p><p><br></p><p>Zig Homepage: https://ziglang.org/</p><p>Zig on Github: https://github.com/ziglang/zig</p><p>MingW for Windows: https://www.mingw-w64.org/</p><p>All Your Codebase: https://allyourcodebase.com/</p><p>Ziglang on PyPi: https://pypi.org/project/ziglang/</p><p>Shout out to Whitequark: https://pypi.org/user/whitequark/</p><p>Darling: https://www.darlinghq.org/</p><p>WineHQ: https://www.winehq.org/</p><p>PyPi Stats: https://pypistats.org/packages/__all__</p><p>The Zine static site generator: https://zine-ssg.io/</p><p>The Zine source code: https://github.com/kristoff-it/zine</p><p><br></p><p>Loris’ website: https://kristoff.it/</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></description>
      <content:encoded><![CDATA[<p>The ZigLang team have put an astonishing amount of effort into making Zig work an effective tool for compiling C across different architectures. Work that benefits the Zig language, but also has a chance to benefit languages like Python and Rust. Or indeed, any language that uses native C libraries somewhere in its stack.</p><p>So this week we’re joined by Loris Cro of the Zig team to dive into how you make a reliable, cross-platform toolchain that can compile C anywhere it finds it. And in doing so,&nbsp;</p><p><br></p><p>–</p><p><br></p><p>Zig Homepage: https://ziglang.org/</p><p>Zig on Github: https://github.com/ziglang/zig</p><p>MingW for Windows: https://www.mingw-w64.org/</p><p>All Your Codebase: https://allyourcodebase.com/</p><p>Ziglang on PyPi: https://pypi.org/project/ziglang/</p><p>Shout out to Whitequark: https://pypi.org/user/whitequark/</p><p>Darling: https://www.darlinghq.org/</p><p>WineHQ: https://www.winehq.org/</p><p>PyPi Stats: https://pypistats.org/packages/__all__</p><p>The Zine static site generator: https://zine-ssg.io/</p><p>The Zine source code: https://github.com/kristoff-it/zine</p><p><br></p><p>Loris’ website: https://kristoff.it/</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></content:encoded>
      <guid isPermaLink="false">bef0a708-b62c-4ab2-b767-3b5313963901</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4745</itunes:duration>
    </item>
    <item>
      <title>Creating and Evolving Elixir (with José Valim)</title>
      <link>https://zencastr.com/z/hcnAK5Tn</link>
      <itunes:title>Creating and Evolving Elixir (with José Valim)</itunes:title>
      <itunes:summary>Back in 2012, José Valim started building Elixir to as a way to have his ideal programming language running on the same platform as Erlang. Fast-forward 12 years and it&apos;s become build anything from distributed infrastructure to notebooks and websites.

In this week&apos;s Developer Voices, José joins us to tell the history of Elixir in a series of design choices. Which features mattered to him in the early days, and which ones excite him most now. What&apos;s going on under the hood to make Elixir tick, and what does its future hold?

–

Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices

Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join



Elixir Homepage: https://elixir-lang.org/

Elixir Docs: https://elixir-lang.org/docs.html

Numerical Elixir: https://github.com/elixir-nx

Phoenix: https://phoenixframework.org/

Livebook: https://livebook.dev/

José&apos;s Livebook &amp; Elixir Presentation: https://www.youtube.com/watch?v=pas9WdWIBHs

Comparing Elixir &amp; Erlang Variables: https://dashbit.co/blog/comparing-elixir-and-erlang-variables

Gleam on the BEAM: https://youtu.be/RntfkL8lUY4



José on Github: https://github.com/josevalim



Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins

</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 10 Jul 2024 14:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="147400852" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/668d88d76657024e2d8a4ab6/size/147400852/audio-files/619e48a9649c44004c5a44e8/651ba8ef-312b-4d84-adf2-b1222ffbedf2.mp3"/>
      <description><![CDATA[<p>Back in 2012, José Valim started building Elixir to as a way to have his ideal programming language running on the same platform as Erlang. Fast-forward 12 years and it’s become build anything from distributed infrastructure to notebooks and websites.</p><p>In this week’s Developer Voices, José joins us to tell the history of Elixir in a series of design choices. Which features mattered to him in the early days, and which ones excite him most now. What’s going on under the hood to make Elixir tick, and what does its future hold?</p><p>–</p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join</p><p><br></p><p>Elixir Homepage: https://elixir-lang.org/</p><p>Elixir Docs: https://elixir-lang.org/docs.html</p><p>Numerical Elixir: https://github.com/elixir-nx</p><p>Phoenix: https://phoenixframework.org/</p><p>Livebook: https://livebook.dev/</p><p>José’s Livebook &amp; Elixir Presentation: https://www.youtube.com/watch?v=pas9WdWIBHs</p><p>Comparing Elixir &amp; Erlang Variables: https://dashbit.co/blog/comparing-elixir-and-erlang-variables</p><p>Gleam on the BEAM: https://youtu.be/RntfkL8lUY4</p><p><br></p><p>José on Github: https://github.com/josevalim</p><p><br></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p><br></p>]]></description>
      <content:encoded><![CDATA[<p>Back in 2012, José Valim started building Elixir to as a way to have his ideal programming language running on the same platform as Erlang. Fast-forward 12 years and it’s become build anything from distributed infrastructure to notebooks and websites.</p><p>In this week’s Developer Voices, José joins us to tell the history of Elixir in a series of design choices. Which features mattered to him in the early days, and which ones excite him most now. What’s going on under the hood to make Elixir tick, and what does its future hold?</p><p>–</p><p>Support Developer Voices on Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices on YouTube: https://www.youtube.com/@developervoices/join</p><p><br></p><p>Elixir Homepage: https://elixir-lang.org/</p><p>Elixir Docs: https://elixir-lang.org/docs.html</p><p>Numerical Elixir: https://github.com/elixir-nx</p><p>Phoenix: https://phoenixframework.org/</p><p>Livebook: https://livebook.dev/</p><p>José’s Livebook &amp; Elixir Presentation: https://www.youtube.com/watch?v=pas9WdWIBHs</p><p>Comparing Elixir &amp; Erlang Variables: https://dashbit.co/blog/comparing-elixir-and-erlang-variables</p><p>Gleam on the BEAM: https://youtu.be/RntfkL8lUY4</p><p><br></p><p>José on Github: https://github.com/josevalim</p><p><br></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p><br></p>]]></content:encoded>
      <guid isPermaLink="false">d6e8a13d-563a-4355-86b0-fd78907e3e58</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/b48b05c0-4f7b-45fc-a5cd-6c27c1406f87.png"/>
      <itunes:duration>6141</itunes:duration>
    </item>
    <item>
      <title>PyO3: From Python to Rust and Back Again (with David Hewitt)</title>
      <link>https://zencastr.com/z/0ER0KlNi</link>
      <itunes:title>PyO3: From Python to Rust and Back Again (with David Hewitt)</itunes:title>
      <itunes:summary>There&apos;s huge pressure on Python at the moment to get faster, ideally without changing at all. One increasingly–popular way of achieving that impossible task is to push the performance critical code down into C, C++, or Rust. And this week we&apos;re focussing on the Python route, as we take a look at PyO3.

David Hewitt&apos;s the principal committer to PyO3, and he joins us to go through the easy parts, the hard parts, and the works in progress, giving us an insight into how Python and Rust work under the hood, and quite how much work it takes to make them work as one.

–

PyO3 User Guide: https://pyo3.rs/v0.22.0/

PyO3 on Github: https://github.com/PyO3/pyo3

Polars: https://pola.rs/

Tokio: https://tokio.rs/

Trio: https://trio.readthedocs.io/ [https://trio.readthedocs.io/en/stable/index.html]

Robyn: https://github.com/sparckles/Robyn

Faster CPython: https://github.com/faster-cpython

Maturin: https://www.maturin.rs/

–

David on Mastodon: https://fosstodon.org/@davidhewitt

David on Twitter: https://x.com/davidhewittdev

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://x.com/krisajenkins [https://twitter.com/krisajenkins]</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 03 Jul 2024 14:30:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="136064020" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/66841d83b5fda072bde5636c/size/136064020/audio-files/619e48a9649c44004c5a44e8/7b876596-0f98-440c-b236-05232f759b53.mp3"/>
      <description><![CDATA[<p>There’s huge pressure on Python at the moment to get faster, ideally without changing at all. One increasingly–popular way of achieving that impossible task is to push the performance critical code down into C, C++, or Rust. And this week we’re focussing on the Python route, as we take a look at PyO3.</p><p>David Hewitt’s the principal committer to PyO3, and he joins us to go through the easy parts, the hard parts, and the works in progress, giving us an insight into how Python and Rust work under the hood, and quite how much work it takes to make them work as one.</p><p>–</p><p>PyO3 User Guide: <a href="https://pyo3.rs/v0.22.0/">https://pyo3.rs/v0.22.0/</a></p><p>PyO3 on Github: <a href="https://github.com/PyO3/pyo3">https://github.com/PyO3/pyo3</a></p><p>Polars: <a href="https://pola.rs/">https://pola.rs/</a></p><p>Tokio: <a href="https://tokio.rs/">https://tokio.rs/</a></p><p>Trio: <a href="https://trio.readthedocs.io/en/stable/index.html">https://trio.readthedocs.io/</a></p><p>Robyn: <a href="https://github.com/sparckles/Robyn">https://github.com/sparckles/Robyn</a></p><p>Faster CPython: <a href="https://github.com/faster-cpython">https://github.com/faster-cpython</a></p><p>Maturin: <a href="https://www.maturin.rs/">https://www.maturin.rs/</a></p><p>–</p><p>David on Mastodon: <a href="https://fosstodon.org/@davidhewitt">https://fosstodon.org/@davidhewitt</a></p><p>David on Twitter: <a href="https://x.com/davidhewittdev">https://x.com/davidhewittdev</a></p><p>Kris on Mastodon: <a href="http://mastodon.social/@krisajenkins">http://mastodon.social/@krisajenkins</a></p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://x.com/krisajenkins</a></p>]]></description>
      <content:encoded><![CDATA[<p>There’s huge pressure on Python at the moment to get faster, ideally without changing at all. One increasingly–popular way of achieving that impossible task is to push the performance critical code down into C, C++, or Rust. And this week we’re focussing on the Python route, as we take a look at PyO3.</p><p>David Hewitt’s the principal committer to PyO3, and he joins us to go through the easy parts, the hard parts, and the works in progress, giving us an insight into how Python and Rust work under the hood, and quite how much work it takes to make them work as one.</p><p>–</p><p>PyO3 User Guide: <a href="https://pyo3.rs/v0.22.0/">https://pyo3.rs/v0.22.0/</a></p><p>PyO3 on Github: <a href="https://github.com/PyO3/pyo3">https://github.com/PyO3/pyo3</a></p><p>Polars: <a href="https://pola.rs/">https://pola.rs/</a></p><p>Tokio: <a href="https://tokio.rs/">https://tokio.rs/</a></p><p>Trio: <a href="https://trio.readthedocs.io/en/stable/index.html">https://trio.readthedocs.io/</a></p><p>Robyn: <a href="https://github.com/sparckles/Robyn">https://github.com/sparckles/Robyn</a></p><p>Faster CPython: <a href="https://github.com/faster-cpython">https://github.com/faster-cpython</a></p><p>Maturin: <a href="https://www.maturin.rs/">https://www.maturin.rs/</a></p><p>–</p><p>David on Mastodon: <a href="https://fosstodon.org/@davidhewitt">https://fosstodon.org/@davidhewitt</a></p><p>David on Twitter: <a href="https://x.com/davidhewittdev">https://x.com/davidhewittdev</a></p><p>Kris on Mastodon: <a href="http://mastodon.social/@krisajenkins">http://mastodon.social/@krisajenkins</a></p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://x.com/krisajenkins</a></p>]]></content:encoded>
      <guid isPermaLink="false">6f3c3882-8096-4cd2-b0ea-8afb478985ba</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/b48b05c0-4f7b-45fc-a5cd-6c27c1406f87.png"/>
      <itunes:duration>5669</itunes:duration>
    </item>
    <item>
      <title>NATS &amp; Jetstream: The System Communication Toolkit  (with Jeremy Saenz)</title>
      <link>https://zencastr.com/z/SI6zDHPt</link>
      <itunes:title>NATS &amp; Jetstream: The System Communication Toolkit  (with Jeremy Saenz)</itunes:title>
      <itunes:summary>Most message systems have an opinion on the right way to do inter-systems communication. Whether it&apos;s actors, queues, message logs or just plain ol&apos; request response, nearly every tool has decided on The Right Way to do messaging, and it optimises heavily for that specific approach. But NATS is absolutely running against that trend. 

In this week&apos;s episode, Jeremey Saenz joins us to talk about NATS, the Cloud Native Computing Foundation&apos;s configurable message-passing and data-transfer system. The promise is a tool that can happily behave like a queue for one channel, a log like another and a request/response protocol for the third, all with a few client flags.

But how does that work? What&apos;s it doing under the hood, what features does it offer, and what do we lose in return for that flexibility? Jeremy has all the answers as we ask, what is NATS really?

–

NATS on Github: https://github.com/nats-io/nats-server

NATS Homepage: https://nats.io/

Getting Started with NATS: https://youtu.be/hjXIUPZ7ArM

Developer Voices Episode on Benthos: https://youtu.be/labzg-YfYKw

CNCF: https://www.cncf.io/

The Ballerina Language: https://ballerina.io/



Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins



Support Developer Voices via Patreon: https://patreon.com/DeveloperVoices

Support Developer Voices via YouTube: https://www.youtube.com/@developervoices/join</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 26 Jun 2024 14:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="102340372" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/667b2ee7ef26df7ce199547c/size/102340372/audio-files/619e48a9649c44004c5a44e8/85471c01-d4af-4d37-a3d3-9bf707be419f.mp3"/>
      <description><![CDATA[<p>Most message systems have an opinion on the right way to do inter-systems communication. Whether it’s actors, queues, message logs or just plain ol’ request response, nearly every tool has decided on The Right Way to do messaging, and it optimises heavily for that specific approach. But NATS is absolutely running against that trend.&nbsp;</p><p>In this week’s episode, Jeremey Saenz joins us to talk about NATS, the Cloud Native Computing Foundation’s configurable message-passing and data-transfer system. The promise is a tool that can happily behave like a queue for one channel, a log like another and a request/response protocol for the third, all with a few client flags.</p><p>But how does that work? What’s it doing under the hood, what features does it offer, and what do we lose in return for that flexibility? Jeremy has all the answers as we ask, what is NATS really?</p><p>–</p><p>NATS on Github: https://github.com/nats-io/nats-server</p><p>NATS Homepage: https://nats.io/</p><p>Getting Started with NATS: https://youtu.be/hjXIUPZ7ArM</p><p>Developer Voices Episode on Benthos: https://youtu.be/labzg-YfYKw</p><p>CNCF: https://www.cncf.io/</p><p>The Ballerina Language: https://ballerina.io/</p><p><br></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p><br></p><p>Support Developer Voices via Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices via YouTube: https://www.youtube.com/@developervoices/join</p>]]></description>
      <content:encoded><![CDATA[<p>Most message systems have an opinion on the right way to do inter-systems communication. Whether it’s actors, queues, message logs or just plain ol’ request response, nearly every tool has decided on The Right Way to do messaging, and it optimises heavily for that specific approach. But NATS is absolutely running against that trend.&nbsp;</p><p>In this week’s episode, Jeremey Saenz joins us to talk about NATS, the Cloud Native Computing Foundation’s configurable message-passing and data-transfer system. The promise is a tool that can happily behave like a queue for one channel, a log like another and a request/response protocol for the third, all with a few client flags.</p><p>But how does that work? What’s it doing under the hood, what features does it offer, and what do we lose in return for that flexibility? Jeremy has all the answers as we ask, what is NATS really?</p><p>–</p><p>NATS on Github: https://github.com/nats-io/nats-server</p><p>NATS Homepage: https://nats.io/</p><p>Getting Started with NATS: https://youtu.be/hjXIUPZ7ArM</p><p>Developer Voices Episode on Benthos: https://youtu.be/labzg-YfYKw</p><p>CNCF: https://www.cncf.io/</p><p>The Ballerina Language: https://ballerina.io/</p><p><br></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p><br></p><p>Support Developer Voices via Patreon: https://patreon.com/DeveloperVoices</p><p>Support Developer Voices via YouTube: https://www.youtube.com/@developervoices/join</p>]]></content:encoded>
      <guid isPermaLink="false">c780703e-3539-488b-833e-0262448c5a40</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/b48b05c0-4f7b-45fc-a5cd-6c27c1406f87.png"/>
      <itunes:duration>4264</itunes:duration>
    </item>
    <item>
      <title>Cuis Smalltalk and the History of Computing&apos;s Future (with Juan Vuletich)</title>
      <link>https://zencastr.com/z/KuWcpeod</link>
      <itunes:title>Cuis Smalltalk and the History of Computing&apos;s Future (with Juan Vuletich)</itunes:title>
      <itunes:summary>Smalltalk is one of those programming languages that&apos;s lived out of the mainstream, but often referenced as an influence and an important part of programming history. It&apos;s the cornerstone of object-oriented programming, it was into message passing before actors were cool, and it blurs the line between operating system, programming language and personal notebook. But what is it?

Joining us to discuss it is Juan Vuletich, the creator of one of Smalltalk&apos;s latest incarnations, Cuis. In this episode we cover Smalltalk&apos;s history, its design ideas, Cuis&apos;s unique implementation and what makes this modern implementation something special.

Smalltalk is over 50 years old, but its vision of how computing could work has only begun. Let&apos;s see if we can mine some ideas from it to take us into the next generation of computing...

--

The Cuis Smalltalk Book: https://cuis-Smalltalk.github.io/TheCuisBook/Preface.html

Cuis on Github: https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-Dev

The Cuis Community: https://cuis.st/community

A Short History of Cuis: https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-Dev/blob/master/Documentation/CuisHistory.md

Monticello VCS: https://wiki.squeak.org/squeak/1287

Juan&apos;s Music Research: https://www.jvuletich.org/research.html

Back to the Future - The Story of Squeak (pdf): https://dl.acm.org/doi/pdf/10.1145/263700.263754

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 19 Jun 2024 13:30:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="113610964" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/66727c5615cd26a2f9d0b002/size/113610964/audio-files/619e48a9649c44004c5a44e8/3c6a4ef4-7761-4894-ba33-3a64f192c37e.mp3"/>
      <description><![CDATA[<p>Smalltalk is one of those programming languages that’s lived out of the mainstream, but often referenced as an influence and an important part of programming history. It’s the cornerstone of object-oriented programming, it was into message passing before actors were cool, and it blurs the line between operating system, programming language and personal notebook. But what is it?<br><br>Joining us to discuss it is Juan Vuletich, the creator of one of Smalltalk’s latest incarnations, Cuis. In this episode we cover Smalltalk’s history, its design ideas, Cuis’s unique implementation and what makes this modern implementation something special.</p><p>Smalltalk is over 50 years old, but its vision of how computing could work has only begun. Let’s see if we can mine some ideas from it to take us into the next generation of computing...<br><br>--<br><br>The Cuis Smalltalk Book: https://cuis-Smalltalk.github.io/TheCuisBook/Preface.html</p><p>Cuis on Github: https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-Dev</p><p>The Cuis Community: https://cuis.st/community</p><p>A Short History of Cuis: https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-Dev/blob/master/Documentation/CuisHistory.md</p><p>Monticello VCS: https://wiki.squeak.org/squeak/1287</p><p>Juan’s Music Research: https://www.jvuletich.org/research.html</p><p>Back to the Future - The Story of Squeak (pdf): https://dl.acm.org/doi/pdf/10.1145/263700.263754</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></description>
      <content:encoded><![CDATA[<p>Smalltalk is one of those programming languages that’s lived out of the mainstream, but often referenced as an influence and an important part of programming history. It’s the cornerstone of object-oriented programming, it was into message passing before actors were cool, and it blurs the line between operating system, programming language and personal notebook. But what is it?<br><br>Joining us to discuss it is Juan Vuletich, the creator of one of Smalltalk’s latest incarnations, Cuis. In this episode we cover Smalltalk’s history, its design ideas, Cuis’s unique implementation and what makes this modern implementation something special.</p><p>Smalltalk is over 50 years old, but its vision of how computing could work has only begun. Let’s see if we can mine some ideas from it to take us into the next generation of computing...<br><br>--<br><br>The Cuis Smalltalk Book: https://cuis-Smalltalk.github.io/TheCuisBook/Preface.html</p><p>Cuis on Github: https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-Dev</p><p>The Cuis Community: https://cuis.st/community</p><p>A Short History of Cuis: https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-Dev/blob/master/Documentation/CuisHistory.md</p><p>Monticello VCS: https://wiki.squeak.org/squeak/1287</p><p>Juan’s Music Research: https://www.jvuletich.org/research.html</p><p>Back to the Future - The Story of Squeak (pdf): https://dl.acm.org/doi/pdf/10.1145/263700.263754</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></content:encoded>
      <guid isPermaLink="false">27661034-47ea-4fc7-90f4-b2f63e01f7a7</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4733</itunes:duration>
    </item>
    <item>
      <title>The Inko Programming Language, and Life as a Language Designer (with Yorick Peterse)</title>
      <link>https://zencastr.com/z/R1GmDcEt</link>
      <itunes:title>The Inko Programming Language, and Life as a Language Designer (with Yorick Peterse)</itunes:title>
      <itunes:summary>This week we take a close look at the language Inko from two perspectives: The language design features that make it special, and the realities of being a language developer.

Yorick Peterse joins us to discuss why he&apos;s building Inko, and which design sweetspots he&apos;s looking for. We begin with memory management, aiming for the kind of developer who wants control, but without the complexities of Rust. Then we look at the designing for concurrency with typed channels, and handling exceptions by removing them and leaning heavily into ADTs and pattern matching.

Mixed in with all that is a discussion on the realities of being a programming language developer. How do you figure out how to implement your ideas? What tradeoffs do you make and what kind of programmer do you want to be most useful to? How do you teach people new ideas in programming, and how &quot;different&quot; can you make a language before it feels weird? And perhaps the hardest question of all: How do you fund a new programming language in 2024?

–

Inko&apos;s Homepage: https://inko-lang.org/

Yorick&apos;s Homepage: https://yorickpeterse.com/

Ownership You Can Count On (paper): https://inko-lang.org/papers/ownership.pdf

&quot;The Error Model&quot;: https://joeduffyblog.com/2016/02/07/the-error-model/

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 12 Jun 2024 13:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="121468744" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/666879f1ba7e9b256a94a80a/size/121468744/audio-files/619e48a9649c44004c5a44e8/37f39f45-8ce4-43ef-b16a-f1bd5d189892.mp3"/>
      <description><![CDATA[<p>This week we take a close look at the language Inko from two perspectives: The language design features that make it special, and the realities of being a language developer.</p><p>Yorick Peterse joins us to discuss why he’s building Inko, and which design sweetspots he’s looking for. We begin with memory management, aiming for the kind of developer who wants control, but without the complexities of Rust. Then we look at the designing for concurrency with typed channels, and handling exceptions by removing them and leaning heavily into ADTs and pattern matching.</p><p>Mixed in with all that is a discussion on the realities of being a programming language developer. How do you figure out how to implement your ideas? What tradeoffs do you make and what kind of programmer do you want to be most useful to? How do you teach people new ideas in programming, and how “different” can you make a language before it feels weird? And perhaps the hardest question of all: How do you fund a new programming language in 2024?</p><p>–</p><p>Inko’s Homepage: https://inko-lang.org/</p><p>Yorick’s Homepage: https://yorickpeterse.com/</p><p>Ownership You Can Count On (paper): https://inko-lang.org/papers/ownership.pdf</p><p>“The Error Model”: https://joeduffyblog.com/2016/02/07/the-error-model/</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></description>
      <content:encoded><![CDATA[<p>This week we take a close look at the language Inko from two perspectives: The language design features that make it special, and the realities of being a language developer.</p><p>Yorick Peterse joins us to discuss why he’s building Inko, and which design sweetspots he’s looking for. We begin with memory management, aiming for the kind of developer who wants control, but without the complexities of Rust. Then we look at the designing for concurrency with typed channels, and handling exceptions by removing them and leaning heavily into ADTs and pattern matching.</p><p>Mixed in with all that is a discussion on the realities of being a programming language developer. How do you figure out how to implement your ideas? What tradeoffs do you make and what kind of programmer do you want to be most useful to? How do you teach people new ideas in programming, and how “different” can you make a language before it feels weird? And perhaps the hardest question of all: How do you fund a new programming language in 2024?</p><p>–</p><p>Inko’s Homepage: https://inko-lang.org/</p><p>Yorick’s Homepage: https://yorickpeterse.com/</p><p>Ownership You Can Count On (paper): https://inko-lang.org/papers/ownership.pdf</p><p>“The Error Model”: https://joeduffyblog.com/2016/02/07/the-error-model/</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></content:encoded>
      <guid isPermaLink="false">2bb9b995-3206-4287-a4ee-cc4df9b57ce0</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>5061</itunes:duration>
    </item>
    <item>
      <title>Building the Zed Text Editor (with Nathan Sobo)</title>
      <link>https://zencastr.com/z/oeIUtEJX</link>
      <itunes:title>Building the Zed Text Editor (with Nathan Sobo)</itunes:title>
      <itunes:summary>I&apos;ve often wondered how you build a text editor. Like many software projects, it&apos;s a simple idea at the core with an almost infinite scope for features. How do you build a solid foundation to expand on? Which features matter for launch? And how do you hope to satisfy the needs of every programmer, working in every language?

My guest for this episode is Nathan Sobo. He&apos;s tackled this problem once before with the Atom editor, and he&apos;s back older &amp; wiser with Zed - a new editor written completely from scratch in Rust. It has a modern UI, a wide spread of language support, and a completely different way of looking at team collaboration. But with so much ambition, what are Zed&apos;s priorities, and what&apos;s been left for a future version?

--

Zed Homepage: https://zed.dev/

Segment Trees: https://en.wikipedia.org/wiki/Segment_tree

Ropes: https://en.wikipedia.org/wiki/Rope_(data_structure)

Rust Executors: https://rust-lang.github.io/async-book/02_execution/04_executor.html

More about Roc: https://youtu.be/DzhIprQan68

More about TigerBeetle: https://youtu.be/ayG7ltGRRHs

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 05 Jun 2024 14:30:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="120748180" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/66604666cb4b86ed946f39c7/size/120748180/audio-files/619e48a9649c44004c5a44e8/281730a8-6686-41bb-a4a4-b5e096ce38e3.mp3"/>
      <description><![CDATA[<p>I’ve often wondered how you build a text editor. Like many software projects, it’s a simple idea at the core with an almost infinite scope for features. How do you build a solid foundation to expand on? Which features matter for launch? And how do you hope to satisfy the needs of every programmer, working in every language?</p><p>My guest for this episode is Nathan Sobo. He’s tackled this problem once before with the Atom editor, and he’s back older &amp; wiser with Zed - a new editor written completely from scratch in Rust. It has a modern UI, a wide spread of language support, and a completely different way of looking at team collaboration. But with so much ambition, what are Zed’s priorities, and what’s been left for a future version?</p><p>--</p><p>Zed Homepage: https://zed.dev/</p><p>Segment Trees: https://en.wikipedia.org/wiki/Segment_tree</p><p>Ropes: https://en.wikipedia.org/wiki/Rope_(data_structure)</p><p>Rust Executors: https://rust-lang.github.io/async-book/02_execution/04_executor.html</p><p>More about Roc: https://youtu.be/DzhIprQan68</p><p>More about TigerBeetle: https://youtu.be/ayG7ltGRRHs</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></description>
      <content:encoded><![CDATA[<p>I’ve often wondered how you build a text editor. Like many software projects, it’s a simple idea at the core with an almost infinite scope for features. How do you build a solid foundation to expand on? Which features matter for launch? And how do you hope to satisfy the needs of every programmer, working in every language?</p><p>My guest for this episode is Nathan Sobo. He’s tackled this problem once before with the Atom editor, and he’s back older &amp; wiser with Zed - a new editor written completely from scratch in Rust. It has a modern UI, a wide spread of language support, and a completely different way of looking at team collaboration. But with so much ambition, what are Zed’s priorities, and what’s been left for a future version?</p><p>--</p><p>Zed Homepage: https://zed.dev/</p><p>Segment Trees: https://en.wikipedia.org/wiki/Segment_tree</p><p>Ropes: https://en.wikipedia.org/wiki/Rope_(data_structure)</p><p>Rust Executors: https://rust-lang.github.io/async-book/02_execution/04_executor.html</p><p>More about Roc: https://youtu.be/DzhIprQan68</p><p>More about TigerBeetle: https://youtu.be/ayG7ltGRRHs</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></content:encoded>
      <guid isPermaLink="false">aad0e6c4-92a7-4580-bb65-d8eacf3d8d60</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>5031</itunes:duration>
    </item>
    <item>
      <title>Reimplementing Apache Kafka with Golang and S3</title>
      <link>https://zencastr.com/z/8Vbd_-fh</link>
      <itunes:title>Reimplementing Apache Kafka with Golang and S3</itunes:title>
      <itunes:summary>This week on Developer Voices we&apos;re talking to Ryan Worl, whose career in big data engineering has taken him from DataDog to Co-Founding WarpStream, an Apache Kafka-compatible streaming system that uses Golang for the brains and S3 for the storage.

Ryan tells us about his time at DataDog, along with the things he learnt from doing large-scale systems migration bit-by-bit, before we discuss how and why he started WarpStream. Why re-implement Kafka? What are the practical challenges and cost benefits of moving all your storage to S3? And would he choose Go a second time around?

--

WarpStream: https://www.warpstream.com/

DataDog: https://www.datadoghq.com/

Ryan on Twitter: https://x.com/ryanworl 

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 29 May 2024 14:50:33 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="119620372" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/665740b98f2eccc7fd65a148/size/119620372/audio-files/619e48a9649c44004c5a44e8/baba6850-cc70-41cd-8af4-bd1b554852e9.mp3"/>
      <description><![CDATA[<p>This week on Developer Voices we’re talking to Ryan Worl, whose career in big data engineering has taken him from DataDog to Co-Founding WarpStream, an Apache Kafka-compatible streaming system that uses Golang for the brains and S3 for the storage. <br><br>Ryan tells us about his time at DataDog, along with the things he learnt from doing large-scale systems migration bit-by-bit, before we discuss how and why he started WarpStream. Why re-implement Kafka? What are the practical challenges and cost benefits of moving all your storage to S3? And would he choose Go a second time around?</p><p>--</p><p>WarpStream: https://www.warpstream.com/</p><p>DataDog: https://www.datadoghq.com/</p><p>Ryan on Twitter: https://x.com/ryanworl&nbsp;</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></description>
      <content:encoded><![CDATA[<p>This week on Developer Voices we’re talking to Ryan Worl, whose career in big data engineering has taken him from DataDog to Co-Founding WarpStream, an Apache Kafka-compatible streaming system that uses Golang for the brains and S3 for the storage. <br><br>Ryan tells us about his time at DataDog, along with the things he learnt from doing large-scale systems migration bit-by-bit, before we discuss how and why he started WarpStream. Why re-implement Kafka? What are the practical challenges and cost benefits of moving all your storage to S3? And would he choose Go a second time around?</p><p>--</p><p>WarpStream: https://www.warpstream.com/</p><p>DataDog: https://www.datadoghq.com/</p><p>Ryan on Twitter: https://x.com/ryanworl&nbsp;</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></content:encoded>
      <guid isPermaLink="false">3d0e88c8-de19-4b24-93b9-5d9297404038</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4984</itunes:duration>
    </item>
    <item>
      <title>Extending Postgres for High-Performance Analytics (with Philippe Noël)</title>
      <link>https://zencastr.com/z/omqYKziK</link>
      <itunes:title>Extending Postgres for High-Performance Analytics (with Philippe Noël)</itunes:title>
      <itunes:summary>PostgreSQL is an incredible general-purpose database, but it can&apos;t do everything. Every design decision is a tradeoff, and inevitably some of those tradeoffs get fundamentally baked into the way it&apos;s built. Take storage for instance - Postgres tables are row-oriented; great for row-by-row access, but when it comes to analytics, it can&apos;t compete with a dedicated OLAP database that uses column-oriented storage. Or can it?

Joining me this week is Philippe Noël of ParadeDB, who&apos;s going to take us on a tour of Postgres&apos; extension mechanism, from creating custom functions and indexes to Rust code that changes the way Postgres stores data on disk. In his journey to bring Elasticsearch&apos;s strengths to Postgres, he&apos;s gone all the way down to raw datafiles and back through the optimiser to teach a venerable old dog some new data-access tricks. 

–

ParadeDB: https://paradedb.com

ParadeDB on Twitter: https://twitter.com/paradedb

ParadeDB on Github: https://github.com/paradedb/paradedb

pgrx (Postgres with Rust): https://github.com/pgcentralfoundation/pgrx

Tantivy (Rust FTS library): https://github.com/quickwit-oss/tantivy

PgMQ (Queues in Postgres): https://tembo.io/blog/introducing-pgmq

Apache Datafusion: https://datafusion.apache.org/

Lucene: https://lucene.apache.org/



Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 22 May 2024 14:30:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="97281364" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/664d1f1f7fb61cf04c5bc68b/size/97281364/audio-files/619e48a9649c44004c5a44e8/11598935-d995-4540-b12a-ecf512431c68.mp3"/>
      <description><![CDATA[<p>PostgreSQL is an incredible general-purpose database, but it can’t do everything. Every design decision is a tradeoff, and inevitably some of those tradeoffs get fundamentally baked into the way it’s built. Take storage for instance - Postgres tables are row-oriented; great for row-by-row access, but when it comes to analytics, it can’t compete with a dedicated OLAP database that uses column-oriented storage. Or can it?</p><p>Joining me this week is Philippe Noël of ParadeDB, who’s going to take us on a tour of Postgres’ extension mechanism, from creating custom functions and indexes to Rust code that changes the way Postgres stores data on disk. In his journey to bring Elasticsearch’s strengths to Postgres, he’s gone all the way down to raw datafiles and back through the optimiser to teach a venerable old dog some new data-access tricks.&nbsp;</p><p>–</p><p>ParadeDB: https://paradedb.com</p><p>ParadeDB on Twitter: https://twitter.com/paradedb</p><p>ParadeDB on Github: https://github.com/paradedb/paradedb</p><p>pgrx (Postgres with Rust): https://github.com/pgcentralfoundation/pgrx</p><p>Tantivy (Rust FTS library): https://github.com/quickwit-oss/tantivy</p><p>PgMQ (Queues in Postgres): https://tembo.io/blog/introducing-pgmq</p><p>Apache Datafusion: https://datafusion.apache.org/</p><p>Lucene: https://lucene.apache.org/</p><p><br></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></description>
      <content:encoded><![CDATA[<p>PostgreSQL is an incredible general-purpose database, but it can’t do everything. Every design decision is a tradeoff, and inevitably some of those tradeoffs get fundamentally baked into the way it’s built. Take storage for instance - Postgres tables are row-oriented; great for row-by-row access, but when it comes to analytics, it can’t compete with a dedicated OLAP database that uses column-oriented storage. Or can it?</p><p>Joining me this week is Philippe Noël of ParadeDB, who’s going to take us on a tour of Postgres’ extension mechanism, from creating custom functions and indexes to Rust code that changes the way Postgres stores data on disk. In his journey to bring Elasticsearch’s strengths to Postgres, he’s gone all the way down to raw datafiles and back through the optimiser to teach a venerable old dog some new data-access tricks.&nbsp;</p><p>–</p><p>ParadeDB: https://paradedb.com</p><p>ParadeDB on Twitter: https://twitter.com/paradedb</p><p>ParadeDB on Github: https://github.com/paradedb/paradedb</p><p>pgrx (Postgres with Rust): https://github.com/pgcentralfoundation/pgrx</p><p>Tantivy (Rust FTS library): https://github.com/quickwit-oss/tantivy</p><p>PgMQ (Queues in Postgres): https://tembo.io/blog/introducing-pgmq</p><p>Apache Datafusion: https://datafusion.apache.org/</p><p>Lucene: https://lucene.apache.org/</p><p><br></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></content:encoded>
      <guid isPermaLink="false">7c658d6b-14f6-46af-bde3-23e5a81c401b</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4053</itunes:duration>
    </item>
    <item>
      <title>Designing Actor-Based Software (with Hugh McKee)</title>
      <link>https://zencastr.com/z/qRCRL2hZ</link>
      <itunes:title>Designing Actor-Based Software (with Hugh McKee)</itunes:title>
      <itunes:summary>The actor model is a popular approach to building scalable software systems. And isn&apos;t hard to understand when you&apos;re just reading about the beginner&apos;s examples. But how do you architect a complex design using the actor model? Which patterns work well? How do you think through it?

Joining me to take us through it is Hugh McKee. Hugh&apos;s a total actor-model fan, and a Developer Advocate for Lightbend (the company that created the popular actor framework Akka). He takes us from his definition of actors to the designs he&apos;s worked on, the patterns he&apos;s found most useful, and the interesting meeting-point between actor-based designs and event-based ones.

—

Wikipedia - Actor Model: https://en.wikipedia.org/wiki/Actor_model

Hugh&apos;s book, Designing Reactive Systems: https://go.lightbend.com/designing-reactive-systems-role-of-actor-model

Hugh on Twitter: https://twitter.com/mckeeh3

Hugh on LinkedIn: https://www.linkedin.com/in/mckeehugh

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 15 May 2024 14:50:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="103749268" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/6644c02b2e353c10dab21ced/size/103749268/audio-files/619e48a9649c44004c5a44e8/6075931f-9661-4041-83ba-aa80d67410bb.mp3"/>
      <description><![CDATA[<p>The actor model is a popular approach to building scalable software systems. And isn’t hard to understand when you’re just reading about the beginner’s examples. But how do you architect a complex design using the actor model? Which patterns work well? How do you think through it?</p><p>Joining me to take us through it is Hugh McKee. Hugh’s a total actor-model fan, and a Developer Advocate for Lightbend (the company that created the popular actor framework Akka). He takes us from his definition of actors to the designs he’s worked on, the patterns he’s found most useful, and the interesting meeting-point between actor-based designs and event-based ones.</p><p>—</p><p>Wikipedia - Actor Model: https://en.wikipedia.org/wiki/Actor_model</p><p>Hugh’s book, Designing Reactive Systems: https://go.lightbend.com/designing-reactive-systems-role-of-actor-model</p><p>Hugh on Twitter: https://twitter.com/mckeeh3</p><p>Hugh on LinkedIn: https://www.linkedin.com/in/mckeehugh</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></description>
      <content:encoded><![CDATA[<p>The actor model is a popular approach to building scalable software systems. And isn’t hard to understand when you’re just reading about the beginner’s examples. But how do you architect a complex design using the actor model? Which patterns work well? How do you think through it?</p><p>Joining me to take us through it is Hugh McKee. Hugh’s a total actor-model fan, and a Developer Advocate for Lightbend (the company that created the popular actor framework Akka). He takes us from his definition of actors to the designs he’s worked on, the patterns he’s found most useful, and the interesting meeting-point between actor-based designs and event-based ones.</p><p>—</p><p>Wikipedia - Actor Model: https://en.wikipedia.org/wiki/Actor_model</p><p>Hugh’s book, Designing Reactive Systems: https://go.lightbend.com/designing-reactive-systems-role-of-actor-model</p><p>Hugh on Twitter: https://twitter.com/mckeeh3</p><p>Hugh on LinkedIn: https://www.linkedin.com/in/mckeehugh</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></content:encoded>
      <guid isPermaLink="false">ce119ade-953d-4ac6-b18c-265cbb2b3767</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/b48b05c0-4f7b-45fc-a5cd-6c27c1406f87.png"/>
      <itunes:duration>4322</itunes:duration>
    </item>
    <item>
      <title>ByteWax: Rust&apos;s Research Meets Python&apos;s Practicalities (with Dan Herrera)</title>
      <link>https://zencastr.com/z/aUORESC0</link>
      <itunes:title>ByteWax: Rust&apos;s Research Meets Python&apos;s Practicalities (with Dan Herrera)</itunes:title>
      <itunes:summary>Bytewax is a curious stream processing tool that blends a Python surface with a Rust core to produce something that&apos;s in a similar vein to Kafka Streams or Apache Flink, but with a fundamentally different implementation. This week we&apos;re going to take a look at what it does, how it works in theory, and how the marriage of Python and Rust works in practice…

–

The original Naiad Paper: https://dl.acm.org/doi/10.1145/2517349.2522738

Timely Dataflow: https://github.com/TimelyDataflow/timely-dataflow

Bytewax the Library: https://github.com/bytewax/bytewax

Bytewax the Service: https://bytewax.io/

PyO3, for calling Rust from Python: https://pyo3.rs/v0.21.2/

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins

--

#softwaredevelopment #dataengineering #apachekafka #timelydataflow</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 08 May 2024 14:55:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="89163220" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/663aa46bb7f077bc6bf7a840/size/89163220/audio-files/619e48a9649c44004c5a44e8/77444e1f-8e2d-40da-8bfb-791e6c77646e.mp3"/>
      <description><![CDATA[<p>Bytewax is a curious stream processing tool that blends a Python surface with a Rust core to produce something that’s in a similar vein to Kafka Streams or Apache Flink, but with a fundamentally different implementation. This week we’re going to take a look at what it does, how it works in theory, and how the marriage of Python and Rust works in practice…</p><p><em>–</em></p><p>The original Naiad Paper: <a href="https://dl.acm.org/doi/10.1145/2517349.2522738">https://dl.acm.org/doi/10.1145/2517349.2522738</a></p><p>Timely Dataflow: <a href="https://github.com/TimelyDataflow/timely-dataflow">https://github.com/TimelyDataflow/timely-dataflow</a></p><p>Bytewax the Library: <a href="https://github.com/bytewax/bytewax">https://github.com/bytewax/bytewax</a></p><p>Bytewax the Service: <a href="https://bytewax.io/">https://bytewax.io/</a></p><p>PyO3, for calling Rust from Python: <a href="https://pyo3.rs/v0.21.2/">https://pyo3.rs/v0.21.2/</a></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>--<br><br>#softwaredevelopment #dataengineering #apachekafka #timelydataflow</p>]]></description>
      <content:encoded><![CDATA[<p>Bytewax is a curious stream processing tool that blends a Python surface with a Rust core to produce something that’s in a similar vein to Kafka Streams or Apache Flink, but with a fundamentally different implementation. This week we’re going to take a look at what it does, how it works in theory, and how the marriage of Python and Rust works in practice…</p><p><em>–</em></p><p>The original Naiad Paper: <a href="https://dl.acm.org/doi/10.1145/2517349.2522738">https://dl.acm.org/doi/10.1145/2517349.2522738</a></p><p>Timely Dataflow: <a href="https://github.com/TimelyDataflow/timely-dataflow">https://github.com/TimelyDataflow/timely-dataflow</a></p><p>Bytewax the Library: <a href="https://github.com/bytewax/bytewax">https://github.com/bytewax/bytewax</a></p><p>Bytewax the Service: <a href="https://bytewax.io/">https://bytewax.io/</a></p><p>PyO3, for calling Rust from Python: <a href="https://pyo3.rs/v0.21.2/">https://pyo3.rs/v0.21.2/</a></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>--<br><br>#softwaredevelopment #dataengineering #apachekafka #timelydataflow</p>]]></content:encoded>
      <guid isPermaLink="false">5a284d6b-f4c0-4149-aa64-c849e5dfa783</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/b48b05c0-4f7b-45fc-a5cd-6c27c1406f87.png"/>
      <itunes:duration>3714</itunes:duration>
    </item>
    <item>
      <title>Mojo Lang - Tomorrow&apos;s High Performance Python? (with Chris Lattner)</title>
      <link>https://zencastr.com/z/_7_9yndj</link>
      <itunes:title>Mojo Lang - Tomorrow&apos;s High Performance Python? (with Chris Lattner)</itunes:title>
      <itunes:summary>Mojo is the latest language from the creator of Swift and LLVM. It&apos;s an attempt to take some of the best techniques from CPU/GPU-level programming and package them up in a Python-compatible syntax.

In this episode we explore why Mojo was created, and what it offers to Python programmers and non-Python programmers alike. How is it built for performance, and which performance features matter? What&apos;s its take on functional programming and type systems? And can it marry the high-level programming of Python with the low-level programming of LLVM/MLIR?

If you&apos;re a Python programmer who needs better performance, a C programmer who expects more from a &apos;scripting language&apos;, or just someone who&apos;d be happier if Python had a first-class type system, Mojo might well be for you…

–

Mojo: https://www.modular.com/max/mojo

Mojo&apos;s Roadmap: https://docs.modular.com/mojo/roadmap.html

The Mojo Discord: https://discord.com/invite/modular

MLIR: https://mlir.llvm.org/

Chris&apos;s Talks: https://nondot.org/sabre/Resume.html#talks

Chris on Twitter: https://twitter.com/clattner_llvm

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins

–

#software #podcast #mojolang #ml #pythonml</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 01 May 2024 15:01:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="121880596" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/663124f3ed880c9f07e7b6e3/size/121880596/audio-files/619e48a9649c44004c5a44e8/08cc5369-ea02-46a8-9c5b-f140c10cd4ad.mp3"/>
      <description><![CDATA[<p>Mojo is the latest language from the creator of Swift and LLVM. It’s an attempt to take some of the best techniques from CPU/GPU-level programming and package them up in a Python-compatible syntax.</p><p>In this episode we explore why Mojo was created, and what it offers to Python programmers and non-Python programmers alike. How is it built for performance, and which performance features matter? What’s its take on functional programming and type systems? And can it marry the high-level programming of Python with the low-level programming of LLVM/MLIR?</p><p>If you’re a Python programmer who needs better performance, a C programmer who expects more from a ‘scripting language’, or just someone who’d be happier if Python had a first-class type system, Mojo might well be for you…</p><p>–</p><p>Mojo: https://www.modular.com/max/mojo</p><p>Mojo’s Roadmap: https://docs.modular.com/mojo/roadmap.html</p><p>The Mojo Discord: https://discord.com/invite/modular</p><p>MLIR: https://mlir.llvm.org/</p><p>Chris’s Talks: https://nondot.org/sabre/Resume.html#talks</p><p>Chris on Twitter: https://twitter.com/clattner_llvm</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p>–</p><p>#software #podcast #mojolang #ml #pythonml</p>]]></description>
      <content:encoded><![CDATA[<p>Mojo is the latest language from the creator of Swift and LLVM. It’s an attempt to take some of the best techniques from CPU/GPU-level programming and package them up in a Python-compatible syntax.</p><p>In this episode we explore why Mojo was created, and what it offers to Python programmers and non-Python programmers alike. How is it built for performance, and which performance features matter? What’s its take on functional programming and type systems? And can it marry the high-level programming of Python with the low-level programming of LLVM/MLIR?</p><p>If you’re a Python programmer who needs better performance, a C programmer who expects more from a ‘scripting language’, or just someone who’d be happier if Python had a first-class type system, Mojo might well be for you…</p><p>–</p><p>Mojo: https://www.modular.com/max/mojo</p><p>Mojo’s Roadmap: https://docs.modular.com/mojo/roadmap.html</p><p>The Mojo Discord: https://discord.com/invite/modular</p><p>MLIR: https://mlir.llvm.org/</p><p>Chris’s Talks: https://nondot.org/sabre/Resume.html#talks</p><p>Chris on Twitter: https://twitter.com/clattner_llvm</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p>–</p><p>#software #podcast #mojolang #ml #pythonml</p>]]></content:encoded>
      <guid isPermaLink="false">fc5127d4-8e32-48b4-8fee-52787e3baccb</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/b48b05c0-4f7b-45fc-a5cd-6c27c1406f87.png"/>
      <itunes:duration>5078</itunes:duration>
    </item>
    <item>
      <title>Batch Data &amp; Streaming Data in one Atom (with Jove Zhong)</title>
      <link>https://zencastr.com/z/eLuNjy97</link>
      <itunes:title>Batch Data &amp; Streaming Data in one Atom (with Jove Zhong)</itunes:title>
      <itunes:summary>Every database has to juggle the need to process new data and to query old data. That task falls to any system that &quot;does stuff and remembers stuff&quot;. But it&apos;s quite hard to really optimise one system for both use cases. There are different constraints on new and old data, and as a system gets larger and larger, those differences multiply to breaking point. That&apos;s something Twitter&apos;s engineers were figuring out in the 2010s.

One solution that came up in those years was the Lambda Architecture. A two-pronged approach that recognises the divide between new and old data, and works hard to blend the two together seamlessly in userspace. But that seamless blending is easier said than done. It&apos;s nearly all bespoke work.

What if you could get it off the shelf? Let someone else do the work of combining two different kinds of database into one neat package? That&apos;s the question of the week as we look at the recently open-sourced project Proton, and its attempt to be the Lambda Architecture in a box…

–

Proton Docs: https://docs.timeplus.com/proton

Proton Source: https://github.com/timeplus-io/proton

Timeplus: https://www.timeplus.com/

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins

–

#podcast #softwareengineering #databases #dataengineering </itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 24 Apr 2024 14:58:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="74568520" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/66291df8c0b3d5283089b3bc/size/74568520/audio-files/619e48a9649c44004c5a44e8/d05abe25-606a-4a43-85a4-49d232609132.mp3"/>
      <description><![CDATA[<p>Every database has to juggle the need to process new data and to query old data. That task falls to any system that “does stuff and remembers stuff”. But it’s quite hard to really optimise one system for both use cases. There are different constraints on new and old data, and as a system gets larger and larger, those differences multiply to breaking point. That’s something Twitter’s engineers were figuring out in the 2010s.</p><p>One solution that came up in those years was the Lambda Architecture. A two-pronged approach that recognises the divide between new and old data, and works hard to blend the two together seamlessly in userspace. But that seamless blending is easier said than done. It’s nearly all bespoke work.</p><p>What if you could get it off the shelf? Let someone else do the work of combining two different kinds of database into one neat package? That's the question of the week as we look at the recently open-sourced project Proton, and its attempt to be the Lambda Architecture in a box…</p><p>–</p><p>Proton Docs: <a href="https://docs.timeplus.com/proton">https://docs.timeplus.com/proton</a></p><p>Proton Source: <a href="https://github.com/timeplus-io/proton">https://github.com/timeplus-io/proton</a></p><p>Timeplus: <a href="https://www.timeplus.com/">https://www.timeplus.com/</a></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>–</p><p>#podcast #softwareengineering #databases #dataengineering&nbsp;</p>]]></description>
      <content:encoded><![CDATA[<p>Every database has to juggle the need to process new data and to query old data. That task falls to any system that “does stuff and remembers stuff”. But it’s quite hard to really optimise one system for both use cases. There are different constraints on new and old data, and as a system gets larger and larger, those differences multiply to breaking point. That’s something Twitter’s engineers were figuring out in the 2010s.</p><p>One solution that came up in those years was the Lambda Architecture. A two-pronged approach that recognises the divide between new and old data, and works hard to blend the two together seamlessly in userspace. But that seamless blending is easier said than done. It’s nearly all bespoke work.</p><p>What if you could get it off the shelf? Let someone else do the work of combining two different kinds of database into one neat package? That's the question of the week as we look at the recently open-sourced project Proton, and its attempt to be the Lambda Architecture in a box…</p><p>–</p><p>Proton Docs: <a href="https://docs.timeplus.com/proton">https://docs.timeplus.com/proton</a></p><p>Proton Source: <a href="https://github.com/timeplus-io/proton">https://github.com/timeplus-io/proton</a></p><p>Timeplus: <a href="https://www.timeplus.com/">https://www.timeplus.com/</a></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>–</p><p>#podcast #softwareengineering #databases #dataengineering&nbsp;</p>]]></content:encoded>
      <guid isPermaLink="false">cba8d1bc-ea63-4b75-b8e2-2bbcd6e201b8</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/b48b05c0-4f7b-45fc-a5cd-6c27c1406f87.png"/>
      <itunes:duration>3106</itunes:duration>
    </item>
    <item>
      <title>Advanced Memory Management in Vale (with Evan Ovadia)</title>
      <link>https://zencastr.com/z/aw9K3TvN</link>
      <itunes:title>Advanced Memory Management in Vale (with Evan Ovadia)</itunes:title>
      <itunes:summary>Rust changed the discussion around memory management - this week&apos;s guest hopes to push that discussion even further.

This week we&apos;re joined by Evan Ovadia, creator of the Vale programming language and collector of memory management techniques from far and wide. He takes us through his most important ones, including linear types, generation references and regions, to see what Evan hopes the future of memory management will look like.

If you&apos;ve been interested in Rust&apos;s borrow-check and want more (or want different!) then Evan has some big ideas for you to sink your teeth into.

–

Vale: https://vale.dev/

The Vale Discord: https://discord.com/invite/SNB8yGH

Evan&apos;s Blog: https://verdagon.dev/home

Evan&apos;s 7DRL Entry: https://verdagon.dev/blog/higher-raii-7drl

7DRL: https://7drl.com/

https://verdagon.dev/grimoire/grimoire

What Colour Is Your Function?: https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/

42, the language: https://forty2.is/

Verona Language: https://www.microsoft.com/en-us/research/project/project-verona/

Austral language: https://austral-lang.org/

Surely You&apos;re Joking, Mr Feynman! (book): https://www.goodreads.com/book/show/35167685-surely-you-re-joking-mr-feynman



Evan on Twitter: https://twitter.com/verdagon

Find Evan in the Vale Discord: https://discord.com/invite/SNB8yGH



Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins

–

#software #programming #podcast #valelang</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 17 Apr 2024 15:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="100110100" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/661ece821d6f4c6f24dc158c/size/100110100/audio-files/619e48a9649c44004c5a44e8/41f67441-9210-4fcc-a040-62e0f1972b62.mp3"/>
      <description><![CDATA[<p>Rust changed the discussion around memory management - this week's guest hopes to push that discussion even further.</p><p>This week we're joined by Evan Ovadia, creator of the Vale programming language and collector of memory management techniques from far and wide. He takes us through his most important ones, including linear types, generation references and regions, to see what Evan hopes the future of memory management will look like.</p><p>If you've been interested in Rust's borrow-check and want more (or want different!) then Evan has some big ideas for you to sink your teeth into.</p><p>–</p><p>Vale: https://vale.dev/</p><p>The Vale Discord: https://discord.com/invite/SNB8yGH</p><p>Evan’s Blog: https://verdagon.dev/home</p><p>Evan’s 7DRL Entry: https://verdagon.dev/blog/higher-raii-7drl</p><p>7DRL: https://7drl.com/</p><p>https://verdagon.dev/grimoire/grimoire</p><p>What Colour Is Your Function?: https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/</p><p>42, the language: https://forty2.is/</p><p>Verona Language: https://www.microsoft.com/en-us/research/project/project-verona/</p><p>Austral language: https://austral-lang.org/</p><p>Surely You’re Joking, Mr Feynman! (book): https://www.goodreads.com/book/show/35167685-surely-you-re-joking-mr-feynman</p><p><br></p><p>Evan on Twitter: https://twitter.com/verdagon</p><p>Find Evan in the Vale Discord: https://discord.com/invite/SNB8yGH</p><p><br></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p>–</p><p>#software #programming #podcast #valelang</p>]]></description>
      <content:encoded><![CDATA[<p>Rust changed the discussion around memory management - this week's guest hopes to push that discussion even further.</p><p>This week we're joined by Evan Ovadia, creator of the Vale programming language and collector of memory management techniques from far and wide. He takes us through his most important ones, including linear types, generation references and regions, to see what Evan hopes the future of memory management will look like.</p><p>If you've been interested in Rust's borrow-check and want more (or want different!) then Evan has some big ideas for you to sink your teeth into.</p><p>–</p><p>Vale: https://vale.dev/</p><p>The Vale Discord: https://discord.com/invite/SNB8yGH</p><p>Evan’s Blog: https://verdagon.dev/home</p><p>Evan’s 7DRL Entry: https://verdagon.dev/blog/higher-raii-7drl</p><p>7DRL: https://7drl.com/</p><p>https://verdagon.dev/grimoire/grimoire</p><p>What Colour Is Your Function?: https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/</p><p>42, the language: https://forty2.is/</p><p>Verona Language: https://www.microsoft.com/en-us/research/project/project-verona/</p><p>Austral language: https://austral-lang.org/</p><p>Surely You’re Joking, Mr Feynman! (book): https://www.goodreads.com/book/show/35167685-surely-you-re-joking-mr-feynman</p><p><br></p><p>Evan on Twitter: https://twitter.com/verdagon</p><p>Find Evan in the Vale Discord: https://discord.com/invite/SNB8yGH</p><p><br></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p>–</p><p>#software #programming #podcast #valelang</p>]]></content:encoded>
      <guid isPermaLink="false">aa5e737e-8213-4c29-9d5b-7777ee3fd2e9</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4171</itunes:duration>
    </item>
    <item>
      <title>Bringing Pure Python to Apache Kafka (with Tomáš Neubauer)</title>
      <link>https://zencastr.com/z/OlO2ncKC</link>
      <itunes:title>Bringing Pure Python to Apache Kafka (with Tomáš Neubauer)</itunes:title>
      <itunes:summary>The &quot;big data infrastructure&quot; world is dominated by Java, but the data-analysis world is dominated by Python. So if you need to analyse and process huge amounts of data, chances are you&apos;re in for a less-than-ideal time. The impedance mismatch will probably make your life hard somehow. 

So there are a lot of projects and companies trying to solve that problem. To bridge those two worlds seamlessly, and many of the popular solutions see SQL as the glue. But this week we&apos;re going to look at another solution - ignore Java, treat Kafka as a protocol, and build up all the infrastructure tools you need with a pure Python library. It&apos;s a lot of work, but in theory it would make Python the one language for data storage, analysis and processing, at scale. Tempting, but is it feasible? 

Joining me to discuss the pros, cons, and massive scope of that approach is Tomáš Neubauer. He started off doing real time data analysis for the Maclaren&apos;s F1 team, and is now deep in the Python mines effectively rewriting Kafka Streams in Python. But how? How much work is actually involved in porting those ideas to Python-land, and how do you even get started? And perhaps most fundamental of all - even if you succeed, will that be enough to make the job easy, or will you still have to scale the mountain of teaching people how to use the new tools you&apos;ve built? Let&apos;s find out.

– 

Quix Streams on Github: https://github.com/quixio/quix-streams

Quix Streams getting started guide: https://quix.io/get-started-with-quix-streams

Quix: https://quix.io/ 

Tomáš on LinkedIn: https://www.linkedin.com/in/tom%C3%A1%C5%A1-neubauer-a10bb144

Tomáš on Twitter: https://twitter.com/TomasNeubauer0

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins  

--

#podcast #softwaredevelopment #datascience #apachekafka #streamprocessing</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 03 Apr 2024 15:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="95956564" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/660c4ab6a597ef47f9fd1c3b/size/95956564/audio-files/619e48a9649c44004c5a44e8/e80bee1b-40d3-4345-bbf6-a1e309a9a818.mp3"/>
      <description><![CDATA[<p>The “big data infrastructure” world is dominated by Java, but the data-analysis world is dominated by Python. So if you need to analyse and process huge amounts of data, chances are you’re in for a less-than-ideal time. The impedance mismatch will probably make your life hard somehow.&nbsp;</p><p>So there are a lot of projects and companies trying to solve that problem. To bridge those two worlds seamlessly, and many of the popular solutions see SQL as the glue. But this week we’re going to look at another solution - ignore Java, treat Kafka as a protocol, and build up all the infrastructure tools you need with a pure Python library. It’s a lot of work, but in theory it would make Python the one language for data storage, analysis and processing, at scale. Tempting, but is it feasible?&nbsp;</p><p>Joining me to discuss the pros, cons, and massive scope of that approach is Tomáš Neubauer. He started off doing real time data analysis for the Maclaren’s F1 team, and is now deep in the Python mines effectively rewriting Kafka Streams in Python. But how? How much work is actually involved in porting those ideas to Python-land, and how do you even get started? And perhaps most fundamental of all - even if you succeed, will that be enough to make the job easy, or will you still have to scale the mountain of teaching people how to use the new tools you’ve built? Let's find out.</p><p>–&nbsp;</p><p>Quix Streams on Github: https://github.com/quixio/quix-streams</p><p>Quix Streams getting started guide: https://quix.io/get-started-with-quix-streams</p><p>Quix: https://quix.io/&nbsp;</p><p>Tomáš on LinkedIn: https://www.linkedin.com/in/tom%C3%A1%C5%A1-neubauer-a10bb144</p><p>Tomáš on Twitter: https://twitter.com/TomasNeubauer0</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins &nbsp;</p><p>--</p><p>#podcast #softwaredevelopment #datascience #apachekafka #streamprocessing</p>]]></description>
      <content:encoded><![CDATA[<p>The “big data infrastructure” world is dominated by Java, but the data-analysis world is dominated by Python. So if you need to analyse and process huge amounts of data, chances are you’re in for a less-than-ideal time. The impedance mismatch will probably make your life hard somehow.&nbsp;</p><p>So there are a lot of projects and companies trying to solve that problem. To bridge those two worlds seamlessly, and many of the popular solutions see SQL as the glue. But this week we’re going to look at another solution - ignore Java, treat Kafka as a protocol, and build up all the infrastructure tools you need with a pure Python library. It’s a lot of work, but in theory it would make Python the one language for data storage, analysis and processing, at scale. Tempting, but is it feasible?&nbsp;</p><p>Joining me to discuss the pros, cons, and massive scope of that approach is Tomáš Neubauer. He started off doing real time data analysis for the Maclaren’s F1 team, and is now deep in the Python mines effectively rewriting Kafka Streams in Python. But how? How much work is actually involved in porting those ideas to Python-land, and how do you even get started? And perhaps most fundamental of all - even if you succeed, will that be enough to make the job easy, or will you still have to scale the mountain of teaching people how to use the new tools you’ve built? Let's find out.</p><p>–&nbsp;</p><p>Quix Streams on Github: https://github.com/quixio/quix-streams</p><p>Quix Streams getting started guide: https://quix.io/get-started-with-quix-streams</p><p>Quix: https://quix.io/&nbsp;</p><p>Tomáš on LinkedIn: https://www.linkedin.com/in/tom%C3%A1%C5%A1-neubauer-a10bb144</p><p>Tomáš on Twitter: https://twitter.com/TomasNeubauer0</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins &nbsp;</p><p>--</p><p>#podcast #softwaredevelopment #datascience #apachekafka #streamprocessing</p>]]></content:encoded>
      <guid isPermaLink="false">82f9e4b8-b760-48b5-9bd3-137fa1de601e</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/b48b05c0-4f7b-45fc-a5cd-6c27c1406f87.png"/>
      <itunes:duration>3998</itunes:duration>
    </item>
    <item>
      <title>Taking Erlang to OCaml 5 (with Leandro Ostera)</title>
      <link>https://zencastr.com/z/K2H4wL4c</link>
      <itunes:title>Taking Erlang to OCaml 5 (with Leandro Ostera)</itunes:title>
      <itunes:summary>Erlang wears three hats - it&apos;s a language, it&apos;s a platform, and it&apos;s an approach to making software run reliably once it&apos;s in production. Those last two are so interesting I sometimes wonder why those ideas haven&apos;t been ported to every language going.  How much work would it be?

This week we&apos;re going to dig right down into that question with Leandro Ostera. He&apos;s been working on Riot - a project to bring the best of Erlang&apos;s runtime system and philosophy to OCaml. But why OCaml? Is it possible to marry together OCaml&apos;s type system with Erlang&apos;s dynamic dispatch systems? And what is it about the recent release of OCaml5 that makes the whole project easier?

–

Leandro&apos;s Blog: https://www.abstractmachines.dev/

Why Typing Erlang is Hard: https://www.abstractmachines.dev/posts/am012-why-typing-erlang-is-hard/

Riot: https://riot.ml/

Riot source: https://github.com/riot-ml/riot

ReasonML: https://reasonml.github.io/

ReScript: https://rescript-lang.org/

Leandro on Twitter: https://twitter.com/leostera

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins

--

#podcast #softwaredevelopment #erlang #ocaml #softwaredesign</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 27 Mar 2024 14:00:24 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="91871469" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/66042678b6e4ec65c25921ee/size/91871469/audio-files/619e48a9649c44004c5a44e8/f8d46a5c-3a49-44a8-aa5e-42f081827320.mp3"/>
      <description><![CDATA[<p>Erlang wears three hats - it’s a language, it’s a platform, and it’s an approach to making software run reliably once it’s in production. Those last two are so interesting I sometimes wonder why those ideas haven’t been ported to every language going. &nbsp;How much work would it be?</p><p>This week we’re going to dig right down into that question with Leandro Ostera. He’s been working on Riot - a project to bring the best of Erlang’s runtime system and philosophy to OCaml. But why OCaml? Is it possible to marry together OCaml’s type system with Erlang’s dynamic dispatch systems? And what is it about the recent release of OCaml5 that makes the whole project easier?</p><p>–</p><p>Leandro’s Blog: https://www.abstractmachines.dev/</p><p>Why Typing Erlang is Hard: <a href="https://www.abstractmachines.dev/posts/am012-why-typing-erlang-is-hard/">https://www.abstractmachines.dev/posts/am012-why-typing-erlang-is-hard/</a></p><p>Riot: <a href="https://riot.ml/">https://riot.ml/</a></p><p>Riot source: <a href="https://github.com/riot-ml/riot">https://github.com/riot-ml/riot</a></p><p>ReasonML: <a href="https://reasonml.github.io/">https://reasonml.github.io/</a></p><p>ReScript: <a href="https://rescript-lang.org/">https://rescript-lang.org/</a></p><p>Leandro on Twitter: https://twitter.com/leostera</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>--</p><p>#podcast #softwaredevelopment #erlang #ocaml #softwaredesign</p>]]></description>
      <content:encoded><![CDATA[<p>Erlang wears three hats - it’s a language, it’s a platform, and it’s an approach to making software run reliably once it’s in production. Those last two are so interesting I sometimes wonder why those ideas haven’t been ported to every language going. &nbsp;How much work would it be?</p><p>This week we’re going to dig right down into that question with Leandro Ostera. He’s been working on Riot - a project to bring the best of Erlang’s runtime system and philosophy to OCaml. But why OCaml? Is it possible to marry together OCaml’s type system with Erlang’s dynamic dispatch systems? And what is it about the recent release of OCaml5 that makes the whole project easier?</p><p>–</p><p>Leandro’s Blog: https://www.abstractmachines.dev/</p><p>Why Typing Erlang is Hard: <a href="https://www.abstractmachines.dev/posts/am012-why-typing-erlang-is-hard/">https://www.abstractmachines.dev/posts/am012-why-typing-erlang-is-hard/</a></p><p>Riot: <a href="https://riot.ml/">https://riot.ml/</a></p><p>Riot source: <a href="https://github.com/riot-ml/riot">https://github.com/riot-ml/riot</a></p><p>ReasonML: <a href="https://reasonml.github.io/">https://reasonml.github.io/</a></p><p>ReScript: <a href="https://rescript-lang.org/">https://rescript-lang.org/</a></p><p>Leandro on Twitter: https://twitter.com/leostera</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>--</p><p>#podcast #softwaredevelopment #erlang #ocaml #softwaredesign</p>]]></content:encoded>
      <guid isPermaLink="false">be2f8388-ef5f-4069-ae30-e4d378f0fac2</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3827</itunes:duration>
    </item>
    <item>
      <title>How Apache Pinot Achieves 200,000 Queries per Second (with Tim Berglund)</title>
      <link>https://zencastr.com/z/V9-OzJ8q</link>
      <itunes:title>How Apache Pinot Achieves 200,000 Queries per Second (with Tim Berglund)</itunes:title>
      <itunes:summary>The likes of LinkedIn and Uber use Pinot to power some astonishingly high-scale queries against realtime data. The numbers alone would make an impressive case-study. But behind the headline lies a fascinating set of architectural decisions and constraints to get there. So how does Pinot work? How does it process queries? How are the various roles split across a cluster? And equally important - what does it *not* try to achieve.

Joining me to go through the nuts and bolts of how Pinot handles SQL queries is Tim Berglund, veteran technology explainer of the realtime-data world. He takes us through Pinot step-by-step, covering the roles of brokers, servers, controllers and minions as we build up the picture of a query engine that&apos;s interesting in theory and massively performant in practice.

–

Apache Pinot: https://pinot.apache.org/

Apache Pinot Docs: https://docs.pinot.apache.org/

StarTree: https://startree.ai/
https://startree.ai/Event Driven Design episode with Bobby Calderwood: https://youtu.be/V7vhSHqMxus

Tim on Twitter: https://twitter.com/tlberglund

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins

–

#podcast #softwaredevelopment #apachepinot #database #dataengineering #sql</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 20 Mar 2024 15:50:35 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="107242605" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/65fb05cbdcd57c3772798352/size/107242605/audio-files/619e48a9649c44004c5a44e8/3e2a8580-2923-4b72-89b6-082916f71468.mp3"/>
      <description><![CDATA[<p>The likes of LinkedIn and Uber use Pinot to power some astonishingly high-scale queries against realtime data. The numbers alone would make an impressive case-study. But behind the headline lies a fascinating set of architectural decisions and constraints to get there. So how does Pinot work? How does it process queries? How are the various roles split across a cluster? And equally important - what does it *not* try to achieve.</p><p>Joining me to go through the nuts and bolts of how Pinot handles SQL queries is Tim Berglund, veteran technology explainer of the realtime-data world. He takes us through Pinot step-by-step, covering the roles of brokers, servers, controllers and minions as we build up the picture of a query engine that's interesting in theory and massively performant in practice.</p><p>–</p><p>Apache Pinot: <a href="https://pinot.apache.org/">https://pinot.apache.org/</a></p><p>Apache Pinot Docs: <a href="https://docs.pinot.apache.org/">https://docs.pinot.apache.org/</a></p><p>StarTree: <a href="https://startree.ai/">https://startree.ai/</a><br><a href="https://startree.ai/"><br></a>Event Driven Design episode with Bobby Calderwood: <a href="https://youtu.be/V7vhSHqMxus">https://youtu.be/V7vhSHqMxus</a></p><p>Tim on Twitter: https://twitter.com/tlberglund</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>–</p><p>#podcast #softwaredevelopment #apachepinot #database #dataengineering #sql</p>]]></description>
      <content:encoded><![CDATA[<p>The likes of LinkedIn and Uber use Pinot to power some astonishingly high-scale queries against realtime data. The numbers alone would make an impressive case-study. But behind the headline lies a fascinating set of architectural decisions and constraints to get there. So how does Pinot work? How does it process queries? How are the various roles split across a cluster? And equally important - what does it *not* try to achieve.</p><p>Joining me to go through the nuts and bolts of how Pinot handles SQL queries is Tim Berglund, veteran technology explainer of the realtime-data world. He takes us through Pinot step-by-step, covering the roles of brokers, servers, controllers and minions as we build up the picture of a query engine that's interesting in theory and massively performant in practice.</p><p>–</p><p>Apache Pinot: <a href="https://pinot.apache.org/">https://pinot.apache.org/</a></p><p>Apache Pinot Docs: <a href="https://docs.pinot.apache.org/">https://docs.pinot.apache.org/</a></p><p>StarTree: <a href="https://startree.ai/">https://startree.ai/</a><br><a href="https://startree.ai/"><br></a>Event Driven Design episode with Bobby Calderwood: <a href="https://youtu.be/V7vhSHqMxus">https://youtu.be/V7vhSHqMxus</a></p><p>Tim on Twitter: https://twitter.com/tlberglund</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>–</p><p>#podcast #softwaredevelopment #apachepinot #database #dataengineering #sql</p>]]></content:encoded>
      <guid isPermaLink="false">66aa7fcd-6d96-4b83-a6aa-47ee1a367e9f</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4468</itunes:duration>
    </item>
    <item>
      <title>Neovim: Creating, Curating and Customising your Ideal Editor (with TJ DeVries)</title>
      <link>https://zencastr.com/z/o72t9D3X</link>
      <itunes:title>Neovim: Creating, Curating and Customising your Ideal Editor (with TJ DeVries)</itunes:title>
      <itunes:summary>TJ DeVries is a core contributor to Neovim and several of its most interesting sub-projects, and he joins us this week to go in depth into how Neovim got started, how it&apos;s structured, and what a truly programmable editor has to offer programmers who want the perfect environment.

Along the way we look at what we can learn from Neovim&apos;s successful fork of the 30-year old codebase from Vim, how it still collaborates with the original project, and what putting Lua at the heart of the system has done for casual tinkerers and hardcore plugin writers alike.

Not everyone will come away from this discussion wanting to switch editors, but I&apos;m sure you&apos;ll get a newfound appreciation for digging deeper into the developer tools you use everyday.

–

Neovim: https://neovim.io/

Neovim Kickstarter: https://github.com/nvim-lua/kickstart.nvim

Kickstarter walkthrough video: https://www.youtube.com/watch?v=m8C0Cq9Uv9o

A directory of Neovim plugins: https://dotfyle.com/

Vimscript&apos;s definition of true and false: https://vimhelp.org/eval.txt.html#Boolean

TJ on Twitter: https://twitter.com/teej_dv

TJ on Twitch: https://www.twitch.tv/teej_dv

TJ on YouTube: https://www.youtube.com/@teej_dv

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins

–

#podcast #software #softwareengineering #dx</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 13 Mar 2024 16:15:41 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="97475949" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/65f1d12d33e5358ac7774dcf/size/97475949/audio-files/619e48a9649c44004c5a44e8/84144b2f-ee8b-4add-8f37-3e2bd4f1ab62.mp3"/>
      <description><![CDATA[<p>TJ DeVries is a core contributor to Neovim and several of its most interesting sub-projects, and he joins us this week to go in depth into how Neovim got started, how it’s structured, and what a truly programmable editor has to offer programmers who want the perfect environment.</p><p>Along the way we look at what we can learn from Neovim’s successful fork of the 30-year old codebase from Vim, how it still collaborates with the original project, and what putting Lua at the heart of the system has done for casual tinkerers and hardcore plugin writers alike.</p><p>Not everyone will come away from this discussion wanting to switch editors, but I’m sure you’ll get a newfound appreciation for digging deeper into the developer tools you use everyday.</p><p>–</p><p>Neovim: <a href="https://neovim.io/">https://neovim.io/</a></p><p>Neovim Kickstarter: <a href="https://github.com/nvim-lua/kickstart.nvim">https://github.com/nvim-lua/kickstart.nvim</a></p><p>Kickstarter walkthrough video: <a href="https://www.youtube.com/watch?v=m8C0Cq9Uv9o">https://www.youtube.com/watch?v=m8C0Cq9Uv9o</a></p><p>A directory of Neovim plugins: <a href="https://dotfyle.com/">https://dotfyle.com/</a></p><p>Vimscript’s definition of true and false: <a href="https://vimhelp.org/eval.txt.html#Boolean">https://vimhelp.org/eval.txt.html#Boolean</a></p><p>TJ on Twitter: <a href="https://twitter.com/teej_dv">https://twitter.com/teej_dv</a></p><p>TJ on Twitch: <a href="https://www.twitch.tv/teej_dv">https://www.twitch.tv/teej_dv</a></p><p>TJ on YouTube: <a href="https://www.youtube.com/@teej_dv">https://www.youtube.com/@teej_dv</a></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>–</p><p>#podcast #software #softwareengineering #dx</p>]]></description>
      <content:encoded><![CDATA[<p>TJ DeVries is a core contributor to Neovim and several of its most interesting sub-projects, and he joins us this week to go in depth into how Neovim got started, how it’s structured, and what a truly programmable editor has to offer programmers who want the perfect environment.</p><p>Along the way we look at what we can learn from Neovim’s successful fork of the 30-year old codebase from Vim, how it still collaborates with the original project, and what putting Lua at the heart of the system has done for casual tinkerers and hardcore plugin writers alike.</p><p>Not everyone will come away from this discussion wanting to switch editors, but I’m sure you’ll get a newfound appreciation for digging deeper into the developer tools you use everyday.</p><p>–</p><p>Neovim: <a href="https://neovim.io/">https://neovim.io/</a></p><p>Neovim Kickstarter: <a href="https://github.com/nvim-lua/kickstart.nvim">https://github.com/nvim-lua/kickstart.nvim</a></p><p>Kickstarter walkthrough video: <a href="https://www.youtube.com/watch?v=m8C0Cq9Uv9o">https://www.youtube.com/watch?v=m8C0Cq9Uv9o</a></p><p>A directory of Neovim plugins: <a href="https://dotfyle.com/">https://dotfyle.com/</a></p><p>Vimscript’s definition of true and false: <a href="https://vimhelp.org/eval.txt.html#Boolean">https://vimhelp.org/eval.txt.html#Boolean</a></p><p>TJ on Twitter: <a href="https://twitter.com/teej_dv">https://twitter.com/teej_dv</a></p><p>TJ on Twitch: <a href="https://www.twitch.tv/teej_dv">https://www.twitch.tv/teej_dv</a></p><p>TJ on YouTube: <a href="https://www.youtube.com/@teej_dv">https://www.youtube.com/@teej_dv</a></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>–</p><p>#podcast #software #softwareengineering #dx</p>]]></content:encoded>
      <guid isPermaLink="false">9ffe1e32-abef-432a-82e0-839b805004aa</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4061</itunes:duration>
    </item>
    <item>
      <title>Creating Hackathons that Work (with Jon Gottfried)</title>
      <link>https://zencastr.com/z/4K9QOowt</link>
      <itunes:title>Creating Hackathons that Work (with Jon Gottfried)</itunes:title>
      <itunes:summary>Done right, a Hackathon can be a fantastic place to be a programmer - you get time and space to build and learn, in a room full of like-minded people, with swag and prizes to sweeten the deal. It&apos;s a great way to pick up new ideas and run with them. But done wrong it can be a waste of time. What&apos;s the difference between a good hackathon and a bad one? What do the good ones do right, and what can we learn from that?

This week we&apos;re talking about the Joy of Hacks with Major League Hacking Co-Founder Jon Gottfried. He&apos;s got over 10 years of experience building a Hackathon network that provides the right environment for &quot;structured mucking about with computers&quot;, so we&apos;re going to pick his brains.

If you&apos;re ever attending a Hackathon, organising one, or looking for a way to build or contribute to your local programming community, Jon can help guide you to events that work.

--

Major League Hacking: https://mlh.io/

Major League Hacking&apos;s 2024 Event Calendar: https://mlh.io/seasons/2024/events

Games Week: https://events.mlh.io/events/10848 

Jon on Mastodon: https://hachyderm.io/@jonmarkgo

Jon on LinkedIn: https://www.linkedin.com/in/jonmarkgo

Jon on Twitter: https://twitter.com/jonmarkgo

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins

Bonus link - The Great American Baking Show 2023: https://www.youtube.com/watch?v=IlWLSAKEedk

--

#software #podcast #programming #hackathon</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 06 Mar 2024 15:35:38 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="90548397" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/65e88d4a1aabd0caf9930ed9/size/90548397/audio-files/619e48a9649c44004c5a44e8/77c23911-ae26-48ae-9782-af3f9a84e546.mp3"/>
      <description><![CDATA[<p>Done right, a Hackathon can be a fantastic place to be a programmer - you get time and space to build and learn, in a room full of like-minded people, with swag and prizes to sweeten the deal. It’s a great way to pick up new ideas and run with them. But done wrong it can be a waste of time. What’s the difference between a good hackathon and a bad one? What do the good ones do right, and what can we learn from that?</p><p>This week we’re talking about the Joy of Hacks with Major League Hacking Co-Founder Jon Gottfried. He’s got over 10 years of experience building a Hackathon network that provides the right environment for “structured mucking about with computers”, so we’re going to pick his brains.</p><p>If you’re ever attending a Hackathon, organising one, or looking for a way to build or contribute to your local programming community, Jon can help guide you to events that work.</p><p>--</p><p>Major League Hacking: https://mlh.io/</p><p>Major League Hacking’s 2024 Event Calendar: https://mlh.io/seasons/2024/events</p><p>Games Week: https://events.mlh.io/events/10848&nbsp;</p><p>Jon on Mastodon: https://hachyderm.io/@jonmarkgo</p><p>Jon on LinkedIn: https://www.linkedin.com/in/jonmarkgo</p><p>Jon on Twitter: https://twitter.com/jonmarkgo</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p>Bonus link - The Great American Baking Show 2023: https://www.youtube.com/watch?v=IlWLSAKEedk</p><p>--</p><p>#software #podcast #programming #hackathon</p>]]></description>
      <content:encoded><![CDATA[<p>Done right, a Hackathon can be a fantastic place to be a programmer - you get time and space to build and learn, in a room full of like-minded people, with swag and prizes to sweeten the deal. It’s a great way to pick up new ideas and run with them. But done wrong it can be a waste of time. What’s the difference between a good hackathon and a bad one? What do the good ones do right, and what can we learn from that?</p><p>This week we’re talking about the Joy of Hacks with Major League Hacking Co-Founder Jon Gottfried. He’s got over 10 years of experience building a Hackathon network that provides the right environment for “structured mucking about with computers”, so we’re going to pick his brains.</p><p>If you’re ever attending a Hackathon, organising one, or looking for a way to build or contribute to your local programming community, Jon can help guide you to events that work.</p><p>--</p><p>Major League Hacking: https://mlh.io/</p><p>Major League Hacking’s 2024 Event Calendar: https://mlh.io/seasons/2024/events</p><p>Games Week: https://events.mlh.io/events/10848&nbsp;</p><p>Jon on Mastodon: https://hachyderm.io/@jonmarkgo</p><p>Jon on LinkedIn: https://www.linkedin.com/in/jonmarkgo</p><p>Jon on Twitter: https://twitter.com/jonmarkgo</p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p>Bonus link - The Great American Baking Show 2023: https://www.youtube.com/watch?v=IlWLSAKEedk</p><p>--</p><p>#software #podcast #programming #hackathon</p>]]></content:encoded>
      <guid isPermaLink="false">ac5a834b-e595-48f9-a7f3-289129d9a11c</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3772</itunes:duration>
    </item>
    <item>
      <title>Automate Your Way to Better Code: Advanced Property Testing (with Oskar Wickström)</title>
      <link>https://zencastr.com/z/ENjn0A9t</link>
      <itunes:title>Automate Your Way to Better Code: Advanced Property Testing (with Oskar Wickström)</itunes:title>
      <itunes:summary>One of the most promising techniques for software reliability is property testing. The idea that, instead of writing unit tests we describe some property of our code that ought to always be true, then have the computer figure out thousands of unit tests that try to break that rule.

For example, you might say, &quot;No matter which page you visit on my website, there should always be a login button or a logout button.&quot; Then the test&apos;s job is to try to break that rule, but clicking around until it finds some combination of clicks fails that assertion. Like, maybe it finds the 404 page, and you realise it was missing the website&apos;s normal header.

At its best, property testing takes far less work than unit testing, but is far more thorough, because it lets us write the rules and has the computer write the examples. The downside is, it often seems theoretical. It can be hard to apply property testing to real-world cases. Let&apos;s fix that.

We&apos;re joined by Oskar Wickstrom, who&apos;s been building all kinds of different systems and bringing property testing with him wherever he goes. We discuss the basics of property testing, then he goes into the advanced and cunning techniques that go beyond the ordinary into testing databases, webpages and more. With a bit of thought, he can help us test a ten times as much code with a tenth of the effort.

--

Oskar&apos;s book, Property Testing a Screencast Editor [ebook]: https://leanpub.com/property-based-testing-in-a-screencast-editor

Quickstrom: https://quickstrom.io/

F# for Fun &amp; Profit: Property Testing Series: https://fsharpforfunandprofit.com/series/property-based-testing/

Linear Temporal Logic: https://en.wikipedia.org/wiki/Linear_temporal_logic

The Quickstrom Paper: https://arxiv.org/abs/2203.11532

TodoMVC (One frontend app, many implementations): https://todomvc.com/

Oskar on Twitter: https://twitter.com/owickstrom

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins

--

#softwaredevelopment #podcast #programming #testdrivendevelopment #propertytesting</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 28 Feb 2024 15:40:05 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="96704109" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/65df53d570879575a383df84/size/96704109/audio-files/619e48a9649c44004c5a44e8/bc0a378d-30bd-4e92-a2a9-fdf5d60b676e.mp3"/>
      <description><![CDATA[<p>One of the most promising techniques for software reliability is property testing. The idea that, instead of writing unit tests we describe some property of our code that ought to always be true, then have the computer figure out thousands of unit tests that try to break that rule.</p><p>For example, you might say, “No matter which page you visit on my website, there should always be a login button or a logout button.” Then the test’s job is to try to break that rule, but clicking around until it finds some combination of clicks fails that assertion. Like, maybe it finds the 404 page, and you realise it was missing the website’s normal header.</p><p>At its best, property testing takes far less work than unit testing, but is far more thorough, because it lets us write the rules and has the computer write the examples. The downside is, it often seems theoretical. It can be hard to apply property testing to real-world cases. Let’s fix that.</p><p>We’re joined by Oskar Wickstrom, who’s been building all kinds of different systems and bringing property testing with him wherever he goes. We discuss the basics of property testing, then he goes into the advanced and cunning techniques that go beyond the ordinary into testing databases, webpages and more. With a bit of thought, he can help us test a ten times as much code with a tenth of the effort.</p><p>--<br><br>Oskar’s book, Property Testing a Screencast Editor [ebook]: <a href="https://leanpub.com/property-based-testing-in-a-screencast-editor">https://leanpub.com/property-based-testing-in-a-screencast-editor</a></p><p>Quickstrom: <a href="https://quickstrom.io/">https://quickstrom.io/</a></p><p>F# for Fun &amp; Profit: Property Testing Series: <a href="https://fsharpforfunandprofit.com/series/property-based-testing/">https://fsharpforfunandprofit.com/series/property-based-testing/</a></p><p>Linear Temporal Logic: <a href="https://en.wikipedia.org/wiki/Linear_temporal_logic">https://en.wikipedia.org/wiki/Linear_temporal_logic</a></p><p>The Quickstrom Paper: <a href="https://arxiv.org/abs/2203.11532">https://arxiv.org/abs/2203.11532</a></p><p>TodoMVC (One frontend app, many implementations): <a href="https://todomvc.com/">https://todomvc.com/</a></p><p>Oskar on Twitter: <a href="https://twitter.com/owickstrom">https://twitter.com/owickstrom</a></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br><br>--<br><br>#softwaredevelopment #podcast #programming #testdrivendevelopment #propertytesting</p>]]></description>
      <content:encoded><![CDATA[<p>One of the most promising techniques for software reliability is property testing. The idea that, instead of writing unit tests we describe some property of our code that ought to always be true, then have the computer figure out thousands of unit tests that try to break that rule.</p><p>For example, you might say, “No matter which page you visit on my website, there should always be a login button or a logout button.” Then the test’s job is to try to break that rule, but clicking around until it finds some combination of clicks fails that assertion. Like, maybe it finds the 404 page, and you realise it was missing the website’s normal header.</p><p>At its best, property testing takes far less work than unit testing, but is far more thorough, because it lets us write the rules and has the computer write the examples. The downside is, it often seems theoretical. It can be hard to apply property testing to real-world cases. Let’s fix that.</p><p>We’re joined by Oskar Wickstrom, who’s been building all kinds of different systems and bringing property testing with him wherever he goes. We discuss the basics of property testing, then he goes into the advanced and cunning techniques that go beyond the ordinary into testing databases, webpages and more. With a bit of thought, he can help us test a ten times as much code with a tenth of the effort.</p><p>--<br><br>Oskar’s book, Property Testing a Screencast Editor [ebook]: <a href="https://leanpub.com/property-based-testing-in-a-screencast-editor">https://leanpub.com/property-based-testing-in-a-screencast-editor</a></p><p>Quickstrom: <a href="https://quickstrom.io/">https://quickstrom.io/</a></p><p>F# for Fun &amp; Profit: Property Testing Series: <a href="https://fsharpforfunandprofit.com/series/property-based-testing/">https://fsharpforfunandprofit.com/series/property-based-testing/</a></p><p>Linear Temporal Logic: <a href="https://en.wikipedia.org/wiki/Linear_temporal_logic">https://en.wikipedia.org/wiki/Linear_temporal_logic</a></p><p>The Quickstrom Paper: <a href="https://arxiv.org/abs/2203.11532">https://arxiv.org/abs/2203.11532</a></p><p>TodoMVC (One frontend app, many implementations): <a href="https://todomvc.com/">https://todomvc.com/</a></p><p>Oskar on Twitter: <a href="https://twitter.com/owickstrom">https://twitter.com/owickstrom</a></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br><br>--<br><br>#softwaredevelopment #podcast #programming #testdrivendevelopment #propertytesting</p>]]></content:encoded>
      <guid isPermaLink="false">09bffdfa-2dbd-49d3-8e4e-18d53c488020</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4029</itunes:duration>
    </item>
    <item>
      <title>Bridging the Gap Between Languages (with Martin Johansen)</title>
      <link>https://zencastr.com/z/3eGqlLrk</link>
      <itunes:title>Bridging the Gap Between Languages (with Martin Johansen)</itunes:title>
      <itunes:summary>If you ever feel overwhelmed by the number of different programming languages, this week&apos;s episode might just offer you some solace, as we talk about an attempt to reunify many of the most popular languages by focussing on the bread &amp; butter things that every language supports.

I&apos;m joined by Martin Johansen, who&apos;s been working on a new tool called Progsbase. With it, he&apos;s created a spec based on all the things programming languages can agree on, and is building a library that can cross-compile between them. Write a program in Java, and it can be automatically translated to PHP, Python and a great deal more.

But how far can he take that idea? Is there really enough unity between these languages to build something universal? How do you bridge the divide between manual memory management languages like C and garbage-collected ones like Java? And what would it actually feel like to write code this way? Let&apos;s put Martin&apos;s plan under the spotlight and find out…

–

Martin on Twitter: https://twitter.com/martinfj

Kris on Twitter: https://twitter.com/krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Progsbase homepage: https://www.progsbase.com/

The Spec: https://www.progsbase.com/docs/programs/

The Progsbase library repository: https://repo.progsbase.com/

The Bug Bounty: https://www.progsbase.com/bug-bounty/

–

#software #programming #podcast #programminglanguages</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 21 Feb 2024 17:15:22 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="70596333" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/65d5180684506402189e570f/size/70596333/audio-files/619e48a9649c44004c5a44e8/c4a9e410-d0be-474d-8d96-84c18aebd2f7.mp3"/>
      <description><![CDATA[<p>If you ever feel overwhelmed by the number of different programming languages, this week’s episode might just offer you some solace, as we talk about an attempt to reunify many of the most popular languages by focussing on the bread &amp; butter things that every language supports.</p><p>I’m joined by Martin Johansen, who’s been working on a new tool called Progsbase. With it, he’s created a spec based on all the things programming languages can agree on, and is building a library that can cross-compile between them. Write a program in Java, and it can be automatically translated to PHP, Python and a great deal more.</p><p>But how far can he take that idea? Is there really enough unity between these languages to build something universal? How do you bridge the divide between manual memory management languages like C and garbage-collected ones like Java? And what would it actually feel like to write code this way? Let’s put Martin’s plan under the spotlight and find out…</p><p>–</p><p>Martin on Twitter: <a href="https://twitter.com/martinfj">https://twitter.com/martinfj</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Progsbase homepage: <a href="https://www.progsbase.com/">https://www.progsbase.com/</a></p><p>The Spec: <a href="https://www.progsbase.com/docs/programs/">https://www.progsbase.com/docs/programs/</a></p><p>The Progsbase library repository: <a href="https://repo.progsbase.com/">https://repo.progsbase.com/</a></p><p>The Bug Bounty: <a href="https://www.progsbase.com/bug-bounty/">https://www.progsbase.com/bug-bounty/</a></p><p>–</p><p>#software #programming #podcast #programminglanguages</p>]]></description>
      <content:encoded><![CDATA[<p>If you ever feel overwhelmed by the number of different programming languages, this week’s episode might just offer you some solace, as we talk about an attempt to reunify many of the most popular languages by focussing on the bread &amp; butter things that every language supports.</p><p>I’m joined by Martin Johansen, who’s been working on a new tool called Progsbase. With it, he’s created a spec based on all the things programming languages can agree on, and is building a library that can cross-compile between them. Write a program in Java, and it can be automatically translated to PHP, Python and a great deal more.</p><p>But how far can he take that idea? Is there really enough unity between these languages to build something universal? How do you bridge the divide between manual memory management languages like C and garbage-collected ones like Java? And what would it actually feel like to write code this way? Let’s put Martin’s plan under the spotlight and find out…</p><p>–</p><p>Martin on Twitter: <a href="https://twitter.com/martinfj">https://twitter.com/martinfj</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Progsbase homepage: <a href="https://www.progsbase.com/">https://www.progsbase.com/</a></p><p>The Spec: <a href="https://www.progsbase.com/docs/programs/">https://www.progsbase.com/docs/programs/</a></p><p>The Progsbase library repository: <a href="https://repo.progsbase.com/">https://repo.progsbase.com/</a></p><p>The Bug Bounty: <a href="https://www.progsbase.com/bug-bounty/">https://www.progsbase.com/bug-bounty/</a></p><p>–</p><p>#software #programming #podcast #programminglanguages</p>]]></content:encoded>
      <guid isPermaLink="false">7eef921d-0b13-41bc-9d13-a4c7ebeace13</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/b48b05c0-4f7b-45fc-a5cd-6c27c1406f87.png"/>
      <itunes:duration>2941</itunes:duration>
    </item>
    <item>
      <title>If You Want Better Code, Do It For Me (with Jonathan Schneider)</title>
      <link>https://zencastr.com/z/vsIrDJvx</link>
      <itunes:title>If You Want Better Code, Do It For Me (with Jonathan Schneider)</itunes:title>
      <itunes:summary>A lot of programming is split into the mechanical work of writing what you know, and the creative work of figuring out what you don&apos;t know. Wouldn&apos;t it be nice to automate the mechanical stuff away?

Well the good news is we&apos;re already automating a lot of it. Every time you run a refactoring tool or a pretty-printer, you&apos;re handing boring work off to the computer. But how does that magic work, and how can we do more of it?

This week we&apos;re joined by one of the authors of OpenRewrite—Jonathan Schneider—to learn how automated code-rewriting tools really work. From the basic approach to the hairy corner cases, to the reality of keeping developers happy with the subjective side of the results.

It takes a lot of work to automate work away - this week we&apos;ll learn how the work gets done for us too.

–

OpenRewrite: https://docs.openrewrite.org/

Supported Languages: https://docs.openrewrite.org/recipes

Moderne: https://www.moderne.io/

Gradle Lint: https://github.com/nebula-plugins/gradle-lint-plugin

Chicory (Native JVM WASM): https://github.com/dylibso/chicory

Call Java from Haskell: https://github.com/tweag/inline-java#readme

Call Haskell from Java: https://github.com/nh2/call-haskell-from-anything

Kris on Mastodon: http://mastodon.social/@krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Twitter: https://twitter.com/krisajenkins

–

#podcast #software #programming #softwareengineering #refactoring #parsers</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 14 Feb 2024 17:15:49 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="90448749" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/65ccf545a057c57fed694faf/size/90448749/audio-files/619e48a9649c44004c5a44e8/ceb8fb3a-51bb-4c5e-9f9a-19658e0f8647.mp3"/>
      <description><![CDATA[<p>A lot of programming is split into the mechanical work of writing what you know, and the creative work of figuring out what you don’t know. Wouldn’t it be nice to automate the mechanical stuff away?</p><p>Well the good news is we’re already automating a lot of it. Every time you run a refactoring tool or a pretty-printer, you’re handing boring work off to the computer. But how does that magic work, and how can we do more of it?</p><p>This week we’re joined by one of the authors of OpenRewrite—Jonathan Schneider—to learn how automated code-rewriting tools really work. From the basic approach to the hairy corner cases, to the reality of keeping developers happy with the subjective side of the results.</p><p>It takes a lot of work to automate work away - this week we’ll learn how the work gets done for us too.</p><p>–</p><p>OpenRewrite: <a href="https://docs.openrewrite.org/">https://docs.openrewrite.org/</a></p><p>Supported Languages: <a href="https://docs.openrewrite.org/recipes">https://docs.openrewrite.org/recipes</a></p><p>Moderne: <a href="https://www.moderne.io/">https://www.moderne.io/</a></p><p>Gradle Lint: <a href="https://github.com/nebula-plugins/gradle-lint-plugin">https://github.com/nebula-plugins/gradle-lint-plugin</a></p><p>Chicory (Native JVM WASM): <a href="https://github.com/dylibso/chicory">https://github.com/dylibso/chicory</a></p><p>Call Java from Haskell: <a href="https://github.com/tweag/inline-java#readme">https://github.com/tweag/inline-java#readme</a></p><p>Call Haskell from Java: <a href="https://github.com/nh2/call-haskell-from-anything">https://github.com/nh2/call-haskell-from-anything</a></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>–</p><p>#podcast #software #programming #softwareengineering #refactoring #parsers</p>]]></description>
      <content:encoded><![CDATA[<p>A lot of programming is split into the mechanical work of writing what you know, and the creative work of figuring out what you don’t know. Wouldn’t it be nice to automate the mechanical stuff away?</p><p>Well the good news is we’re already automating a lot of it. Every time you run a refactoring tool or a pretty-printer, you’re handing boring work off to the computer. But how does that magic work, and how can we do more of it?</p><p>This week we’re joined by one of the authors of OpenRewrite—Jonathan Schneider—to learn how automated code-rewriting tools really work. From the basic approach to the hairy corner cases, to the reality of keeping developers happy with the subjective side of the results.</p><p>It takes a lot of work to automate work away - this week we’ll learn how the work gets done for us too.</p><p>–</p><p>OpenRewrite: <a href="https://docs.openrewrite.org/">https://docs.openrewrite.org/</a></p><p>Supported Languages: <a href="https://docs.openrewrite.org/recipes">https://docs.openrewrite.org/recipes</a></p><p>Moderne: <a href="https://www.moderne.io/">https://www.moderne.io/</a></p><p>Gradle Lint: <a href="https://github.com/nebula-plugins/gradle-lint-plugin">https://github.com/nebula-plugins/gradle-lint-plugin</a></p><p>Chicory (Native JVM WASM): <a href="https://github.com/dylibso/chicory">https://github.com/dylibso/chicory</a></p><p>Call Java from Haskell: <a href="https://github.com/tweag/inline-java#readme">https://github.com/tweag/inline-java#readme</a></p><p>Call Haskell from Java: <a href="https://github.com/nh2/call-haskell-from-anything">https://github.com/nh2/call-haskell-from-anything</a></p><p>Kris on Mastodon: http://mastodon.social/@krisajenkins</p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>–</p><p>#podcast #software #programming #softwareengineering #refactoring #parsers</p>]]></content:encoded>
      <guid isPermaLink="false">3cd4818b-b2da-47a6-9366-b41e84ee06ff</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3768</itunes:duration>
    </item>
    <item>
      <title>Implementing Hardware-Friendly Databases (with DuckDB co-creator, Hannes Mühleisen)</title>
      <link>https://zencastr.com/z/6vQ7XQsq</link>
      <itunes:title>Implementing Hardware-Friendly Databases (with DuckDB co-creator, Hannes Mühleisen)</itunes:title>
      <itunes:summary>SQLite could do with a little competition, so when I invited the co-creator of DuckDB in to talk, I thought we&apos;d be discussing the perils of trying to build a new in-process database engine. I quickly realised things went much deeper than just a tech refresh.

Hannes Mühleisen joins me this week to blend his academic credentials as a database researcher with his vehement need to make that research practical. And so we dive into what modern database literature has to say on making queries faster, more parallelizable, and closer to the metal, and how it all comes together in a user-friendly package that&apos;s found its way into my day-to-day workload, and might well help out yours.

If you&apos;re curious about the gory details of database queries, how they can take advantage of modern hardware, or how all that research actually turns into a useful tool, Hannes has some great answers.

--

DuckDB: https://duckdb.org/

Database Systems Book: http://infolab.stanford.edu/~ullman/dscb.html

Kris&apos; first computer: https://en.wikipedia.org/wiki/File:ZX_Spectrum_Plus2_(retouched).jpg

Volcano Query Evaluation System [pdf]: https://paperhub.s3.amazonaws.com/dace52a42c07f7f8348b08dc2b186061.pdf

Morsel Query Engine [pdf]: https://cs.brown.edu/~kayhan/papers/morsel_cp.pdf

Unnesting Arbitrary Queries [pdf]: https://cs.emis.de/LNI/Proceedings/Proceedings241/383.pdf

Papers Hannes&apos; team have published: https://duckdb.org/why_duckdb#peer-reviewed-papers-and-thesis-works

DuckDB on Mastodon: https://mastodon.social/@duckdb

Kris on Twitter: https://twitter.com/krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Mastodon: https://mastodon.social/@krisajenkins

--

#softwaredevelopment #podcast #programming #database #duckdb #sql #sqlite</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 07 Feb 2024 15:30:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="115494381" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/65c3933ef2e952f8af76ff9f/size/115494381/audio-files/619e48a9649c44004c5a44e8/6a6b73a2-d1fc-4c10-b761-b6032554ebd5.mp3"/>
      <description><![CDATA[<p>SQLite could do with a little competition, so when I invited the co-creator of DuckDB in to talk, I thought we'd be discussing the perils of trying to build a new in-process database engine. I quickly realised things went much deeper than just a tech refresh.</p><p>Hannes Mühleisen joins me this week to blend his academic credentials as a database researcher with his vehement need to make that research practical. And so we dive into what modern database literature has to say on making queries faster, more parallelizable, and closer to the metal, and how it all comes together in a user-friendly package that’s found its way into my day-to-day workload, and might well help out yours.</p><p>If you’re curious about the gory details of database queries, how they can take advantage of modern hardware, or how all that research actually turns into a useful tool, Hannes has some great answers.</p><p>--</p><p>DuckDB: https://duckdb.org/</p><p>Database Systems Book: http://infolab.stanford.edu/~ullman/dscb.html</p><p>Kris’ first computer: https://en.wikipedia.org/wiki/File:ZX_Spectrum_Plus2_(retouched).jpg</p><p>Volcano Query Evaluation System [pdf]: https://paperhub.s3.amazonaws.com/dace52a42c07f7f8348b08dc2b186061.pdf</p><p>Morsel Query Engine [pdf]: https://cs.brown.edu/~kayhan/papers/morsel_cp.pdf</p><p>Unnesting Arbitrary Queries [pdf]: https://cs.emis.de/LNI/Proceedings/Proceedings241/383.pdf</p><p>Papers Hannes' team have published: https://duckdb.org/why_duckdb#peer-reviewed-papers-and-thesis-works</p><p>DuckDB on Mastodon: https://mastodon.social/@duckdb</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Mastodon: https://mastodon.social/@krisajenkins</p><p>--</p><p>#softwaredevelopment #podcast #programming #database #duckdb #sql #sqlite</p>]]></description>
      <content:encoded><![CDATA[<p>SQLite could do with a little competition, so when I invited the co-creator of DuckDB in to talk, I thought we'd be discussing the perils of trying to build a new in-process database engine. I quickly realised things went much deeper than just a tech refresh.</p><p>Hannes Mühleisen joins me this week to blend his academic credentials as a database researcher with his vehement need to make that research practical. And so we dive into what modern database literature has to say on making queries faster, more parallelizable, and closer to the metal, and how it all comes together in a user-friendly package that’s found its way into my day-to-day workload, and might well help out yours.</p><p>If you’re curious about the gory details of database queries, how they can take advantage of modern hardware, or how all that research actually turns into a useful tool, Hannes has some great answers.</p><p>--</p><p>DuckDB: https://duckdb.org/</p><p>Database Systems Book: http://infolab.stanford.edu/~ullman/dscb.html</p><p>Kris’ first computer: https://en.wikipedia.org/wiki/File:ZX_Spectrum_Plus2_(retouched).jpg</p><p>Volcano Query Evaluation System [pdf]: https://paperhub.s3.amazonaws.com/dace52a42c07f7f8348b08dc2b186061.pdf</p><p>Morsel Query Engine [pdf]: https://cs.brown.edu/~kayhan/papers/morsel_cp.pdf</p><p>Unnesting Arbitrary Queries [pdf]: https://cs.emis.de/LNI/Proceedings/Proceedings241/383.pdf</p><p>Papers Hannes' team have published: https://duckdb.org/why_duckdb#peer-reviewed-papers-and-thesis-works</p><p>DuckDB on Mastodon: https://mastodon.social/@duckdb</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Mastodon: https://mastodon.social/@krisajenkins</p><p>--</p><p>#softwaredevelopment #podcast #programming #database #duckdb #sql #sqlite</p>]]></content:encoded>
      <guid isPermaLink="false">fc1828bd-124b-406a-be75-cb9c2090a20b</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4812</itunes:duration>
    </item>
    <item>
      <title>Verse, Haskell &amp; Core Language Design (with Simon Peyton Jones)</title>
      <link>https://zencastr.com/z/17ZzRgph</link>
      <itunes:title>Verse, Haskell &amp; Core Language Design (with Simon Peyton Jones)</itunes:title>
      <itunes:summary>This week we talk to Simon Peyton Jones, a veteran language designer and researcher, and key figure in the development of Haskell. Haskell. Simon has made countless contributions to advancement of functional programming, and computer programming in general, and is currently working at Epic Games, working on the foundations of their new programming language, Verse.

We discuss how programming languages are made, focussing on a big design idea from both Haskell and Verse: building a large language from a small, tightly designed core. Then we move into Simon&apos;s current work exploring Functional Logic Programming, the big new idea that underpins Verse. It&apos;s an idea that blends the fundamentals FP with the core ideas of logic languages like Prolog in an entirely new way. Not even Simon knows exactly where the idea will lead, but it&apos;s a fascinating idea that could potentially bring constraint-solving and deduction right into the heart of modern software.

Additionally, Simon discusses his involvement in reshaping the way we teach computing in England. He&apos;s been working hard to give computing education the same importance as the teaching of mathematics and sciences - something we should all have a fundamental understanding of.

Simon&apos;s one of the smartest, nicest people in programming. Come as hear his brilliant brain at work. :-D

–

Verse: https://github.com/UnrealVerseGuru/VerseProgrammingLanguage

The Verse Language Reference: https://dev.epicgames.com/documentation/en-us/uefn/verse-language-reference

The Verse Calculus [pdf]: https://simon.peytonjones.org/assets/pdfs/verse-March23.pdf

https://en.wikipedia.org/wiki/Simon_Peyton_Jones

The LogicT monad: https://hackage.haskell.org/package/logict

Can programming be liberated from the von Neumann style?: https://dl.acm.org/doi/10.1145/359576.359579

CAS - Computing At School: https://www.computingatschool.org.uk/

Computer Science Teachers Association: https://csteachers.org/

Kris on Twitter: https://twitter.com/krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 31 Jan 2024 16:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="119694573" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/65ba6841b0574942d8ea5ed9/size/119694573/audio-files/619e48a9649c44004c5a44e8/13d0c9a8-289d-429b-9f9f-edbe1ca46a7f.mp3"/>
      <description><![CDATA[<p><strong>This week we talk to Simon Peyton Jones, a veteran language designer and researcher, and key figure in the development of Haskell. Haskell. Simon has made countless contributions to advancement of functional programming, and computer programming in general, and is currently working at Epic Games, working on the foundations of their new programming language, Verse.</strong></p><p><strong>We discuss how programming languages are made, focussing on a big design idea from both Haskell and Verse: building a large language from a small, tightly designed core. Then we move into Simon's current work exploring Functional Logic Programming, the big new idea that underpins Verse. It's an idea that blends the fundamentals FP with the core ideas of logic languages like Prolog in an entirely new way. Not even Simon knows exactly where the idea will lead, but it's a fascinating idea that could potentially bring constraint-solving and deduction right into the heart of modern software.</strong></p><p><strong>Additionally, Simon discusses his involvement in reshaping the way we teach computing in England. He's been working hard to give computing education the same importance as the teaching of mathematics and sciences - something we should all have a fundamental understanding of.</strong></p><p><strong>Simon's one of the smartest, nicest people in programming. Come as hear his brilliant brain at work. :-D</strong></p><p><strong>–</strong></p><p><strong>Verse: </strong><a href="https://github.com/UnrealVerseGuru/VerseProgrammingLanguage"><strong>https://github.com/UnrealVerseGuru/VerseProgrammingLanguage</strong></a></p><p><strong>The Verse Language Reference: https://dev.epicgames.com/documentation/en-us/uefn/verse-language-reference</strong></p><p><strong>The Verse Calculus [pdf]: </strong><a href="https://simon.peytonjones.org/assets/pdfs/verse-March23.pdf"><strong>https://simon.peytonjones.org/assets/pdfs/verse-March23.pdf</strong></a></p><p><strong>https://en.wikipedia.org/wiki/Simon_Peyton_Jones</strong></p><p><strong>The LogicT monad: </strong><a href="https://hackage.haskell.org/package/logict"><strong>https://hackage.haskell.org/package/logict</strong></a></p><p><strong>Can programming be liberated from the von Neumann style?: </strong><a href="https://dl.acm.org/doi/10.1145/359576.359579"><strong>https://dl.acm.org/doi/10.1145/359576.359579</strong></a></p><p><strong>CAS - Computing At School: </strong><a href="https://www.computingatschool.org.uk/"><strong>https://www.computingatschool.org.uk/</strong></a></p><p><strong>Computer Science Teachers Association: https://csteachers.org/</strong></p><p><strong>Kris on Twitter: </strong><a href="https://twitter.com/krisajenkins"><strong>https://twitter.com/krisajenkins</strong></a></p><p><strong>Kris on LinkedIn: </strong><a href="https://www.linkedin.com/in/krisjenkins/"><strong>https://www.linkedin.com/in/krisjenkins/</strong></a></p>]]></description>
      <content:encoded><![CDATA[<p><strong>This week we talk to Simon Peyton Jones, a veteran language designer and researcher, and key figure in the development of Haskell. Haskell. Simon has made countless contributions to advancement of functional programming, and computer programming in general, and is currently working at Epic Games, working on the foundations of their new programming language, Verse.</strong></p><p><strong>We discuss how programming languages are made, focussing on a big design idea from both Haskell and Verse: building a large language from a small, tightly designed core. Then we move into Simon's current work exploring Functional Logic Programming, the big new idea that underpins Verse. It's an idea that blends the fundamentals FP with the core ideas of logic languages like Prolog in an entirely new way. Not even Simon knows exactly where the idea will lead, but it's a fascinating idea that could potentially bring constraint-solving and deduction right into the heart of modern software.</strong></p><p><strong>Additionally, Simon discusses his involvement in reshaping the way we teach computing in England. He's been working hard to give computing education the same importance as the teaching of mathematics and sciences - something we should all have a fundamental understanding of.</strong></p><p><strong>Simon's one of the smartest, nicest people in programming. Come as hear his brilliant brain at work. :-D</strong></p><p><strong>–</strong></p><p><strong>Verse: </strong><a href="https://github.com/UnrealVerseGuru/VerseProgrammingLanguage"><strong>https://github.com/UnrealVerseGuru/VerseProgrammingLanguage</strong></a></p><p><strong>The Verse Language Reference: https://dev.epicgames.com/documentation/en-us/uefn/verse-language-reference</strong></p><p><strong>The Verse Calculus [pdf]: </strong><a href="https://simon.peytonjones.org/assets/pdfs/verse-March23.pdf"><strong>https://simon.peytonjones.org/assets/pdfs/verse-March23.pdf</strong></a></p><p><strong>https://en.wikipedia.org/wiki/Simon_Peyton_Jones</strong></p><p><strong>The LogicT monad: </strong><a href="https://hackage.haskell.org/package/logict"><strong>https://hackage.haskell.org/package/logict</strong></a></p><p><strong>Can programming be liberated from the von Neumann style?: </strong><a href="https://dl.acm.org/doi/10.1145/359576.359579"><strong>https://dl.acm.org/doi/10.1145/359576.359579</strong></a></p><p><strong>CAS - Computing At School: </strong><a href="https://www.computingatschool.org.uk/"><strong>https://www.computingatschool.org.uk/</strong></a></p><p><strong>Computer Science Teachers Association: https://csteachers.org/</strong></p><p><strong>Kris on Twitter: </strong><a href="https://twitter.com/krisajenkins"><strong>https://twitter.com/krisajenkins</strong></a></p><p><strong>Kris on LinkedIn: </strong><a href="https://www.linkedin.com/in/krisjenkins/"><strong>https://www.linkedin.com/in/krisjenkins/</strong></a></p>]]></content:encoded>
      <guid isPermaLink="false">f36780d0-aec4-47d0-beb3-689ec3696512</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4987</itunes:duration>
    </item>
    <item>
      <title>Shouldn&apos;t Data Connections Be Easier? (with Ashley Jeffs)</title>
      <link>https://zencastr.com/z/bOdnBJU5</link>
      <itunes:title>Shouldn&apos;t Data Connections Be Easier? (with Ashley Jeffs)</itunes:title>
      <itunes:summary>Benthos wants to be part of your Data Engineering toolkit - it&apos;s there as a quick and easy way to set up data pipelines and start streaming data out of A and into B. In contrast to a lot of the tools we&apos;ve talked about on Developer Voices, Benthos seems focussed on cutting development time down to a minimum, so you can quickly configure a new pipeline and test it out, without making a whole sprint of the task. As quick as a quick-and-dirty shell script, without the dirt. 😉

So this week we&apos;re talking to the creator of Benthos, Ashley Jeffs, to hear why he created Benthos, what it can do for you, and what its strengths and weaknesses are. And Jeff&apos;s refreshingly candid about when you should and shouldn&apos;t use it. If you ever need to get data from an HTTP connection into S3, or S3 into Kafka, or Kafka into a flat file, Benthos might just save you a few hours of development.

–

Benthos: https://www.benthos.dev/

A list of supported inputs, processors &amp; outputs: https://www.benthos.dev/docs/about#components

All their cute blobfish logos: https://www.benthos.dev/blobfish/

IDML: https://idml.io/

Kris on Twitter: https://twitter.com/krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

–

#software #podcast #dataengineering #datascience</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 24 Jan 2024 17:51:59 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="108606573" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/65b14e3f2a68006f2dd40a58/size/108606573/audio-files/619e48a9649c44004c5a44e8/6aedd355-6d76-4edc-ac04-63c595329d63.mp3"/>
      <description><![CDATA[<p>Benthos wants to be part of your Data Engineering toolkit - it’s there as a quick and easy way to set up data pipelines and start streaming data out of A and into B. In contrast to a lot of the tools we’ve talked about on Developer Voices, Benthos seems focussed on cutting development time down to a minimum, so you can quickly configure a new pipeline and test it out, without making a whole sprint of the task. As quick as a quick-and-dirty shell script, without the dirt. 😉</p><p>So this week we’re talking to the creator of Benthos, Ashley Jeffs, to hear why he created Benthos, what it can do for you, and what its strengths and weaknesses are. And Jeff’s refreshingly candid about when you should and shouldn’t use it. If you ever need to get data from an HTTP connection into S3, or S3 into Kafka, or Kafka into a flat file, Benthos might just save you a few hours of development.</p><p>–</p><p>Benthos: https://www.benthos.dev/</p><p>A list of supported inputs, processors &amp; outputs: https://www.benthos.dev/docs/about#components</p><p>All their cute blobfish logos: https://www.benthos.dev/blobfish/</p><p>IDML: https://idml.io/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>–</p><p>#software #podcast #dataengineering #datascience</p>]]></description>
      <content:encoded><![CDATA[<p>Benthos wants to be part of your Data Engineering toolkit - it’s there as a quick and easy way to set up data pipelines and start streaming data out of A and into B. In contrast to a lot of the tools we’ve talked about on Developer Voices, Benthos seems focussed on cutting development time down to a minimum, so you can quickly configure a new pipeline and test it out, without making a whole sprint of the task. As quick as a quick-and-dirty shell script, without the dirt. 😉</p><p>So this week we’re talking to the creator of Benthos, Ashley Jeffs, to hear why he created Benthos, what it can do for you, and what its strengths and weaknesses are. And Jeff’s refreshingly candid about when you should and shouldn’t use it. If you ever need to get data from an HTTP connection into S3, or S3 into Kafka, or Kafka into a flat file, Benthos might just save you a few hours of development.</p><p>–</p><p>Benthos: https://www.benthos.dev/</p><p>A list of supported inputs, processors &amp; outputs: https://www.benthos.dev/docs/about#components</p><p>All their cute blobfish logos: https://www.benthos.dev/blobfish/</p><p>IDML: https://idml.io/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>–</p><p>#software #podcast #dataengineering #datascience</p>]]></content:encoded>
      <guid isPermaLink="false">cd20478b-328e-4f25-942e-299f1f58939c</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/96973d74-2516-4e2d-9d94-649aee1838f7.jpg"/>
      <itunes:duration>4525</itunes:duration>
    </item>
    <item>
      <title>What can game programming teach us about databases? (with Tyler Cloutier)</title>
      <link>https://zencastr.com/z/2-zai1Sm</link>
      <itunes:title>What can game programming teach us about databases? (with Tyler Cloutier)</itunes:title>
      <itunes:summary>The world of game programming might seem a million miles away from &apos;regular&apos; programming. But they still have to deal with the same kinds of data, scale and concurrency problems that we&apos;re all familiar with in the software world. And that makes the gaming world an interesting place for new ideas - under the hood they&apos;re solving those same problems we face, but often with some novel ideas about the solutions.  So this week we&apos;re off to the massive open world that is game development, to see what we can learn that might make lives easier in the non-gaming space. Joining us for that is Tyler Cloutier, the founder of Clockwork Labs. They&apos;re building SpaceTimeDB, a curiously-distributed database built to be the underlying platform for their new MMORPG, BitCraft. Digging down into the architecture of SpaceTimeDB, we pick Tyler&apos;s brain for nuggets of information on event sourcing, request/response vs. subscriptions, transactions, security and much more. All in an effort to make our programmers and data scientists&apos; lives easier.

--

SpaceTimeDB: https://spacetimedb.com/

BitCraft: https://bitcraftonline.com/

&quot;4X games&quot; defined: https://en.wikipedia.org/wiki/4X

Plan 9 O.S.: https://en.wikipedia.org/wiki/Plan_9_from_Bell_Labs

Tyler on LinkedIn: https://www.linkedin.com/in/tylercloutier/

Kris on Twitter: https://twitter.com/krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Mastodon: https://mastodon.social/@krisajenkins

--

#programming #podcast #softwaredevelopment #software #gamedev #gamedevelopment</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 17 Jan 2024 17:56:15 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="94356333" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/65a814bffa66f3a5af144a1f/size/94356333/audio-files/619e48a9649c44004c5a44e8/b24796dd-03cc-4167-b608-0ddf523cb447.mp3"/>
      <description><![CDATA[<p>The world of game programming might seem a million miles away from 'regular' programming. But they still have to deal with the same kinds of data, scale and concurrency problems that we’re all familiar with in the software world. And that makes the gaming world an interesting place for new ideas - under the hood they’re solving those same problems we face, but often with some novel ideas about the solutions. &nbsp;So this week we’re off to the massive open world that is game development, to see what we can learn that might make lives easier in the non-gaming space. Joining us for that is Tyler Cloutier, the founder of Clockwork Labs. They’re building SpaceTimeDB, a curiously-distributed database built to be the underlying platform for their new MMORPG, BitCraft. Digging down into the architecture of SpaceTimeDB, we pick Tyler’s brain for nuggets of information on event sourcing, request/response vs. subscriptions, transactions, security and much more. All in an effort to make our programmers and data scientists’ lives easier.<br><br>--</p><p>SpaceTimeDB: <a href="https://spacetimedb.com/">https://spacetimedb.com/</a></p><p>BitCraft: <a href="https://bitcraftonline.com/">https://bitcraftonline.com/</a></p><p>“4X games” defined: <a href="https://en.wikipedia.org/wiki/4X">https://en.wikipedia.org/wiki/4X</a></p><p>Plan 9 O.S.: https://en.wikipedia.org/wiki/Plan_9_from_Bell_Labs</p><p>Tyler on LinkedIn: <a href="https://www.linkedin.com/in/tylercloutier/">https://www.linkedin.com/in/tylercloutier/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Mastodon: <a href="https://mastodon.social/@krisajenkins">https://mastodon.social/@krisajenkins</a><br><br>--<br><br>#programming #podcast #softwaredevelopment #software #gamedev #gamedevelopment</p>]]></description>
      <content:encoded><![CDATA[<p>The world of game programming might seem a million miles away from 'regular' programming. But they still have to deal with the same kinds of data, scale and concurrency problems that we’re all familiar with in the software world. And that makes the gaming world an interesting place for new ideas - under the hood they’re solving those same problems we face, but often with some novel ideas about the solutions. &nbsp;So this week we’re off to the massive open world that is game development, to see what we can learn that might make lives easier in the non-gaming space. Joining us for that is Tyler Cloutier, the founder of Clockwork Labs. They’re building SpaceTimeDB, a curiously-distributed database built to be the underlying platform for their new MMORPG, BitCraft. Digging down into the architecture of SpaceTimeDB, we pick Tyler’s brain for nuggets of information on event sourcing, request/response vs. subscriptions, transactions, security and much more. All in an effort to make our programmers and data scientists’ lives easier.<br><br>--</p><p>SpaceTimeDB: <a href="https://spacetimedb.com/">https://spacetimedb.com/</a></p><p>BitCraft: <a href="https://bitcraftonline.com/">https://bitcraftonline.com/</a></p><p>“4X games” defined: <a href="https://en.wikipedia.org/wiki/4X">https://en.wikipedia.org/wiki/4X</a></p><p>Plan 9 O.S.: https://en.wikipedia.org/wiki/Plan_9_from_Bell_Labs</p><p>Tyler on LinkedIn: <a href="https://www.linkedin.com/in/tylercloutier/">https://www.linkedin.com/in/tylercloutier/</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Kris on Mastodon: <a href="https://mastodon.social/@krisajenkins">https://mastodon.social/@krisajenkins</a><br><br>--<br><br>#programming #podcast #softwaredevelopment #software #gamedev #gamedevelopment</p>]]></content:encoded>
      <guid isPermaLink="false">79149dd1-793d-4cea-9da9-1ca8165967f3</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/96973d74-2516-4e2d-9d94-649aee1838f7.jpg"/>
      <itunes:duration>3931</itunes:duration>
    </item>
    <item>
      <title>Is Odin, &quot;programming done right&quot;? (with &apos;Ginger&apos; Bill Hall)</title>
      <link>https://zencastr.com/z/HT7qujGl</link>
      <itunes:title>Is Odin, &quot;programming done right&quot;? (with &apos;Ginger&apos; Bill Hall)</itunes:title>
      <itunes:summary>Odin&apos;s creator, Bill Hall, makes some bold claims about the language, including that it&apos;s &quot;programming done right&quot;. Before that starts a war on the internet, we&apos;d best ask him to explain what that means, and how Odin tries to achieve it. And while we get deep into the details, overall his answer seems to be, &quot;By gathering masses of feedback and then refining C until it feels joyous again.

Of all the C-like languages we&apos;ve looked at on Developer Voices, Odin seems to be the most at-ease with its progenitor. It&apos;s not trying to be a revolutionary new way of thinking about systems programming; it&apos;s just trying to rethink C for modern conventions. If Bill&apos;s hit his goals, it might be the most comfortable way to get a language that&apos;s C, but C done better…

–

Odin: https://odin-lang.org/

Odin Packages: https://pkg.odin-lang.org/

Newsqueak [pdf]: https://swtch.com/~rsc/thread/newsqueak.pdf

EmberGen: https://jangafx.com/software/embergen/

Raylib: https://www.raylib.com/

RayLib bindings for Odin: https://github.com/odin-lang/Odin/tree/master/vendor/raylib

Verse language: https://dev.epicgames.com/documentation/en-us/uefn/verse-language-reference

Algorithms + Data Structures = Programs: https://en.wikipedia.org/wiki/Algorithms_%2B_Data_Structures_%3D_Programs

Bill on Twitter: https://twitter.com/TheGingerBill

Kris on Twitter: https://twitter.com/krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

--

#podcast #software #softwareprogramming #programming #odin #odinlang</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 10 Jan 2024 16:24:27 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="86497965" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/659ec4bbb169304634a8ecd7/size/86497965/audio-files/619e48a9649c44004c5a44e8/8cffab26-fa80-42f8-bacf-414034730b4d.mp3"/>
      <description><![CDATA[<p>Odin’s creator, Bill Hall, makes some bold claims about the language, including that it’s “programming done right”. Before that starts a war on the internet, we’d best ask him to explain what that means, and how Odin tries to achieve it. And while we get deep into the details, overall his answer seems to be, “By gathering masses of feedback and then refining C until it feels joyous again.</p><p>Of all the C-like languages we’ve looked at on Developer Voices, Odin seems to be the most at-ease with its progenitor. It’s not trying to be a revolutionary new way of thinking about systems programming; it’s just trying to rethink C for modern conventions. If Bill’s hit his goals, it might be the most comfortable way to get a language that’s C, but C done better…</p><p>–</p><p>Odin: https://odin-lang.org/</p><p>Odin Packages: https://pkg.odin-lang.org/</p><p>Newsqueak [pdf]: <a href="https://swtch.com/~rsc/thread/newsqueak.pdf">https://swtch.com/~rsc/thread/newsqueak.pdf</a></p><p>EmberGen: <a href="https://jangafx.com/software/embergen/">https://jangafx.com/software/embergen/</a></p><p>Raylib: https://www.raylib.com/</p><p>RayLib bindings for Odin: https://github.com/odin-lang/Odin/tree/master/vendor/raylib</p><p>Verse language: <a href="https://dev.epicgames.com/documentation/en-us/uefn/verse-language-reference">https://dev.epicgames.com/documentation/en-us/uefn/verse-language-reference</a></p><p>Algorithms + Data Structures = Programs: <a href="https://en.wikipedia.org/wiki/Algorithms_%2B_Data_Structures_%3D_Programs">https://en.wikipedia.org/wiki/Algorithms_%2B_Data_Structures_%3D_Programs</a></p><p>Bill on Twitter: <a href="https://twitter.com/TheGingerBill">https://twitter.com/TheGingerBill</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a><br><br>--</p><p>#podcast #software #softwareprogramming #programming #odin #odinlang</p>]]></description>
      <content:encoded><![CDATA[<p>Odin’s creator, Bill Hall, makes some bold claims about the language, including that it’s “programming done right”. Before that starts a war on the internet, we’d best ask him to explain what that means, and how Odin tries to achieve it. And while we get deep into the details, overall his answer seems to be, “By gathering masses of feedback and then refining C until it feels joyous again.</p><p>Of all the C-like languages we’ve looked at on Developer Voices, Odin seems to be the most at-ease with its progenitor. It’s not trying to be a revolutionary new way of thinking about systems programming; it’s just trying to rethink C for modern conventions. If Bill’s hit his goals, it might be the most comfortable way to get a language that’s C, but C done better…</p><p>–</p><p>Odin: https://odin-lang.org/</p><p>Odin Packages: https://pkg.odin-lang.org/</p><p>Newsqueak [pdf]: <a href="https://swtch.com/~rsc/thread/newsqueak.pdf">https://swtch.com/~rsc/thread/newsqueak.pdf</a></p><p>EmberGen: <a href="https://jangafx.com/software/embergen/">https://jangafx.com/software/embergen/</a></p><p>Raylib: https://www.raylib.com/</p><p>RayLib bindings for Odin: https://github.com/odin-lang/Odin/tree/master/vendor/raylib</p><p>Verse language: <a href="https://dev.epicgames.com/documentation/en-us/uefn/verse-language-reference">https://dev.epicgames.com/documentation/en-us/uefn/verse-language-reference</a></p><p>Algorithms + Data Structures = Programs: <a href="https://en.wikipedia.org/wiki/Algorithms_%2B_Data_Structures_%3D_Programs">https://en.wikipedia.org/wiki/Algorithms_%2B_Data_Structures_%3D_Programs</a></p><p>Bill on Twitter: <a href="https://twitter.com/TheGingerBill">https://twitter.com/TheGingerBill</a></p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a><br><br>--</p><p>#podcast #software #softwareprogramming #programming #odin #odinlang</p>]]></content:encoded>
      <guid isPermaLink="false">773ed105-5bc7-4371-8ba0-b733b5d2f5cf</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/96973d74-2516-4e2d-9d94-649aee1838f7.jpg"/>
      <itunes:duration>3604</itunes:duration>
    </item>
    <item>
      <title>Can Event-Driven Architecture make Software Design Easier? (with Bobby Calderwood)</title>
      <link>https://zencastr.com/z/BPmvKV8o</link>
      <itunes:title>Can Event-Driven Architecture make Software Design Easier? (with Bobby Calderwood)</itunes:title>
      <itunes:summary>This week&apos;s guest describes Event Sourcing as, &quot;all I&apos;m going to use for the rest of my career.&quot; But what is Event Sourcing? How should we think about it, and how does it encourage us to think about writing software?

In this episode we take a close look at systems designed around the idea of Events, with guest Bobby Calderwood. Bobby&apos;s been designing (and helping others design) event based architectures for many years, and enthusiastically recommends it not only as a system-design technique, but as a way of solving business problems faster and more reliably.

During this discussion we look at the various ways of defining event systems, what tools we need to implement them, and the advantages of thinking about software from an event-based perspective. Along the way we discuss everything from Clojure, Bitemporality &amp; Datomic to Kafka and more traditional databases - all in the service of capturing real-world events and building simple systems around them.

–

EventStoreDB: https://developers.eventstore.com/

The CloudEvents standard: https://cloudevents.io/

Datomic: https://www.datomic.com/

Adam Dymitruk&apos;s Event Modelling Explanation: https://eventmodeling.org/

Bobby&apos;s Event Modelling course: https://developer.confluent.io/courses/event-modeling/intro/

Bobby on Twitter: https://twitter.com/bobbycalderwood

Boddy on LinkedIn: https://www.linkedin.com/in/bobbycalderwood/

Kris on Twitter: https://twitter.com/krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

–

#software #softwarepodcast #programming #eventsourcing #eventdrivenarchitecture #kafka</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 03 Jan 2024 17:29:54 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="100791981" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/65959992cca5375da6bf8c6f/size/100791981/audio-files/619e48a9649c44004c5a44e8/b07e46cf-8085-4f38-8e62-30e3af5cfa0d.mp3"/>
      <description><![CDATA[<p>This week’s guest describes Event Sourcing as, “all I’m going to use for the rest of my career.” But what is Event Sourcing? How should we think about it, and how does it encourage us to think about writing software?</p><p>In this episode we take a close look at systems designed around the idea of Events, with guest Bobby Calderwood. Bobby’s been designing (and helping others design) event based architectures for many years, and enthusiastically recommends it not only as a system-design technique, but as a way of solving business problems faster and more reliably.</p><p>During this discussion we look at the various ways of defining event systems, what tools we need to implement them, and the advantages of thinking about software from an event-based perspective. Along the way we discuss everything from Clojure, Bitemporality &amp; Datomic to Kafka and more traditional databases - all in the service of capturing real-world events and building simple systems around them.</p><p>–</p><p>EventStoreDB: <a href="https://developers.eventstore.com/">https://developers.eventstore.com/</a></p><p>The CloudEvents standard: <a href="https://cloudevents.io/">https://cloudevents.io/</a></p><p>Datomic: <a href="https://www.datomic.com/">https://www.datomic.com/</a></p><p>Adam Dymitruk’s Event Modelling Explanation: https://eventmodeling.org/</p><p>Bobby’s Event Modelling course: <a href="https://developer.confluent.io/courses/event-modeling/intro/">https://developer.confluent.io/courses/event-modeling/intro/</a></p><p>Bobby on Twitter: <a href="https://twitter.com/bobbycalderwood">https://twitter.com/bobbycalderwood</a></p><p>Boddy on LinkedIn: https://www.linkedin.com/in/bobbycalderwood/</p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>–</p><p>#software #softwarepodcast #programming #eventsourcing #eventdrivenarchitecture #kafka</p>]]></description>
      <content:encoded><![CDATA[<p>This week’s guest describes Event Sourcing as, “all I’m going to use for the rest of my career.” But what is Event Sourcing? How should we think about it, and how does it encourage us to think about writing software?</p><p>In this episode we take a close look at systems designed around the idea of Events, with guest Bobby Calderwood. Bobby’s been designing (and helping others design) event based architectures for many years, and enthusiastically recommends it not only as a system-design technique, but as a way of solving business problems faster and more reliably.</p><p>During this discussion we look at the various ways of defining event systems, what tools we need to implement them, and the advantages of thinking about software from an event-based perspective. Along the way we discuss everything from Clojure, Bitemporality &amp; Datomic to Kafka and more traditional databases - all in the service of capturing real-world events and building simple systems around them.</p><p>–</p><p>EventStoreDB: <a href="https://developers.eventstore.com/">https://developers.eventstore.com/</a></p><p>The CloudEvents standard: <a href="https://cloudevents.io/">https://cloudevents.io/</a></p><p>Datomic: <a href="https://www.datomic.com/">https://www.datomic.com/</a></p><p>Adam Dymitruk’s Event Modelling Explanation: https://eventmodeling.org/</p><p>Bobby’s Event Modelling course: <a href="https://developer.confluent.io/courses/event-modeling/intro/">https://developer.confluent.io/courses/event-modeling/intro/</a></p><p>Bobby on Twitter: <a href="https://twitter.com/bobbycalderwood">https://twitter.com/bobbycalderwood</a></p><p>Boddy on LinkedIn: https://www.linkedin.com/in/bobbycalderwood/</p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a></p><p>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>–</p><p>#software #softwarepodcast #programming #eventsourcing #eventdrivenarchitecture #kafka</p>]]></content:encoded>
      <guid isPermaLink="false">ab499c0e-15c6-4ca1-8adf-b4abfc2d3fd4</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4199</itunes:duration>
    </item>
    <item>
      <title>How Lisp is designing Nanotechnology (with Prof. Christian Schafmeister)</title>
      <link>https://zencastr.com/z/RMBoPNns</link>
      <itunes:title>How Lisp is designing Nanotechnology (with Prof. Christian Schafmeister)</itunes:title>
      <itunes:summary>One of our oldest languages meets one of our newest sciences in this episode, as we talk with Professor Christian Schafmeister, an award-winning nanotech researcher who&apos;s been developing a language and a design suite to help research the future molecular machines.

In this episode Christian gives us a quick chemistry lesson to explain what his research is trying to achieve, then we get into the software that&apos;s doing it: A new flavour of Common Lisp. But why Lisp? What advantages does a 60 year old language design offer? How does he strike a balance between high-level language features and the need for exceptional performance and parallelism?  And what tricks does his development environment have that modern IDEs could still learn a thing or two from?

--

Clasp (the Lisp): https://github.com/clasp-developers/clasp

Cando (the design language): https://github.com/cando-developers/cando

The Feynman Prize: https://en.wikipedia.org/wiki/Feynman_Prize_in_Nanotechnology

Alphafold: https://alphafold.ebi.ac.uk/

More on LEaP: https://ambermd.org/tutorials/pengfei/

Interactive Development of Crash Bandicoot: https://all-things-andy-gavin.com/2011/03/12/making-crash-bandicoot-gool-part-9/ 

Christian&apos;s Research Group: https://www.schafmeistergroup.com/

Kris on Twitter: https://twitter.com/krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

--

#programming #software #lisplang #commonlisp #nanotech</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 27 Dec 2023 17:01:34 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="76271661" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/658c586efde0c5dc5b330032/size/76271661/audio-files/619e48a9649c44004c5a44e8/a46d2da7-6392-42d8-a84c-fc21eaf22bbb.mp3"/>
      <description><![CDATA[<p>One of our oldest languages meets one of our newest sciences in this episode, as we talk with Professor Christian Schafmeister, an award-winning nanotech researcher who's been developing a language and a design suite to help research the future molecular machines.</p><p>In this episode Christian gives us a quick chemistry lesson to explain what his research is trying to achieve, then we get into the software that's doing it: A new flavour of Common Lisp. But why Lisp? What advantages does a 60 year old language design offer? How does he strike a balance between high-level language features and the need for exceptional performance and parallelism? &nbsp;And what tricks does his development environment have that modern IDEs could still learn a thing or two from?</p><p>--</p><p>Clasp (the Lisp): https://github.com/clasp-developers/clasp</p><p>Cando (the design language): https://github.com/cando-developers/cando</p><p>The Feynman Prize: https://en.wikipedia.org/wiki/Feynman_Prize_in_Nanotechnology</p><p>Alphafold: https://alphafold.ebi.ac.uk/</p><p>More on LEaP: https://ambermd.org/tutorials/pengfei/</p><p>Interactive Development of Crash Bandicoot: https://all-things-andy-gavin.com/2011/03/12/making-crash-bandicoot-gool-part-9/&nbsp;</p><p>Christian's Research Group: https://www.schafmeistergroup.com/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>--</p><p>#programming #software #lisplang #commonlisp #nanotech</p>]]></description>
      <content:encoded><![CDATA[<p>One of our oldest languages meets one of our newest sciences in this episode, as we talk with Professor Christian Schafmeister, an award-winning nanotech researcher who's been developing a language and a design suite to help research the future molecular machines.</p><p>In this episode Christian gives us a quick chemistry lesson to explain what his research is trying to achieve, then we get into the software that's doing it: A new flavour of Common Lisp. But why Lisp? What advantages does a 60 year old language design offer? How does he strike a balance between high-level language features and the need for exceptional performance and parallelism? &nbsp;And what tricks does his development environment have that modern IDEs could still learn a thing or two from?</p><p>--</p><p>Clasp (the Lisp): https://github.com/clasp-developers/clasp</p><p>Cando (the design language): https://github.com/cando-developers/cando</p><p>The Feynman Prize: https://en.wikipedia.org/wiki/Feynman_Prize_in_Nanotechnology</p><p>Alphafold: https://alphafold.ebi.ac.uk/</p><p>More on LEaP: https://ambermd.org/tutorials/pengfei/</p><p>Interactive Development of Crash Bandicoot: https://all-things-andy-gavin.com/2011/03/12/making-crash-bandicoot-gool-part-9/&nbsp;</p><p>Christian's Research Group: https://www.schafmeistergroup.com/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>--</p><p>#programming #software #lisplang #commonlisp #nanotech</p>]]></content:encoded>
      <guid isPermaLink="false">9be6316a-d6b3-40cc-8047-76edc85f7b1f</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3178</itunes:duration>
    </item>
    <item>
      <title>Roc - A Functional Language looking for those Software Sweetspots  (with Richard Feldman)</title>
      <link>https://zencastr.com/z/aWyIz7Ri</link>
      <itunes:title>Roc - A Functional Language looking for those Software Sweetspots  (with Richard Feldman)</itunes:title>
      <itunes:summary>Sometimes, what a programming language makes harder is just as important as what it makes easier. For a simple example, think of GOTO. We&apos;ve been wisely avoiding it for decades because it makes confusing control flow desperately easy. Types and tests are other examples - they&apos;re as much about specifying what shouldn&apos;t work as what should. And perspective is what makes this week&apos;s topic particularly interesting: Roc is a language that&apos;s functional, fast, friendly, and extremely interested in making your life easier by enabling some possibilities and restricting others.

So this week we&apos;re joined by Richard Feldman, the creator of Roc. He&apos;s been an advocate of the Elm programming language for years, for its tight focus on taking the best bits of Functional Programming to the browser. And in recent years he&apos;s been inspired to build his own language, taking that philosophy to other places and platforms.

But which bits are &quot;the best bits&quot;? And how do they change when the domain you&apos;re coding for changes? How is Roc built and how would we build systems in it? Let&apos;s find out…

--
Roc&apos;s homepage: https://www.roc-lang.org/

Richard&apos;s GOTO Copenhagen 2021 talk: https://www.youtube.com/watch?v=3n17wHe5wEw

Richard on Twitter: https://twitter.com/rtfeldman

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Kris on Mastodon: https://mastodon.social/@krisajenkins

Kris on Twitter: https://twitter.com/krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 20 Dec 2023 16:15:37 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="88990893" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/6583132984eef44f25147aaf/size/88990893/audio-files/619e48a9649c44004c5a44e8/b179c734-312d-4b35-9654-f9754456aa23.mp3"/>
      <description><![CDATA[<p>Sometimes, what a programming language makes harder is just as important as what it makes easier. For a simple example, think of GOTO. We’ve been wisely avoiding it for decades because it makes confusing control flow desperately easy. Types and tests are other examples - they’re as much about specifying what shouldn’t work as what should. And perspective is what makes this week’s topic particularly interesting: Roc is a language that’s functional, fast, friendly, and extremely interested in making your life easier by enabling some possibilities and restricting others.</p><p>So this week we’re joined by Richard Feldman, the creator of Roc. He’s been an advocate of the Elm programming language for years, for its tight focus on taking the best bits of Functional Programming to the browser. And in recent years he’s been inspired to build his own language, taking that philosophy to other places and platforms.</p><p>But which bits are “the best bits”? And how do they change when the domain you’re coding for changes? How is Roc built and how would we build systems in it? Let’s find out…<br><br>--<br>Roc’s homepage: https://www.roc-lang.org/</p><p>Richard’s GOTO Copenhagen 2021 talk: https://www.youtube.com/watch?v=3n17wHe5wEw</p><p>Richard on Twitter: https://twitter.com/rtfeldman</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Mastodon: https://mastodon.social/@krisajenkins</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></description>
      <content:encoded><![CDATA[<p>Sometimes, what a programming language makes harder is just as important as what it makes easier. For a simple example, think of GOTO. We’ve been wisely avoiding it for decades because it makes confusing control flow desperately easy. Types and tests are other examples - they’re as much about specifying what shouldn’t work as what should. And perspective is what makes this week’s topic particularly interesting: Roc is a language that’s functional, fast, friendly, and extremely interested in making your life easier by enabling some possibilities and restricting others.</p><p>So this week we’re joined by Richard Feldman, the creator of Roc. He’s been an advocate of the Elm programming language for years, for its tight focus on taking the best bits of Functional Programming to the browser. And in recent years he’s been inspired to build his own language, taking that philosophy to other places and platforms.</p><p>But which bits are “the best bits”? And how do they change when the domain you’re coding for changes? How is Roc built and how would we build systems in it? Let’s find out…<br><br>--<br>Roc’s homepage: https://www.roc-lang.org/</p><p>Richard’s GOTO Copenhagen 2021 talk: https://www.youtube.com/watch?v=3n17wHe5wEw</p><p>Richard on Twitter: https://twitter.com/rtfeldman</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Kris on Mastodon: https://mastodon.social/@krisajenkins</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p>]]></content:encoded>
      <guid isPermaLink="false">d154aae0-b121-4b56-bd74-467f0169eb81</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/96973d74-2516-4e2d-9d94-649aee1838f7.jpg"/>
      <itunes:duration>3708</itunes:duration>
    </item>
    <item>
      <title>If Kafka has a UX problem, does UNIX have the answer?  (with Luca Pette)</title>
      <link>https://zencastr.com/z/wQMaZkv2</link>
      <itunes:title>If Kafka has a UX problem, does UNIX have the answer?  (with Luca Pette)</itunes:title>
      <itunes:summary>One of the recurring themes in the big data &amp; data streaming worlds at the moment is developer experience. It seems like every major tool is trying to answer this question: how do we make large-scale data processing feel trivial?

In some places the answer is any library you like as long as it&apos;s Python. In other realms, a mixture of Java and SQL shows promise. But as this week&apos;s guest—Luca Pette—would say, the Unix design metaphor has plenty to give and keep on giving.

So in this episode of Developer Voices we look at TypeStream - his Kotlin project that provides a shell-like interface to data pipelines, and is gradually expanding to make integration pipelines as simple as `cat /dev/kafka | tee /dev/postgres`.

--

Luca on Twitter: https://twitter.com/lucapette

Luca on LinkedIn: https://www.linkedin.com/in/lucapette/

Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

TypeStream homepage: https://www.typestream.io/

TypeStream installation guide: https://docs.typestream.io/tutorial/installation

Crafting interpreters: https://craftinginterpreters.com/

…by Bob Nystrom: https://twitter.com/munificentbob

NuShell: https://github.com/nushell/nushell

#podcast #apachekafka #bigdata</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 13 Dec 2023 17:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="114473133" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/6579da17f3f1ca6bc83e78e8/size/114473133/audio-files/619e48a9649c44004c5a44e8/cfc0274d-7022-4973-9186-dd8f14fdabc9.mp3"/>
      <description><![CDATA[<p>One of the recurring themes in the big data &amp; data streaming worlds at the moment is developer experience. It seems like every major tool is trying to answer this question: how do we make large-scale data processing feel trivial?</p><p>In some places the answer is any library you like as long as it’s Python. In other realms, a mixture of Java and SQL shows promise. But as this week’s guest—Luca Pette—would say, the Unix design metaphor has plenty to give and keep on giving.</p><p>So in this episode of Developer Voices we look at TypeStream - his Kotlin project that provides a shell-like interface to data pipelines, and is gradually expanding to make integration pipelines as simple as `cat /dev/kafka | tee /dev/postgres`.</p><p>--</p><p>Luca on Twitter: https://twitter.com/lucapette</p><p>Luca on LinkedIn: https://www.linkedin.com/in/lucapette/</p><p>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>TypeStream homepage: https://www.typestream.io/</p><p>TypeStream installation guide: https://docs.typestream.io/tutorial/installation</p><p>Crafting interpreters: https://craftinginterpreters.com/</p><p>…by Bob Nystrom: https://twitter.com/munificentbob</p><p>NuShell: https://github.com/nushell/nushell</p><p>#podcast #apachekafka #bigdata</p>]]></description>
      <content:encoded><![CDATA[<p>One of the recurring themes in the big data &amp; data streaming worlds at the moment is developer experience. It seems like every major tool is trying to answer this question: how do we make large-scale data processing feel trivial?</p><p>In some places the answer is any library you like as long as it’s Python. In other realms, a mixture of Java and SQL shows promise. But as this week’s guest—Luca Pette—would say, the Unix design metaphor has plenty to give and keep on giving.</p><p>So in this episode of Developer Voices we look at TypeStream - his Kotlin project that provides a shell-like interface to data pipelines, and is gradually expanding to make integration pipelines as simple as `cat /dev/kafka | tee /dev/postgres`.</p><p>--</p><p>Luca on Twitter: https://twitter.com/lucapette</p><p>Luca on LinkedIn: https://www.linkedin.com/in/lucapette/</p><p>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>TypeStream homepage: https://www.typestream.io/</p><p>TypeStream installation guide: https://docs.typestream.io/tutorial/installation</p><p>Crafting interpreters: https://craftinginterpreters.com/</p><p>…by Bob Nystrom: https://twitter.com/munificentbob</p><p>NuShell: https://github.com/nushell/nushell</p><p>#podcast #apachekafka #bigdata</p>]]></content:encoded>
      <guid isPermaLink="false">95b8d1e4-189a-40f1-83d8-42e6b95e85c9</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/96973d74-2516-4e2d-9d94-649aee1838f7.jpg"/>
      <itunes:duration>4769</itunes:duration>
    </item>
    <item>
      <title>Will we be writing Hare in 2099? (with Drew DeVault)</title>
      <link>https://zencastr.com/z/mF_YqF0E</link>
      <itunes:title>Will we be writing Hare in 2099? (with Drew DeVault)</itunes:title>
      <itunes:summary>This week we&apos;re back on systems programming with Hare. A C-like language for the ages. We talk to its creator, Drew DeVault, about what he thinks we can learn from the past 50 years of programming, and how we can build that hindsight into a new language that will last for the next 100. 

In among all that long-term ambition we talk cover everything from error handling, typed unions and linear types, to metaprogramming and Drew&apos;s microkernel operating system. It&apos;s called Ares, and it is, of course, built in Hare.

--

Drew&apos;s Homepage: https://drewdevault.com/

Kris on Twitter: https://twitter.com/krisajenkins

Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/ 

A summary of Hare&apos;s features: https://harelang.org/tutorials/introduction/

Hare Community Resources: https://harelang.org/community/

SXMO Mobile: https://sxmo.org/

QBE Compiler Backend: https://c9x.me/compile/users.html

Ares OS Source Code: https://sr.ht/~sircmpwn/helios/

OSDev Wiki: https://wiki.osdev.org/Expanded_Main_Page

The Ares System [pdf]: https://mirror.drewdevault.com/ares.pdf

#programming #podcast #harelang #qbe #microkernel</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 06 Dec 2023 15:49:22 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="78683949" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/657098026d0dba1a343aa273/size/78683949/audio-files/619e48a9649c44004c5a44e8/11c6e418-a48e-4650-a4ad-d3a1fb3b277e.mp3"/>
      <description><![CDATA[<p>This week we're back on systems programming with Hare. A C-like language for the ages. We talk to its creator, Drew DeVault, about what he thinks we can learn from the past 50 years of programming, and how we can build that hindsight into a new language that will last for the next 100.&nbsp;</p><p>In among all that long-term ambition we talk cover everything from error handling, typed unions and linear types, to metaprogramming and Drew's microkernel operating system. It's called Ares, and it is, of course, built in Hare.</p><p>--</p><p>Drew's Homepage: https://drewdevault.com/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/&nbsp;</p><p>A summary of Hare’s features: https://harelang.org/tutorials/introduction/</p><p>Hare Community Resources: https://harelang.org/community/</p><p>SXMO Mobile: https://sxmo.org/</p><p>QBE Compiler Backend: https://c9x.me/compile/users.html</p><p>Ares OS Source Code: https://sr.ht/~sircmpwn/helios/</p><p>OSDev Wiki: https://wiki.osdev.org/Expanded_Main_Page</p><p>The Ares System [pdf]: https://mirror.drewdevault.com/ares.pdf</p><p>#programming #podcast #harelang #qbe #microkernel</p>]]></description>
      <content:encoded><![CDATA[<p>This week we're back on systems programming with Hare. A C-like language for the ages. We talk to its creator, Drew DeVault, about what he thinks we can learn from the past 50 years of programming, and how we can build that hindsight into a new language that will last for the next 100.&nbsp;</p><p>In among all that long-term ambition we talk cover everything from error handling, typed unions and linear types, to metaprogramming and Drew's microkernel operating system. It's called Ares, and it is, of course, built in Hare.</p><p>--</p><p>Drew's Homepage: https://drewdevault.com/</p><p>Kris on Twitter: https://twitter.com/krisajenkins</p><p>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/&nbsp;</p><p>A summary of Hare’s features: https://harelang.org/tutorials/introduction/</p><p>Hare Community Resources: https://harelang.org/community/</p><p>SXMO Mobile: https://sxmo.org/</p><p>QBE Compiler Backend: https://c9x.me/compile/users.html</p><p>Ares OS Source Code: https://sr.ht/~sircmpwn/helios/</p><p>OSDev Wiki: https://wiki.osdev.org/Expanded_Main_Page</p><p>The Ares System [pdf]: https://mirror.drewdevault.com/ares.pdf</p><p>#programming #podcast #harelang #qbe #microkernel</p>]]></content:encoded>
      <guid isPermaLink="false">77fbd364-6c60-4bee-a6ba-4cfcdb29a127</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/96973d74-2516-4e2d-9d94-649aee1838f7.jpg"/>
      <itunes:duration>3278</itunes:duration>
    </item>
    <item>
      <title>Startups Should Solve Real People&apos;s Real Problems (with Michael Drogalis)</title>
      <link>https://zencastr.com/z/NKrtDAjt</link>
      <itunes:title>Startups Should Solve Real People&apos;s Real Problems (with Michael Drogalis)</itunes:title>
      <itunes:summary>A few months ago, Michael Drogalis quit his job and decided launch 4 viable startup business ideas in 4 months, publically documenting every step of the journey. Over here at Developer Voices it seemed fun, inspired, and just crazy enough to work.

We had him on the podcast a few months back just as that journey was beginning, and since he launched his first startup things have changed,. The reception has been better than he expected and the plan has been updated to go all-in on idea number one. But why? What&apos;s changed? What happened between brainstorming 4 ideas and launching #1 into the world? How is he figuring out what problems to solve, and how is he coping with the workload of being a solopreneur with a business idea and only himself to rely on?

It&apos;s definitely time for an update, and to see what we can learn from a fellow geek who wants to start a business, but most of all wants to build technology that people find useful and valuable. Let&apos;s hope he succeeds...

--

ShadowTraffic: https://shadowtraffic.io/
Michael&apos;s Previous Appearance: https://youtu.be/jqS2TbxssQE
Follow Michael&apos;s journey: https://michaeldrogalis.substack.com/
Michael on LinkedIn: https://www.linkedin.com/in/michael-drogalis-01029924/
Michael on Twitter: https://twitter.com/MichaelDrogalis
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

--

#podcast #softwareprogramming #programming #startup #technology #kafka #postgres #shadowtraffic #entrepreneur</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 29 Nov 2023 17:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="74175597" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/656759ebca33b67990a97de4/size/74175597/audio-files/619e48a9649c44004c5a44e8/c7d63324-04bc-4af6-b766-e4dd881e3282.mp3"/>
      <description><![CDATA[<p>A few months ago, Michael Drogalis quit his job and decided launch 4 viable startup business ideas in 4 months, publically documenting every step of the journey. Over here at Developer Voices it seemed fun, inspired, and just crazy enough to work.<br><br>We had him on the podcast a few months back just as that journey was beginning, and since he launched his first startup things have changed,. The reception has been better than he expected and the plan has been updated to go all-in on idea number one. But why? What's changed? What happened between brainstorming 4 ideas and launching #1 into the world? How is he figuring out what problems to solve, and how is he coping with the workload of being a solopreneur with a business idea and only himself to rely on?<br><br>It's definitely time for an update, and to see what we can learn from a fellow geek who wants to start a business, but most of all wants to build technology that people find useful and valuable. Let's hope he succeeds...</p><p>--<br><br>ShadowTraffic: https://shadowtraffic.io/<br>Michael’s Previous Appearance: https://youtu.be/jqS2TbxssQE<br>Follow Michael’s journey: https://michaeldrogalis.substack.com/<br>Michael on LinkedIn: https://www.linkedin.com/in/michael-drogalis-01029924/<br>Michael on Twitter: https://twitter.com/MichaelDrogalis<br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/<br><br>--<br><br>#podcast #softwareprogramming #programming #startup #technology #kafka #postgres #shadowtraffic #entrepreneur</p>]]></description>
      <content:encoded><![CDATA[<p>A few months ago, Michael Drogalis quit his job and decided launch 4 viable startup business ideas in 4 months, publically documenting every step of the journey. Over here at Developer Voices it seemed fun, inspired, and just crazy enough to work.<br><br>We had him on the podcast a few months back just as that journey was beginning, and since he launched his first startup things have changed,. The reception has been better than he expected and the plan has been updated to go all-in on idea number one. But why? What's changed? What happened between brainstorming 4 ideas and launching #1 into the world? How is he figuring out what problems to solve, and how is he coping with the workload of being a solopreneur with a business idea and only himself to rely on?<br><br>It's definitely time for an update, and to see what we can learn from a fellow geek who wants to start a business, but most of all wants to build technology that people find useful and valuable. Let's hope he succeeds...</p><p>--<br><br>ShadowTraffic: https://shadowtraffic.io/<br>Michael’s Previous Appearance: https://youtu.be/jqS2TbxssQE<br>Follow Michael’s journey: https://michaeldrogalis.substack.com/<br>Michael on LinkedIn: https://www.linkedin.com/in/michael-drogalis-01029924/<br>Michael on Twitter: https://twitter.com/MichaelDrogalis<br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/<br><br>--<br><br>#podcast #softwareprogramming #programming #startup #technology #kafka #postgres #shadowtraffic #entrepreneur</p>]]></content:encoded>
      <guid isPermaLink="false">7dd20589-f646-4eb8-bc33-e12e1e01f720</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3090</itunes:duration>
    </item>
    <item>
      <title>Is Flink the answer to the ETL problem? (with Robert Metzger)</title>
      <link>https://zencastr.com/z/D6AMUODl</link>
      <itunes:title>Is Flink the answer to the ETL problem? (with Robert Metzger)</itunes:title>
      <itunes:summary>Integration is probably the last, hardest, and least well thought-out part of any large software project. So anything that makes the data-streaming job easier is worth knowing about. So this week we turn our attention to Apache Flink, a flexible system for grabbing, transforming and shipping data between systems using Java, Python or good ol&apos; SQL.

So this week Robert Metzger—Apache Flink expert and PMC member—joins us to explain what problems Flink solves and how it solves them reliably. We cover the range from simple use cases to realtime aggregations &amp; joins to its high availability strategy.

If you&apos;re working on systems that include more than one database, then you&apos;re definitely going to face the kinds of problems that Flink tackles.

--

Apache Flink: https://flink.apache.org/
Robert on Twitter: https://twitter.com/rmetzger_
Robert on LinkedIn: https://www.linkedin.com/in/metzgerrobert/
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

–

#software #programming #podcast #flink #apacheflink #dataintegration</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 22 Nov 2023 17:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="92794797" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/655dda252461314cc585bd27/size/92794797/audio-files/619e48a9649c44004c5a44e8/cd43c677-9f5a-401f-93ac-596a622f9230.mp3"/>
      <description><![CDATA[<p>Integration is probably the last, hardest, and least well thought-out part of any large software project. So anything that makes the data-streaming job easier is worth knowing about. So this week we turn our attention to Apache Flink, a flexible system for grabbing, transforming and shipping data between systems using Java, Python or good ol’ SQL. <br><br>So this week Robert Metzger—Apache Flink expert and PMC member—joins us to explain what problems Flink solves and how it solves them reliably. We cover the range from simple use cases to realtime aggregations &amp; joins to its high availability strategy.</p><p>If you’re working on systems that include more than one database, then you’re definitely going to face the kinds of problems that Flink tackles.<br><br>--<br><br>Apache Flink: https://flink.apache.org/<br>Robert on Twitter: <a href="https://twitter.com/rmetzger_">https://twitter.com/rmetzger_</a><br>Robert on LinkedIn: <a href="https://www.linkedin.com/in/metzgerrobert/">https://www.linkedin.com/in/metzgerrobert/</a><br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>–</p><p>#software #programming #podcast #flink #apacheflink #dataintegration</p>]]></description>
      <content:encoded><![CDATA[<p>Integration is probably the last, hardest, and least well thought-out part of any large software project. So anything that makes the data-streaming job easier is worth knowing about. So this week we turn our attention to Apache Flink, a flexible system for grabbing, transforming and shipping data between systems using Java, Python or good ol’ SQL. <br><br>So this week Robert Metzger—Apache Flink expert and PMC member—joins us to explain what problems Flink solves and how it solves them reliably. We cover the range from simple use cases to realtime aggregations &amp; joins to its high availability strategy.</p><p>If you’re working on systems that include more than one database, then you’re definitely going to face the kinds of problems that Flink tackles.<br><br>--<br><br>Apache Flink: https://flink.apache.org/<br>Robert on Twitter: <a href="https://twitter.com/rmetzger_">https://twitter.com/rmetzger_</a><br>Robert on LinkedIn: <a href="https://www.linkedin.com/in/metzgerrobert/">https://www.linkedin.com/in/metzgerrobert/</a><br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>–</p><p>#software #programming #podcast #flink #apacheflink #dataintegration</p>]]></content:encoded>
      <guid isPermaLink="false">832de873-7bf6-4f22-b5ad-ca65941e1dc7</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/96973d74-2516-4e2d-9d94-649aee1838f7.jpg"/>
      <itunes:duration>3866</itunes:duration>
    </item>
    <item>
      <title>What&apos;s Zig got that C, Rust and Go don&apos;t have? (with Loris Cro)</title>
      <link>https://zencastr.com/z/-PgMxBi_</link>
      <itunes:title>What&apos;s Zig got that C, Rust and Go don&apos;t have? (with Loris Cro)</itunes:title>
      <itunes:summary>Zig is a programming language that&apos;s attempting to become &quot;the new C&quot; - the language of choice for low-level systems programming and embedded hardware. Going into that space not only puts it in competition with C and C++, but also other newcomers like Rust and Go. So what makes Zig special?

Joining us to discuss it is Loris Cro from the Zig Foundation. We talk through Zig&apos;s reasons to exist, its language design features, which parts of the C ecosystem it&apos;s tackling, and how the Zig Foundation is set up for the long-term health of the language.

–

Loris&apos; website: https://kristoff.it/
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Zig homepage: https://ziglang.org/
The &quot;learn zig&quot; guide: https://ziglearn.org/
Learn Zig with Ziglings: https://ziglings.org/
Find the Zig community: https://github.com/ziglang/zig/wiki/Community
Rust&apos;s cargo-zigbuild: https://github.com/rust-cross/cargo-zigbuild
Using zig as a better linker: https://andrewkelley.me/post/zig-cc-powerful-drop-in-replacement-gcc-clang.html
&quot;The Economics of Programming Languages&quot; by Evan Czaplicki (Strange Loop 2023) - https://youtu.be/XZ3w_jec1v8

–

#programming #programminglanguages #software #zig #llvm #rust #go</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 15 Nov 2023 17:24:52 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="120782637" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/6554fee4ba7afe4ff5fa781e/size/120782637/audio-files/619e48a9649c44004c5a44e8/e3bf8c2c-7ed3-47c4-8cc7-0c0e49c610f1.mp3"/>
      <description><![CDATA[<p>Zig is a programming language that’s attempting to become “the new C” - the language of choice for low-level systems programming and embedded hardware. Going into that space not only puts it in competition with C and C++, but also other newcomers like Rust and Go. So what makes Zig special?</p><p>Joining us to discuss it is Loris Cro from the Zig Foundation. We talk through Zig’s reasons to exist, its language design features, which parts of the C ecosystem it's tackling, and how the Zig Foundation is set up for the long-term health of the language.</p><p>–</p><p>Loris’ website: https://kristoff.it/<br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Zig homepage: https://ziglang.org/<br>The “learn zig” guide: https://ziglearn.org/<br>Learn Zig with Ziglings: https://ziglings.org/<br>Find the Zig community: https://github.com/ziglang/zig/wiki/Community<br>Rust’s cargo-zigbuild: https://github.com/rust-cross/cargo-zigbuild<br>Using zig as a better linker: https://andrewkelley.me/post/zig-cc-powerful-drop-in-replacement-gcc-clang.html<br>"The Economics of Programming Languages" by Evan Czaplicki (Strange Loop 2023) - https://youtu.be/XZ3w_jec1v8</p><p>–</p><p>#programming #programminglanguages #software #zig #llvm #rust #go</p>]]></description>
      <content:encoded><![CDATA[<p>Zig is a programming language that’s attempting to become “the new C” - the language of choice for low-level systems programming and embedded hardware. Going into that space not only puts it in competition with C and C++, but also other newcomers like Rust and Go. So what makes Zig special?</p><p>Joining us to discuss it is Loris Cro from the Zig Foundation. We talk through Zig’s reasons to exist, its language design features, which parts of the C ecosystem it's tackling, and how the Zig Foundation is set up for the long-term health of the language.</p><p>–</p><p>Loris’ website: https://kristoff.it/<br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p><p>Zig homepage: https://ziglang.org/<br>The “learn zig” guide: https://ziglearn.org/<br>Learn Zig with Ziglings: https://ziglings.org/<br>Find the Zig community: https://github.com/ziglang/zig/wiki/Community<br>Rust’s cargo-zigbuild: https://github.com/rust-cross/cargo-zigbuild<br>Using zig as a better linker: https://andrewkelley.me/post/zig-cc-powerful-drop-in-replacement-gcc-clang.html<br>"The Economics of Programming Languages" by Evan Czaplicki (Strange Loop 2023) - https://youtu.be/XZ3w_jec1v8</p><p>–</p><p>#programming #programminglanguages #software #zig #llvm #rust #go</p>]]></content:encoded>
      <guid isPermaLink="false">3e42bb6a-401d-4ca1-88a8-3f9f46d141cf</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>5032</itunes:duration>
    </item>
    <item>
      <title>Why did Redpanda rewrite Apache Kafka? (with Christina Lin)</title>
      <link>https://zencastr.com/z/_-yYtQpH</link>
      <itunes:title>Why did Redpanda rewrite Apache Kafka? (with Christina Lin)</itunes:title>
      <itunes:summary>Would you ever take on a rewrite of one of the largest and most popular Apache projects? And if so, what would you keep the same and what would you change?

This week we&apos;re talking to Christina Lin, who&apos;s part of Redpanda, a company that&apos;s rewriting parts of the Apache Kafka ecosystem in C++, with the aim of getting performance gains that aren&apos;t feasible in Java. It seems like a huge mountain to climb, and a fascinating journey to be on, so let&apos;s ask why and how they&apos;ve taken on this challenge…

Christina on Twitter: https://twitter.com/Christina_wm
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/
Redpanda: https://redpanda.com/
Redpanda University: https://university.redpanda.com/
Seestar framework: https://seastar.io/
Apache Flink: https://flink.apache.org/

#redpanda #kafka #apachekafka #streaming #python</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 08 Nov 2023 16:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="71214381" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/654b8c46ea0518e10b9182b5/size/71214381/audio-files/619e48a9649c44004c5a44e8/2fd07285-fd06-4667-8d92-ca778c641ea9.mp3"/>
      <description><![CDATA[<p>Would you ever take on a rewrite of one of the largest and most popular Apache projects? And if so, what would you keep the same and what would you change?</p><p>This week we’re talking to Christina Lin, who’s part of Redpanda, a company that’s rewriting parts of the Apache Kafka ecosystem in C++, with the aim of getting performance gains that aren’t feasible in Java. It seems like a huge mountain to climb, and a fascinating journey to be on, so let’s ask why and how they’ve taken on this challenge…</p><p>Christina on Twitter: https://twitter.com/Christina_wm<br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a><br>Redpanda: <a href="https://redpanda.com/">https://redpanda.com/</a><br>Redpanda University: https://university.redpanda.com/<br>Seestar framework: <a href="https://seastar.io/">https://seastar.io/</a><br>Apache Flink: <a href="https://flink.apache.org/">https://flink.apache.org/</a></p><p>#redpanda #kafka #apachekafka #streaming #python</p>]]></description>
      <content:encoded><![CDATA[<p>Would you ever take on a rewrite of one of the largest and most popular Apache projects? And if so, what would you keep the same and what would you change?</p><p>This week we’re talking to Christina Lin, who’s part of Redpanda, a company that’s rewriting parts of the Apache Kafka ecosystem in C++, with the aim of getting performance gains that aren’t feasible in Java. It seems like a huge mountain to climb, and a fascinating journey to be on, so let’s ask why and how they’ve taken on this challenge…</p><p>Christina on Twitter: https://twitter.com/Christina_wm<br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a><br>Redpanda: <a href="https://redpanda.com/">https://redpanda.com/</a><br>Redpanda University: https://university.redpanda.com/<br>Seestar framework: <a href="https://seastar.io/">https://seastar.io/</a><br>Apache Flink: <a href="https://flink.apache.org/">https://flink.apache.org/</a></p><p>#redpanda #kafka #apachekafka #streaming #python</p>]]></content:encoded>
      <guid isPermaLink="false">8bdd7c4e-ba4a-43ed-a341-3b3cef742045</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>2967</itunes:duration>
    </item>
    <item>
      <title>Debezium - Capturing Data the Instant it Happens (with Gunnar Morling)</title>
      <link>https://zencastr.com/z/NvOt05C9</link>
      <itunes:title>Debezium - Capturing Data the Instant it Happens (with Gunnar Morling)</itunes:title>
      <itunes:summary>This week we&apos;re looking at Debezium - an open source project that taps into a huge number of databases and lets you stream data to other systems in real time. It&apos;s a huge project that covers a wide range of uses: Some people use it to replicate from Oracle to MySQL, others to do smart cache invalidation, and others to build a bridge from an existing relational database to the event-sourcing world. If you&apos;re working on a system that has more than one kind of database, it may be an essential tool. But what exactly does it do, and how does it do it?

Joining us for a deep dive is Debezium expert and former project lead, Gunnar Morling. He takes us through all things Debezium, from who uses Debezium and why; which systems you can connect to and what data you get out from it; and how a project of this scope is developed.

Gunnar on Twitter: https://twitter.com/gunnarmorling
Gunnar on LinkedIn: https://www.linkedin.com/in/gunnar-morling-2b44b7229/
Gunnar&apos;s blog: https://www.morling.dev/
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Gunnar&apos;s talk on the new incremental snapshot mechanism: https://events.bizzabo.com/468544/agenda/session/1136877
Getting into Real Time data: https://youtu.be/ftAVFxa5AwI
Stripe&apos;s talk at Flink Forward: https://www.slideshare.net/FlinkForward/squirreling-away-640-billion-how-stripe-leverages-flink-for-change-data-capture
Francesco&apos;s &quot;When JDBC Goes Wrong&quot; talk: https://www.confluent.io/events/kafka-summit-london-2022/jdbc-source-connector-what-could-go-wrong/

#debezium #microservicesarchitecture #cdc #database #postgresql #oracle #mysql #eventsourcing #kafka #jdbc #realtime</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 01 Nov 2023 16:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="90196461" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/654103615836edf8052e0f77/size/90196461/audio-files/619e48a9649c44004c5a44e8/9642e0f4-9ecd-4d44-91ce-fc117bc9f86b.mp3"/>
      <description><![CDATA[<p>This week we’re looking at Debezium - an open source project that taps into a huge number of databases and lets you stream data to other systems in real time. It’s a huge project that covers a wide range of uses: Some people use it to replicate from Oracle to MySQL, others to do smart cache invalidation, and others to build a bridge from an existing relational database to the event-sourcing world. If you’re working on a system that has more than one kind of database, it may be an essential tool. But what exactly does it do, and how does it do it?</p><p>Joining us for a deep dive is Debezium expert and former project lead, Gunnar Morling. He takes us through all things Debezium, from who uses Debezium and why; which systems you can connect to and what data you get out from it; and how a project of this scope is developed.</p><p>Gunnar on Twitter: <a href="https://twitter.com/gunnarmorling">https://twitter.com/gunnarmorling</a><br>Gunnar on LinkedIn: <a href="https://www.linkedin.com/in/gunnar-morling-2b44b7229/">https://www.linkedin.com/in/gunnar-morling-2b44b7229/</a><br>Gunnar’s blog: https://www.morling.dev/<br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Gunnar’s talk on the new incremental snapshot mechanism: <a href="https://events.bizzabo.com/468544/agenda/session/1136877">https://events.bizzabo.com/468544/agenda/session/1136877</a><br>Getting into Real Time data: <a href="https://youtu.be/ftAVFxa5AwI">https://youtu.be/ftAVFxa5AwI</a><br>Stripe’s talk at Flink Forward: <a href="https://www.slideshare.net/FlinkForward/squirreling-away-640-billion-how-stripe-leverages-flink-for-change-data-capture">https://www.slideshare.net/FlinkForward/squirreling-away-640-billion-how-stripe-leverages-flink-for-change-data-capture</a><br>Francesco’s “When JDBC Goes Wrong” talk: https://www.confluent.io/events/kafka-summit-london-2022/jdbc-source-connector-what-could-go-wrong/</p><p>#debezium #microservicesarchitecture #cdc #database #postgresql #oracle #mysql #eventsourcing #kafka #jdbc #realtime</p>]]></description>
      <content:encoded><![CDATA[<p>This week we’re looking at Debezium - an open source project that taps into a huge number of databases and lets you stream data to other systems in real time. It’s a huge project that covers a wide range of uses: Some people use it to replicate from Oracle to MySQL, others to do smart cache invalidation, and others to build a bridge from an existing relational database to the event-sourcing world. If you’re working on a system that has more than one kind of database, it may be an essential tool. But what exactly does it do, and how does it do it?</p><p>Joining us for a deep dive is Debezium expert and former project lead, Gunnar Morling. He takes us through all things Debezium, from who uses Debezium and why; which systems you can connect to and what data you get out from it; and how a project of this scope is developed.</p><p>Gunnar on Twitter: <a href="https://twitter.com/gunnarmorling">https://twitter.com/gunnarmorling</a><br>Gunnar on LinkedIn: <a href="https://www.linkedin.com/in/gunnar-morling-2b44b7229/">https://www.linkedin.com/in/gunnar-morling-2b44b7229/</a><br>Gunnar’s blog: https://www.morling.dev/<br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>Gunnar’s talk on the new incremental snapshot mechanism: <a href="https://events.bizzabo.com/468544/agenda/session/1136877">https://events.bizzabo.com/468544/agenda/session/1136877</a><br>Getting into Real Time data: <a href="https://youtu.be/ftAVFxa5AwI">https://youtu.be/ftAVFxa5AwI</a><br>Stripe’s talk at Flink Forward: <a href="https://www.slideshare.net/FlinkForward/squirreling-away-640-billion-how-stripe-leverages-flink-for-change-data-capture">https://www.slideshare.net/FlinkForward/squirreling-away-640-billion-how-stripe-leverages-flink-for-change-data-capture</a><br>Francesco’s “When JDBC Goes Wrong” talk: https://www.confluent.io/events/kafka-summit-london-2022/jdbc-source-connector-what-could-go-wrong/</p><p>#debezium #microservicesarchitecture #cdc #database #postgresql #oracle #mysql #eventsourcing #kafka #jdbc #realtime</p>]]></content:encoded>
      <guid isPermaLink="false">4e8ed214-2f58-4e70-a0a2-eac53dd8fcf5</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/96973d74-2516-4e2d-9d94-649aee1838f7.jpg"/>
      <itunes:duration>3758</itunes:duration>
    </item>
    <item>
      <title>When We Talk About Software (with Francesco Tisiot)</title>
      <link>https://zencastr.com/z/hcnNAdvY</link>
      <itunes:title>When We Talk About Software (with Francesco Tisiot)</itunes:title>
      <itunes:summary>Ever read a bad README? We all have, and most of the time, we&apos;ve just moved right along. A programmer that can&apos;t communicate their ideas will find no-one uses their software. And that&apos;s true even outside of the open-source world. The best software doesn&apos;t win - the best software _that people can understand_ wins. So how do we get better at communicating our code? What do we talk about when we talk about software?

Joining to discuss that question is a data-streaming expert and skilled communicator, Francesco Tisiot. Unusually, this episode is recorded on location, as we met up in the hallway of a recent tech conference.

Francesco on Twitter: https://twitter.com/FTisiot
Francesco on LinkedIn: https://www.linkedin.com/in/francescotisiot/
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

#podcast #podcasts #devrel #opensource #software #presentations</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 25 Oct 2023 15:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="46095597" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/653145f5dc534a1e506e70fd/size/46095597/audio-files/619e48a9649c44004c5a44e8/508799f6-4b44-4ae4-ae45-3c5fa03fa139.mp3"/>
      <description><![CDATA[<p>Ever read a bad README? We all have, and most of the time, we’ve just moved right along. A programmer that can’t communicate their ideas will find no-one uses their software. And that’s true even outside of the open-source world. The best software doesn’t win - the best software _that people can understand_ wins. So how do we get better at communicating our code? What do we talk about when we talk about software?</p><p>Joining to discuss that question is a data-streaming expert and skilled communicator, Francesco Tisiot. Unusually, this episode is recorded on location, as we met up in the hallway of a recent tech conference.</p><p>Francesco on Twitter: <a href="https://twitter.com/FTisiot">https://twitter.com/FTisiot</a><br>Francesco on LinkedIn: https://www.linkedin.com/in/francescotisiot/<br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>#podcast #podcasts #devrel #opensource #software #presentations</p>]]></description>
      <content:encoded><![CDATA[<p>Ever read a bad README? We all have, and most of the time, we’ve just moved right along. A programmer that can’t communicate their ideas will find no-one uses their software. And that’s true even outside of the open-source world. The best software doesn’t win - the best software _that people can understand_ wins. So how do we get better at communicating our code? What do we talk about when we talk about software?</p><p>Joining to discuss that question is a data-streaming expert and skilled communicator, Francesco Tisiot. Unusually, this episode is recorded on location, as we met up in the hallway of a recent tech conference.</p><p>Francesco on Twitter: <a href="https://twitter.com/FTisiot">https://twitter.com/FTisiot</a><br>Francesco on LinkedIn: https://www.linkedin.com/in/francescotisiot/<br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p><p>#podcast #podcasts #devrel #opensource #software #presentations</p>]]></content:encoded>
      <guid isPermaLink="false">ece0dbfb-50d5-4c23-8dae-a3f3330b09d3</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>1920</itunes:duration>
    </item>
    <item>
      <title>Semantic Search: A Deep Dive Into Vector Databases (with Zain Hasan)</title>
      <link>https://zencastr.com/z/1xs7SIpW</link>
      <itunes:title>Semantic Search: A Deep Dive Into Vector Databases (with Zain Hasan)</itunes:title>
      <itunes:summary>As interesting and useful as LLMs (Large Language Models) are proving, they have a severe limitation: they only know about the information they were trained on. If you train it on a snapshot of the internet from 2023, it&apos;ll think it&apos;s 2023 forever. So what do you do if you want to teach it some new information, but don&apos;t want to burn a million AWS credits to get there?

In exploring that answer, we dive deep into the world of semantic search, augmented LLMs, and exactly how vector databases bridge that gap from the old dog to the new tricks. Along the way we&apos;ll go from an easy trick to teach ChatGPT some new information by hand, all the way down to how vector databases store documents by their meaning, and how they efficiently search through those meanings to give custom, relevant answers to your questions.

--

Zain on Twitter: https://twitter.com/zainhasan6
Zain on LinkedIn: https://www.linkedin.com/in/zainhas
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/
HNSW Paper: https://arxiv.org/abs/1603.09320
ImageBind - One Embedding Space To Bind Them All (pdf): https://openaccess.thecvf.com/content/CVPR2023/papers/Girdhar_ImageBind_One_Embedding_Space_To_Bind_Them_All_CVPR_2023_paper.pdf
Weaviate: https://weaviate.io/
Source: https://github.com/weaviate/weaviate
Examples: https://github.com/weaviate/weaviate-examples
Community Links: https://forum.weaviate.io/ and https://weaviate.io/slack

--

#vectordb #vectordatabase #semanticsearch #openai #chatgpt #weaviate #knn</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 18 Oct 2023 15:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="89300781" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/652fdaa4273df282eaa84b45/size/89300781/audio-files/619e48a9649c44004c5a44e8/49f95d3b-6b48-4534-bbad-1616acaa8ed7.mp3"/>
      <description><![CDATA[<p>As interesting and useful as LLMs (Large Language Models) are proving, they have a severe limitation: they only know about the information they were trained on. If you train it on a snapshot of the internet from 2023, it’ll think it’s 2023 forever. So what do you do if you want to teach it some new information, but don’t want to burn a million AWS credits to get there?</p><p>In exploring that answer, we dive deep into the world of semantic search, augmented LLMs, and exactly how vector databases bridge that gap from the old dog to the new tricks. Along the way we’ll go from an easy trick to teach ChatGPT some new information by hand, all the way down to how vector databases store documents by their meaning, and how they efficiently search through those meanings to give custom, relevant answers to your questions.</p><p>--</p><p>Zain on Twitter: https://twitter.com/zainhasan6<br>Zain on LinkedIn: https://www.linkedin.com/in/zainhas<br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/<br>HNSW Paper: https://arxiv.org/abs/1603.09320<br>ImageBind - One Embedding Space To Bind Them All (pdf): https://openaccess.thecvf.com/content/CVPR2023/papers/Girdhar_ImageBind_One_Embedding_Space_To_Bind_Them_All_CVPR_2023_paper.pdf<br>Weaviate: https://weaviate.io/<br>Source: https://github.com/weaviate/weaviate<br>Examples: https://github.com/weaviate/weaviate-examples<br>Community Links: https://forum.weaviate.io/ and https://weaviate.io/slack<br><br>--<br><br>#vectordb #vectordatabase #semanticsearch #openai #chatgpt #weaviate #knn</p>]]></description>
      <content:encoded><![CDATA[<p>As interesting and useful as LLMs (Large Language Models) are proving, they have a severe limitation: they only know about the information they were trained on. If you train it on a snapshot of the internet from 2023, it’ll think it’s 2023 forever. So what do you do if you want to teach it some new information, but don’t want to burn a million AWS credits to get there?</p><p>In exploring that answer, we dive deep into the world of semantic search, augmented LLMs, and exactly how vector databases bridge that gap from the old dog to the new tricks. Along the way we’ll go from an easy trick to teach ChatGPT some new information by hand, all the way down to how vector databases store documents by their meaning, and how they efficiently search through those meanings to give custom, relevant answers to your questions.</p><p>--</p><p>Zain on Twitter: https://twitter.com/zainhasan6<br>Zain on LinkedIn: https://www.linkedin.com/in/zainhas<br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/<br>HNSW Paper: https://arxiv.org/abs/1603.09320<br>ImageBind - One Embedding Space To Bind Them All (pdf): https://openaccess.thecvf.com/content/CVPR2023/papers/Girdhar_ImageBind_One_Embedding_Space_To_Bind_Them_All_CVPR_2023_paper.pdf<br>Weaviate: https://weaviate.io/<br>Source: https://github.com/weaviate/weaviate<br>Examples: https://github.com/weaviate/weaviate-examples<br>Community Links: https://forum.weaviate.io/ and https://weaviate.io/slack<br><br>--<br><br>#vectordb #vectordatabase #semanticsearch #openai #chatgpt #weaviate #knn</p>]]></content:encoded>
      <guid isPermaLink="false">149f1681-0940-45c3-81d0-91842b506340</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3720</itunes:duration>
    </item>
    <item>
      <title>The Future of Data is Now is the Future of Data (with Thomas Camp)</title>
      <link>https://zencastr.com/z/puX5Jn8L</link>
      <itunes:title>The Future of Data is Now is the Future of Data (with Thomas Camp)</itunes:title>
      <itunes:summary>Real-time data is gradually becoming a standard requirement in systems design. Our customers are beginning to demand it, our colleagues in other departments are starting to expect it. Whether you&apos;re letting people book a taxi, recommending their next binge-watch, or delivering business reports to management, faster data is just obviously better. Or is it?

Does real-time data matter everywhere, or does it just have sweet spots in some sectors and some use-cases? Is it a cost-benefit question - is the idea great in theory, but still too hard to adopt in practice? Would everyone be streaming their data live if streaming their data live was easier? If the future of data is, &quot;now, not later,&quot; then what&apos;s holding that future back?

In this week&apos;s Developer Voices we talk to Thomas Camp of Ably, and chew through the use-cases, software stacks, and education needed to speed up the way we process data. We consider everything from the front-end to the back, from user experience to business needs, and from greenfield projects to incrementally adapting existing systems.

If you&apos;re wondering what all the batch vs. streaming fuss is about, or you want to know how you can drag the industry there sooner, we have some answers. It&apos;ll only take an hour. 😉

--

Thomas on LinkedIn: https://www.linkedin.com/in/thomascamp333/
Ably: https://ably.com/
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 11 Oct 2023 15:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="88220205" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/652687fe76c81c94d23cfc08/size/88220205/audio-files/619e48a9649c44004c5a44e8/4459e79b-afd7-4a3d-9be6-01ae6d8e0d44.mp3"/>
      <description><![CDATA[<p>Real-time data is gradually becoming a standard requirement in systems design. Our customers are beginning to demand it, our colleagues in other departments are starting to expect it. Whether you’re letting people book a taxi, recommending their next binge-watch, or delivering business reports to management, faster data is just obviously better. Or is it?</p><p>Does real-time data matter everywhere, or does it just have sweet spots in some sectors and some use-cases? Is it a cost-benefit question - is the idea great in theory, but still too hard to adopt in practice? Would everyone be streaming their data live if streaming their data live was easier? If the future of data is, “now, not later,” then what’s holding that future back?</p><p>In this week’s Developer Voices we talk to Thomas Camp of Ably, and chew through the use-cases, software stacks, and education needed to speed up the way we process data. We consider everything from the front-end to the back, from user experience to business needs, and from greenfield projects to incrementally adapting existing systems.</p><p>If you’re wondering what all the batch vs. streaming fuss is about, or you want to know how you can drag the industry there sooner, we have some answers. It’ll only take an hour. 😉</p><p>--</p><p>Thomas on LinkedIn: <a href="https://www.linkedin.com/in/thomascamp333/">https://www.linkedin.com/in/thomascamp333/</a><br>Ably: https://ably.com/<br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p>]]></description>
      <content:encoded><![CDATA[<p>Real-time data is gradually becoming a standard requirement in systems design. Our customers are beginning to demand it, our colleagues in other departments are starting to expect it. Whether you’re letting people book a taxi, recommending their next binge-watch, or delivering business reports to management, faster data is just obviously better. Or is it?</p><p>Does real-time data matter everywhere, or does it just have sweet spots in some sectors and some use-cases? Is it a cost-benefit question - is the idea great in theory, but still too hard to adopt in practice? Would everyone be streaming their data live if streaming their data live was easier? If the future of data is, “now, not later,” then what’s holding that future back?</p><p>In this week’s Developer Voices we talk to Thomas Camp of Ably, and chew through the use-cases, software stacks, and education needed to speed up the way we process data. We consider everything from the front-end to the back, from user experience to business needs, and from greenfield projects to incrementally adapting existing systems.</p><p>If you’re wondering what all the batch vs. streaming fuss is about, or you want to know how you can drag the industry there sooner, we have some answers. It’ll only take an hour. 😉</p><p>--</p><p>Thomas on LinkedIn: <a href="https://www.linkedin.com/in/thomascamp333/">https://www.linkedin.com/in/thomascamp333/</a><br>Ably: https://ably.com/<br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p>]]></content:encoded>
      <guid isPermaLink="false">be071265-1f02-486b-8da1-30aa8c5007a3</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3675</itunes:duration>
    </item>
    <item>
      <title>Databases, Ambitions, and a Testing Silver Bullet? (With Joran Dirk Greef)</title>
      <link>https://zencastr.com/z/Bu3GxWA2</link>
      <itunes:title>Databases, Ambitions, and a Testing Silver Bullet? (With Joran Dirk Greef)</itunes:title>
      <itunes:summary>How far would you go to get the kind of database you want? How deep into the stack would you dive to re-architect a system for the kind of performance, reliability and scale you believe in? Today&apos;s guest has decided to go all in, as he&apos;s tackling the database problem from the fsync up.

In this week&apos;s Developer Voices we talk to Joran Dirk Greef, whose ambitions—combined with the lacklustre performance of his project&apos;s payment system—have led him to build a new database called TigerBeetle, that tackles some meaty problems. They&apos;re attempting to build a database that can be durable in the face of fsync-corner cases, highly available in the face of all kinds of hidden network problems, and performant enough to outpace existing financial systems. And on top of all those goals, they&apos;re doing it with an interesting new language you may not have heard of - Zig.

What makes him want to take on this big a challenge? What problems keep him awake at night? And what is he doing to turn all that ambition into an achievable launch strategy? Listen on and find out…

–

TigerBeetle on Twitter: https://twitter.com/TigerBeetleDB
TigerBeetle on YouTube: https://www.youtube.com/channel/UC3TlyQ3h6lC_jSWust2leGg
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/
Joran&apos;s QCon &apos;23 Talk: https://www.youtube.com/channel/UC3TlyQ3h6lC_jSWust2leGg
Viewstamped Replication Revisited (paper): https://pmg.csail.mit.edu/papers/vr-revisited.pdf
Github Test Cases for Journal recovery code: https://github.com/tigerbeetle/tigerbeetle/blob/b4dd441502894cbe9d48cb90ff0bc6a12c378591/src/vsr/journal.zig#L1181-L1213MySQL transactions per second vs fsyncs per second: https://sirupsen.com/napkin/problem-10-mysql-transactions-per-second</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 04 Oct 2023 15:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="96020973" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/651c94fc9f69fa4004f303c4/size/96020973/audio-files/619e48a9649c44004c5a44e8/cde8ad9e-7c05-4b45-9b5d-b267b260e648.mp3"/>
      <description><![CDATA[<p>How far would you go to get the kind of database you want? How deep into the stack would you dive to re-architect a system for the kind of performance, reliability and scale you believe in? Today's guest has decided to go all in, as he’s tackling the database problem from the fsync up. <br><br>In this week’s Developer Voices we talk to Joran Dirk Greef, whose ambitions—combined with the lacklustre performance of his project's payment system—have led him to build a new database called TigerBeetle, that tackles some meaty problems. They’re attempting to build a database that can be durable in the face of fsync-corner cases, highly available in the face of all kinds of hidden network problems, and performant enough to outpace existing financial systems. And on top of all those goals, they’re doing it with an interesting new language you may not have heard of - Zig.<br><br>What makes him want to take on this big a challenge? What problems keep him awake at night? And what is he doing to turn all that ambition into an achievable launch strategy? Listen on and find out…<br><br>–<br><br>TigerBeetle on Twitter: https://twitter.com/TigerBeetleDB<br>TigerBeetle on YouTube: https://www.youtube.com/channel/UC3TlyQ3h6lC_jSWust2leGg<br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/<br>Joran’s QCon ‘23 Talk: https://www.youtube.com/channel/UC3TlyQ3h6lC_jSWust2leGg<br>Viewstamped Replication Revisited (paper): https://pmg.csail.mit.edu/papers/vr-revisited.pdf<br>Github Test Cases for Journal recovery code: https://github.com/tigerbeetle/tigerbeetle/blob/b4dd441502894cbe9d48cb90ff0bc6a12c378591/src/vsr/journal.zig#L1181-L1213MySQL transactions per second vs fsyncs per second: https://sirupsen.com/napkin/problem-10-mysql-transactions-per-second</p>]]></description>
      <content:encoded><![CDATA[<p>How far would you go to get the kind of database you want? How deep into the stack would you dive to re-architect a system for the kind of performance, reliability and scale you believe in? Today's guest has decided to go all in, as he’s tackling the database problem from the fsync up. <br><br>In this week’s Developer Voices we talk to Joran Dirk Greef, whose ambitions—combined with the lacklustre performance of his project's payment system—have led him to build a new database called TigerBeetle, that tackles some meaty problems. They’re attempting to build a database that can be durable in the face of fsync-corner cases, highly available in the face of all kinds of hidden network problems, and performant enough to outpace existing financial systems. And on top of all those goals, they’re doing it with an interesting new language you may not have heard of - Zig.<br><br>What makes him want to take on this big a challenge? What problems keep him awake at night? And what is he doing to turn all that ambition into an achievable launch strategy? Listen on and find out…<br><br>–<br><br>TigerBeetle on Twitter: https://twitter.com/TigerBeetleDB<br>TigerBeetle on YouTube: https://www.youtube.com/channel/UC3TlyQ3h6lC_jSWust2leGg<br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/<br>Joran’s QCon ‘23 Talk: https://www.youtube.com/channel/UC3TlyQ3h6lC_jSWust2leGg<br>Viewstamped Replication Revisited (paper): https://pmg.csail.mit.edu/papers/vr-revisited.pdf<br>Github Test Cases for Journal recovery code: https://github.com/tigerbeetle/tigerbeetle/blob/b4dd441502894cbe9d48cb90ff0bc6a12c378591/src/vsr/journal.zig#L1181-L1213MySQL transactions per second vs fsyncs per second: https://sirupsen.com/napkin/problem-10-mysql-transactions-per-second</p>]]></content:encoded>
      <guid isPermaLink="false">1fe8a937-b364-437f-8c49-0ae46c0c8e7a</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4000</itunes:duration>
    </item>
    <item>
      <title>Starting A Tech Business. Again. And Again. And Again. (with Michael Drogalis)</title>
      <link>https://zencastr.com/z/LB1PrXIE</link>
      <itunes:title>Starting A Tech Business. Again. And Again. And Again. (with Michael Drogalis)</itunes:title>
      <itunes:summary>Ever wanted to start a tech business? Michael Drogalis has done it successfully in the past, and now he&apos;s trying again (and again and…) as he makes a very public attempt to start 4 new tech businesses in the next 4 quarters.

He&apos;d sound completely mad, except he&apos;s got form: His last Kafka-based company got bought out by a tech giant, giving him enough of a safety net to try something new. And for his new approach, he&apos;s doing the exact opposite of &apos;stealth mode&apos;. He&apos;s publishing every step of his 4-by-4 challenge, wins and losses, for all to see. It&apos;s entrepreneurship for the Reality TV era. 😁

In an unusually vulnerable episode of Developer Voices, we talk about everything from solo software development and marketing strategies, to the inner struggle of starting out on your own, with no guarantees that the world will care. And this time with everyone watching.

--

Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/
Follow Michael&apos;s journey: https://michaeldrogalis.substack.com/
Michael on LinkedIn: https://www.linkedin.com/in/michael-drogalis-01029924/
Michael on Twitter: https://twitter.com/MichaelDrogalis
Steal Like An Artist by Austin Kleon: https://austinkleon.com/steal/</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 27 Sep 2023 15:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="77857965" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/651346a98864fa246a7bfb02/size/77857965/audio-files/619e48a9649c44004c5a44e8/39f1f49b-21c9-4bad-8fd5-b4e4b2476b73.mp3"/>
      <description><![CDATA[<p>Ever wanted to start a tech business? Michael Drogalis has done it successfully in the past, and now he’s trying again (and again and…) as he makes a very public attempt to start 4 new tech businesses in the next 4 quarters.<br><br>He’d sound completely mad, except he’s got form: His last Kafka-based company got bought out by a tech giant, giving him enough of a safety net to try something new. And for his new approach, he’s doing the exact opposite of ‘stealth mode’. He’s publishing every step of his 4-by-4 challenge, wins and losses, for all to see. It's entrepreneurship for the Reality TV era. 😁<br><br>In an unusually vulnerable episode of Developer Voices, we talk about everything from solo software development and marketing strategies, to the inner struggle of starting out on your own, with no guarantees that the world will care. And this time with everyone watching. <br><br>-- <br><br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/<br>Follow Michael’s journey: https://michaeldrogalis.substack.com/<br>Michael on LinkedIn: https://www.linkedin.com/in/michael-drogalis-01029924/<br>Michael on Twitter: https://twitter.com/MichaelDrogalis<br>Steal Like An Artist by Austin Kleon: https://austinkleon.com/steal/</p>]]></description>
      <content:encoded><![CDATA[<p>Ever wanted to start a tech business? Michael Drogalis has done it successfully in the past, and now he’s trying again (and again and…) as he makes a very public attempt to start 4 new tech businesses in the next 4 quarters.<br><br>He’d sound completely mad, except he’s got form: His last Kafka-based company got bought out by a tech giant, giving him enough of a safety net to try something new. And for his new approach, he’s doing the exact opposite of ‘stealth mode’. He’s publishing every step of his 4-by-4 challenge, wins and losses, for all to see. It's entrepreneurship for the Reality TV era. 😁<br><br>In an unusually vulnerable episode of Developer Voices, we talk about everything from solo software development and marketing strategies, to the inner struggle of starting out on your own, with no guarantees that the world will care. And this time with everyone watching. <br><br>-- <br><br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/<br>Follow Michael’s journey: https://michaeldrogalis.substack.com/<br>Michael on LinkedIn: https://www.linkedin.com/in/michael-drogalis-01029924/<br>Michael on Twitter: https://twitter.com/MichaelDrogalis<br>Steal Like An Artist by Austin Kleon: https://austinkleon.com/steal/</p>]]></content:encoded>
      <guid isPermaLink="false">337842cd-c4a9-4f2f-b3c9-a650551afa2c</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3244</itunes:duration>
    </item>
    <item>
      <title>How Do You Assemble a Complete Software System? (with Ben Gamble)</title>
      <link>https://zencastr.com/z/AXXyi8bv</link>
      <itunes:title>How Do You Assemble a Complete Software System? (with Ben Gamble)</itunes:title>
      <itunes:summary>Ask any software developer about their favourite stack, and they&apos;ll probably have strong opinions. (They might even have a snappy acronym for it, like LAMP or JAM or...) But if you ask any business about their stack, things aren&apos;t so clear. They&apos;ll probably tell you the key components, and then add a laundry list of extra parts that got glued on later. The reality is, assembling large systems gets complicated. And with more and more options coming out every year, that potential complexity is only growing. These days, a good software developer must also be part researcher, and part explorer. 

So this week we&apos;re going to survey the landscape, and head out on the hunt for workable architectures. And joining us to do it is Ben Gamble. He&apos;s worked in fields as diverse as video games, enterprise software and AR headsets, and these days works for an Everything As A Service company helping people find and assemble the missing pieces their system needs. Who better to guide us through the software landscape? 

If you&apos;ve ever worried that your system is too complicated, or is missing important parts, or you&apos;re just yearning for an architecture that feels more cohesive and less like a box of parts, come exploring with us.

--

Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/
Ben on Twitter: https://twitter.com/BenGamble7
The Schemaverse: https://schemaverse.com/
Nerdsniping: https://xkcd.com/356/
Tremor: https://www.tremor.rs/
Anna McDonald&apos;s talk on Completion Criteria: https://www.confluent.io/events/kafka-summit-london-2023/pragmatic-patterns-and-pitfalls-for-event-streaming-in-brownfield/
Temporal.IO: https://temporal.io/</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 20 Sep 2023 15:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="101469933" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/65088f6b27f9512d5af8bcd8/size/101469933/audio-files/619e48a9649c44004c5a44e8/6b9e2e74-4c4b-42ac-b6e2-4224f36848d4.mp3"/>
      <description><![CDATA[<p>Ask any software developer about their favourite stack, and they'll probably have strong opinions. (They might even have a snappy acronym for it, like LAMP or JAM or...) But if you ask any business about their stack, things aren’t so clear. They'll probably tell you the key components, and then add a laundry list of extra parts that got glued on later. The reality is, assembling large systems gets complicated. And with more and more options coming out every year, that potential complexity is only growing. These days, a good software developer must also be part researcher, and part explorer.&nbsp;</p><p>So this week we're going to survey the landscape, and head out on the hunt for workable architectures. And joining us to do it is Ben Gamble. He's worked in fields as diverse as video games, enterprise software and AR headsets, and these days works for an Everything As A Service company helping people find and assemble the missing pieces their system needs. Who better to guide us through the software landscape?&nbsp;</p><p>If you've ever worried that your system is too complicated, or is missing important parts, or you're just yearning for an architecture that feels more cohesive and less like a box of parts, come exploring with us.</p><p>--</p><p>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/<br>Ben on Twitter: https://twitter.com/BenGamble7<br>The Schemaverse: https://schemaverse.com/<br>Nerdsniping: https://xkcd.com/356/<br>Tremor: https://www.tremor.rs/<br>Anna McDonald’s talk on Completion Criteria: https://www.confluent.io/events/kafka-summit-london-2023/pragmatic-patterns-and-pitfalls-for-event-streaming-in-brownfield/<br>Temporal.IO: https://temporal.io/</p>]]></description>
      <content:encoded><![CDATA[<p>Ask any software developer about their favourite stack, and they'll probably have strong opinions. (They might even have a snappy acronym for it, like LAMP or JAM or...) But if you ask any business about their stack, things aren’t so clear. They'll probably tell you the key components, and then add a laundry list of extra parts that got glued on later. The reality is, assembling large systems gets complicated. And with more and more options coming out every year, that potential complexity is only growing. These days, a good software developer must also be part researcher, and part explorer.&nbsp;</p><p>So this week we're going to survey the landscape, and head out on the hunt for workable architectures. And joining us to do it is Ben Gamble. He's worked in fields as diverse as video games, enterprise software and AR headsets, and these days works for an Everything As A Service company helping people find and assemble the missing pieces their system needs. Who better to guide us through the software landscape?&nbsp;</p><p>If you've ever worried that your system is too complicated, or is missing important parts, or you're just yearning for an architecture that feels more cohesive and less like a box of parts, come exploring with us.</p><p>--</p><p>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/<br>Ben on Twitter: https://twitter.com/BenGamble7<br>The Schemaverse: https://schemaverse.com/<br>Nerdsniping: https://xkcd.com/356/<br>Tremor: https://www.tremor.rs/<br>Anna McDonald’s talk on Completion Criteria: https://www.confluent.io/events/kafka-summit-london-2023/pragmatic-patterns-and-pitfalls-for-event-streaming-in-brownfield/<br>Temporal.IO: https://temporal.io/</p>]]></content:encoded>
      <guid isPermaLink="false">a1d5b4f8-8a1a-466d-9817-690a9ac43952</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4227</itunes:duration>
    </item>
    <item>
      <title>Clickhouse: Faster Queries, Faster Answers (with Alasdair Brown)</title>
      <link>https://zencastr.com/z/RN9C68HL</link>
      <itunes:title>Clickhouse: Faster Queries, Faster Answers (with Alasdair Brown)</itunes:title>
      <itunes:summary>In modern systems, the amount of data keeps getting larger, and the time available keeps getting shorter. So it&apos;s almost inevitable that we&apos;re augmenting our general-purpose databases with dedicated analytics databases.

This week we dive into the world of OLAP with a thorough look at Clickhouse, a high-performance, columnar database designed to &quot;query billions of rows in microseconds.&quot;

Alasdair Brown joins us to discuss what Clickhouse is, how it performs queries so quickly, and where it fits into a wider system. We talk about its origins as a Google Analytics-like, and how it&apos;s grown into one of the most popular OLAP databases around.

There&apos;s a lot of ground to cover, and a lot of questions to ask, all in the service of faster answers...

--

Alasdair&apos;s Blog: alasdairb.com
Alasdair on Threads: https://www.threads.net/@sdairsab
Alasdair on LinkedIn https://www.linkedin.com/in/alasdair-brown
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/
Clickhouse: https://clickhouse.com/
Tinybird: https://www.tinybird.co/
Birdhouse in your Soul: https://youtu.be/vn_or9gEB6g
</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 13 Sep 2023 15:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="108081261" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/650055b3db8f7e4153e247b3/size/108081261/audio-files/619e48a9649c44004c5a44e8/7b4ea819-7265-40f5-8bdd-2cd81912c91d.mp3"/>
      <description><![CDATA[<p>In modern systems, the amount of data keeps getting larger, and the time available keeps getting shorter. So it's almost inevitable that we're augmenting our general-purpose databases with dedicated analytics databases.</p><p>This week we dive into the world of OLAP with a thorough look at Clickhouse, a high-performance, columnar database designed to "query billions of rows in microseconds."<br><br>Alasdair Brown joins us to discuss what Clickhouse is, how it performs queries so quickly, and where it fits into a wider system. We talk about its origins as a Google Analytics-like, and how it's grown into one of the most popular OLAP databases around.</p><p>There's a lot of ground to cover, and a lot of questions to ask, all in the service of faster answers...</p><p>--</p><p>Alasdair's Blog: alasdairb.com<br>Alasdair on Threads: https://www.threads.net/@sdairsab<br>Alasdair on LinkedIn https://www.linkedin.com/in/alasdair-brown<br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a><br>Clickhouse: https://clickhouse.com/<br>Tinybird: <a href="https://www.tinybird.co/">https://www.tinybird.co/</a><br>Birdhouse in your Soul: <a href="https://youtu.be/vn_or9gEB6g">https://youtu.be/vn_or9gEB6g</a><br></p>]]></description>
      <content:encoded><![CDATA[<p>In modern systems, the amount of data keeps getting larger, and the time available keeps getting shorter. So it's almost inevitable that we're augmenting our general-purpose databases with dedicated analytics databases.</p><p>This week we dive into the world of OLAP with a thorough look at Clickhouse, a high-performance, columnar database designed to "query billions of rows in microseconds."<br><br>Alasdair Brown joins us to discuss what Clickhouse is, how it performs queries so quickly, and where it fits into a wider system. We talk about its origins as a Google Analytics-like, and how it's grown into one of the most popular OLAP databases around.</p><p>There's a lot of ground to cover, and a lot of questions to ask, all in the service of faster answers...</p><p>--</p><p>Alasdair's Blog: alasdairb.com<br>Alasdair on Threads: https://www.threads.net/@sdairsab<br>Alasdair on LinkedIn https://www.linkedin.com/in/alasdair-brown<br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a><br>Clickhouse: https://clickhouse.com/<br>Tinybird: <a href="https://www.tinybird.co/">https://www.tinybird.co/</a><br>Birdhouse in your Soul: <a href="https://youtu.be/vn_or9gEB6g">https://youtu.be/vn_or9gEB6g</a><br></p>]]></content:encoded>
      <guid isPermaLink="false">48abf3ea-b5dd-4edc-9374-f1e455c03bb9</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/96973d74-2516-4e2d-9d94-649aee1838f7.jpg"/>
      <itunes:duration>4503</itunes:duration>
    </item>
    <item>
      <title>What problems does Apache Kafka Solve? (with Neil Buesing)</title>
      <link>https://zencastr.com/z/XzypSwLx</link>
      <itunes:title>What problems does Apache Kafka Solve? (with Neil Buesing)</itunes:title>
      <itunes:summary>Neil Buesing is a seasoned Apache Kafka® user, and a respected voice from the Kafka community who specialises in helping companies make the best use of Kafka. And that makes him the ideal person to ask the $64,000 question: What problems can Kafka actually solve for me? Because Kafka&apos;s definitely interesting, and it can be fun, but to earn a place in the toolbox it has to make life easier. 

In answering that question, Neil covers a tonne of ground, from queuing and quasi-databases, transitioning from batch to real-time, and solving general software integration headaches. 

If you have data problems, big or small, join us to figure out if Kafka is the answer. 

-- 

Kinetic Edge: https://www.kineticedge.io
Neil on Twitter: https://twitter.com/nbuesing
Neil on LinkedIn: https://www.linkedin.com/in/nbuesing/
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/

Building an Enterprise Eventing Framework (Conference Talk): https://www.confluent.io/en-gb/kafka-summit-san-francisco-2019/building-an-enterprise-eventing-framework/
Synchronous Kafka (Conference Talk): https://www.confluent.io/resources/kafka-summit-2020/synchronous-commands-over-apache-kafka/
Dev Local: https://github.com/kineticedge/dev-local
KIP-714 - Client metrics and observability: https://cwiki.apache.org/confluence/display/KAFKA/KIP-714%3A+Client+metrics+and+observability</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 06 Sep 2023 15:14:18 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="89680941" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/64f884e2ded667653af154f1/size/89680941/audio-files/619e48a9649c44004c5a44e8/925781c6-21f7-49c7-853d-aafe74e5c0f3.mp3"/>
      <description><![CDATA[<p>Neil Buesing is a seasoned Apache Kafka® user, and a respected voice from the Kafka community who specialises in helping companies make the best use of Kafka. And that makes him the ideal person to ask the $64,000 question: What problems can Kafka actually solve for me? Because Kafka's definitely interesting, and it can be fun, but to earn a place in the toolbox it has to make life easier.&nbsp;</p><p>In answering that question, Neil covers a tonne of ground, from queuing and quasi-databases, transitioning from batch to real-time, and solving general software integration headaches.&nbsp;</p><p>If you have data problems, big or small, join us to figure out if Kafka is the answer.&nbsp;</p><p>--&nbsp;</p><p>Kinetic Edge: https://www.kineticedge.io<br>Neil on Twitter: https://twitter.com/nbuesing<br>Neil on LinkedIn: https://www.linkedin.com/in/nbuesing/<br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/<br><br>Building an Enterprise Eventing Framework (Conference Talk): https://www.confluent.io/en-gb/kafka-summit-san-francisco-2019/building-an-enterprise-eventing-framework/<br>Synchronous Kafka (Conference Talk): https://www.confluent.io/resources/kafka-summit-2020/synchronous-commands-over-apache-kafka/<br>Dev Local: https://github.com/kineticedge/dev-local<br>KIP-714 - Client metrics and observability: https://cwiki.apache.org/confluence/display/KAFKA/KIP-714%3A+Client+metrics+and+observability</p>]]></description>
      <content:encoded><![CDATA[<p>Neil Buesing is a seasoned Apache Kafka® user, and a respected voice from the Kafka community who specialises in helping companies make the best use of Kafka. And that makes him the ideal person to ask the $64,000 question: What problems can Kafka actually solve for me? Because Kafka's definitely interesting, and it can be fun, but to earn a place in the toolbox it has to make life easier.&nbsp;</p><p>In answering that question, Neil covers a tonne of ground, from queuing and quasi-databases, transitioning from batch to real-time, and solving general software integration headaches.&nbsp;</p><p>If you have data problems, big or small, join us to figure out if Kafka is the answer.&nbsp;</p><p>--&nbsp;</p><p>Kinetic Edge: https://www.kineticedge.io<br>Neil on Twitter: https://twitter.com/nbuesing<br>Neil on LinkedIn: https://www.linkedin.com/in/nbuesing/<br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/<br><br>Building an Enterprise Eventing Framework (Conference Talk): https://www.confluent.io/en-gb/kafka-summit-san-francisco-2019/building-an-enterprise-eventing-framework/<br>Synchronous Kafka (Conference Talk): https://www.confluent.io/resources/kafka-summit-2020/synchronous-commands-over-apache-kafka/<br>Dev Local: https://github.com/kineticedge/dev-local<br>KIP-714 - Client metrics and observability: https://cwiki.apache.org/confluence/display/KAFKA/KIP-714%3A+Client+metrics+and+observability</p>]]></content:encoded>
      <guid isPermaLink="false">d05098c0-bafc-44a5-95eb-058994f9fc47</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/96973d74-2516-4e2d-9d94-649aee1838f7.jpg"/>
      <itunes:duration>3736</itunes:duration>
    </item>
    <item>
      <title>DIY Consensus: Crafting Your Own Distributed Code (with Benjamin Bengfort)</title>
      <link>https://zencastr.com/z/WfL6REZg</link>
      <itunes:title>DIY Consensus: Crafting Your Own Distributed Code (with Benjamin Bengfort)</itunes:title>
      <itunes:summary>How do distributed systems work? If you&apos;ve got a database spread over three servers, how do they elect a leader? How does that change when we spread those machines out across data centers, situated around the globe? Do we even need to understand how it works, or can we relegate those problems to an off the shelf tool like Zookeeper?

Joining me this week is Distributed Systems Doctor—Benjamin Bengfort—for a deep dive into consensus algorithms. We start off by discussing how much of &quot;the clustering problem&quot; is your problem, and how much can be handled by a library. We go through many of the constraints and tradeoffs that you need to understand either way. And we eventually reach Benjamin&apos;s surprising message - maybe the time is ripe to roll your own. Should we be writing our own bespoke Raft implementations? And if so, how hard would that be? What guidance can he offer us? 

Somewhere in the recording of this episode, I decided I want to sit down and try to implement a leader election protocol. Maybe you will too. And if not, you&apos;ll at least have a better appreciation for what it takes. Distributed systems used to be rocket science, but they&apos;re becoming deployment as usual. This episode should help us all to keep up!

--

KubeCon talk on the FCD bug: https://kccncna2022.sched.com/event/182N9/lessons-learned-from-etcd-the-data-inconsistency-issues-marek-siarkowicz-google-benjamin-wang-vmware
The Raft paper by Diego Ongaro and John Ousterhout: https://raft.github.io/raft.pdf
The EPaxos Algorithm: https://www.cs.cmu.edu/~dga/papers/epaxos-sosp2013.pdf
LevelDB: https://github.com/google/leveldb

Benjamin on Twitter: https://twitter.com/bbengfort
Benjamin on LinkedIn: https://www.linkedin.com/in/bbengfort
Benjamin on GitHub: https://github.com/bbengfort
Rotational Labs: https://rotational.io (check out the blog!)
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 30 Aug 2023 15:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="97296813" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/64ef34171a52c637f24a68f0/size/97296813/audio-files/619e48a9649c44004c5a44e8/6d124741-fa27-47d3-adb6-d6a63bafe5b9.mp3"/>
      <description><![CDATA[<p>How do distributed systems work? If you’ve got a database spread over three servers, how do they elect a leader? How does that change when we spread those machines out across data centers, situated around the globe? Do we even need to understand how it works, or can we relegate those problems to an off the shelf tool like Zookeeper?</p><p>Joining me this week is Distributed Systems Doctor—Benjamin Bengfort—for a deep dive into consensus algorithms. We start off by discussing how much of “the clustering problem” is your problem, and how much can be handled by a library. We go through many of the constraints and tradeoffs that you need to understand either way. And we eventually reach Benjamin’s surprising message - maybe the time is ripe to roll your own. Should we be writing our own bespoke Raft implementations? And if so, how hard would that be? What guidance can he offer us?&nbsp;</p><p>Somewhere in the recording of this episode, I decided I want to sit down and try to implement a leader election protocol. Maybe you will too. And if not, you’ll at least have a better appreciation for what it takes. Distributed systems used to be rocket science, but they’re becoming deployment as usual. This episode should help us all to keep up!</p><p>--</p><p>KubeCon talk on the FCD bug: https://kccncna2022.sched.com/event/182N9/lessons-learned-from-etcd-the-data-inconsistency-issues-marek-siarkowicz-google-benjamin-wang-vmware<br>The Raft paper by Diego Ongaro and John Ousterhout: https://raft.github.io/raft.pdf<br>The EPaxos Algorithm: https://www.cs.cmu.edu/~dga/papers/epaxos-sosp2013.pdf<br>LevelDB: https://github.com/google/leveldb</p><p>Benjamin on Twitter: https://twitter.com/bbengfort<br>Benjamin on LinkedIn: https://www.linkedin.com/in/bbengfort<br>Benjamin on GitHub: https://github.com/bbengfort<br>Rotational Labs: https://rotational.io (check out the blog!)<br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p>]]></description>
      <content:encoded><![CDATA[<p>How do distributed systems work? If you’ve got a database spread over three servers, how do they elect a leader? How does that change when we spread those machines out across data centers, situated around the globe? Do we even need to understand how it works, or can we relegate those problems to an off the shelf tool like Zookeeper?</p><p>Joining me this week is Distributed Systems Doctor—Benjamin Bengfort—for a deep dive into consensus algorithms. We start off by discussing how much of “the clustering problem” is your problem, and how much can be handled by a library. We go through many of the constraints and tradeoffs that you need to understand either way. And we eventually reach Benjamin’s surprising message - maybe the time is ripe to roll your own. Should we be writing our own bespoke Raft implementations? And if so, how hard would that be? What guidance can he offer us?&nbsp;</p><p>Somewhere in the recording of this episode, I decided I want to sit down and try to implement a leader election protocol. Maybe you will too. And if not, you’ll at least have a better appreciation for what it takes. Distributed systems used to be rocket science, but they’re becoming deployment as usual. This episode should help us all to keep up!</p><p>--</p><p>KubeCon talk on the FCD bug: https://kccncna2022.sched.com/event/182N9/lessons-learned-from-etcd-the-data-inconsistency-issues-marek-siarkowicz-google-benjamin-wang-vmware<br>The Raft paper by Diego Ongaro and John Ousterhout: https://raft.github.io/raft.pdf<br>The EPaxos Algorithm: https://www.cs.cmu.edu/~dga/papers/epaxos-sosp2013.pdf<br>LevelDB: https://github.com/google/leveldb</p><p>Benjamin on Twitter: https://twitter.com/bbengfort<br>Benjamin on LinkedIn: https://www.linkedin.com/in/bbengfort<br>Benjamin on GitHub: https://github.com/bbengfort<br>Rotational Labs: https://rotational.io (check out the blog!)<br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p>]]></content:encoded>
      <guid isPermaLink="false">6fb9fcf3-fcc1-4da8-ae86-f06dea0b28bb</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>4054</itunes:duration>
    </item>
    <item>
      <title>Teaching, Guiding &amp; Inspiring The Next Generation of Programmers (with James Q. Quick)</title>
      <link>https://zencastr.com/z/nkQ2-e1T</link>
      <itunes:title>Teaching, Guiding &amp; Inspiring The Next Generation of Programmers (with James Q. Quick)</itunes:title>
      <itunes:summary>How do you get started as a programmer? And how do experienced programmers help them as they start their journey?

This week&apos;s guest is a developer-turned-teacher, James Q. Quick. A former coder and developer advocate, he&apos;s s been been working on tutorials, courses and bootcamps to teach aspiring developers how to get started with JavaScript. We talk about why people get into programming as a new career, what they need to succeed, and what James thinks is the best indicator of success.

We also discuss what&apos;s new and exciting in JavaScript, James&apos; favourite up &amp; coming libraries, and dive into the JavaScript vs. TypeScript debate.

James&apos;s YouTube channel: https://www.youtube.com/c/jamesqquick
James&apos;s website: https://www.jamesqquick.com/
Astro website builder: https://astro.build/
James&apos; Astro course: https://astrocourse.dev/
Svelte framework: https://svelte.dev/
Vite build tool: https://vitejs.dev/

James on Twitter: https://twitter.com/jamesqquick
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 23 Aug 2023 14:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="77223213" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/64e4baae980d3bdf5f6cda6f/size/77223213/audio-files/619e48a9649c44004c5a44e8/f290a773-ee80-4f30-b3a5-25e67b7f751a.mp3"/>
      <description><![CDATA[<p>How do you get started as a programmer? And how do experienced programmers help them as they start their journey?</p><p>This week's guest is a developer-turned-teacher, James Q. Quick. A former coder and developer advocate, he's s been been working on tutorials, courses and bootcamps to teach aspiring developers how to get started with JavaScript. We talk about why people get into programming as a new career, what they need to succeed, and what James thinks is the best indicator of success.</p><p>We also discuss what's new and exciting in JavaScript, James' favourite up &amp; coming libraries, and dive into the JavaScript vs. TypeScript debate.</p><p>James’s YouTube channel: https://www.youtube.com/c/jamesqquick<br>James’s website: https://www.jamesqquick.com/<br>Astro website builder: https://astro.build/<br>James’ Astro course: https://astrocourse.dev/<br>Svelte framework: https://svelte.dev/<br>Vite build tool: https://vitejs.dev/</p><p>James on Twitter: https://twitter.com/jamesqquick<br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p>]]></description>
      <content:encoded><![CDATA[<p>How do you get started as a programmer? And how do experienced programmers help them as they start their journey?</p><p>This week's guest is a developer-turned-teacher, James Q. Quick. A former coder and developer advocate, he's s been been working on tutorials, courses and bootcamps to teach aspiring developers how to get started with JavaScript. We talk about why people get into programming as a new career, what they need to succeed, and what James thinks is the best indicator of success.</p><p>We also discuss what's new and exciting in JavaScript, James' favourite up &amp; coming libraries, and dive into the JavaScript vs. TypeScript debate.</p><p>James’s YouTube channel: https://www.youtube.com/c/jamesqquick<br>James’s website: https://www.jamesqquick.com/<br>Astro website builder: https://astro.build/<br>James’ Astro course: https://astrocourse.dev/<br>Svelte framework: https://svelte.dev/<br>Vite build tool: https://vitejs.dev/</p><p>James on Twitter: https://twitter.com/jamesqquick<br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p>]]></content:encoded>
      <guid isPermaLink="false">b1947039-6233-427d-921e-916ce66a02de</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3217</itunes:duration>
    </item>
    <item>
      <title>jOOQ - Crossing the Object-Relational Bridge (with Lukas Eder)</title>
      <link>https://zencastr.com/z/Brot3RM_</link>
      <itunes:title>jOOQ - Crossing the Object-Relational Bridge (with Lukas Eder)</itunes:title>
      <itunes:summary>Sooner or later, every programmer will have to cross the gap between their programming language and their database. It feels like it should be easy, but in practice it&apos;s always a much wider chasm than it seems, and every tool that bridges that gaps comes with its own strengths, weaknesses and opinions.

This week we take a look at a relatively new library for database access—jOOQ—by chatting with its author, Lukas Eder. This episode takes in the simple questions like syntax, the thornier ones like supporting multiple databases, and the deeply philosophical ones like how we even think about data and data-processing.

If you&apos;re a Java (or JVM) programmer, there&apos;s a new tool to learn here, and even if you&apos;re not there&apos;s food for thought and ideas to borrow for the next time you need to SELECT…

jOOQ: https://www.jooq.org/
YesQL: https://github.com/krisajenkins/yesql
Datomic: https://www.datomic.com/ [https://www.xtdb.com/]
XTDB: https://www.xtdb.com/
The Elm Architecture: https://guide.elm-lang.org/architecture/

Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 09 Aug 2023 15:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="71277741" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/64c2650137810272858750d0/size/71277741/audio-files/619e48a9649c44004c5a44e8/47802c9f-8791-44d4-96b5-a21a024fa001.mp3"/>
      <description><![CDATA[<p>Sooner or later, every programmer will have to cross the gap between their programming language and their database. It feels like it should be easy, but in practice it’s always a much wider chasm than it seems, and every tool that bridges that gaps comes with its own strengths, weaknesses and opinions.</p><p>This week we take a look at a relatively new library for database access—jOOQ—by chatting with its author, Lukas Eder. This episode takes in the simple questions like syntax, the thornier ones like supporting multiple databases, and the deeply philosophical ones like how we even think about data and data-processing.</p><p>If you’re a Java (or JVM) programmer, there’s a new tool to learn here, and even if you're not there’s food for thought and ideas to borrow for the next time you need to SELECT…</p><p>jOOQ: https://www.jooq.org/<br>YesQL: https://github.com/krisajenkins/yesql<br>Datomic: <a href="https://www.xtdb.com/">https://www.datomic.com/</a><br>XTDB: https://www.xtdb.com/<br>The Elm Architecture: https://guide.elm-lang.org/architecture/</p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p>]]></description>
      <content:encoded><![CDATA[<p>Sooner or later, every programmer will have to cross the gap between their programming language and their database. It feels like it should be easy, but in practice it’s always a much wider chasm than it seems, and every tool that bridges that gaps comes with its own strengths, weaknesses and opinions.</p><p>This week we take a look at a relatively new library for database access—jOOQ—by chatting with its author, Lukas Eder. This episode takes in the simple questions like syntax, the thornier ones like supporting multiple databases, and the deeply philosophical ones like how we even think about data and data-processing.</p><p>If you’re a Java (or JVM) programmer, there’s a new tool to learn here, and even if you're not there’s food for thought and ideas to borrow for the next time you need to SELECT…</p><p>jOOQ: https://www.jooq.org/<br>YesQL: https://github.com/krisajenkins/yesql<br>Datomic: <a href="https://www.xtdb.com/">https://www.datomic.com/</a><br>XTDB: https://www.xtdb.com/<br>The Elm Architecture: https://guide.elm-lang.org/architecture/</p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p>]]></content:encoded>
      <guid isPermaLink="false">0ec9668b-e8ec-4b57-ad87-745f98dca461</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/96973d74-2516-4e2d-9d94-649aee1838f7.jpg"/>
      <itunes:duration>2969</itunes:duration>
    </item>
    <item>
      <title>Inside the World of Competitive Coding (with Mathis Hammel)</title>
      <link>https://zencastr.com/z/ozgYSsgd</link>
      <itunes:title>Inside the World of Competitive Coding (with Mathis Hammel)</itunes:title>
      <itunes:summary>Whether you&apos;re trying to ace the coding interview, sharpen your programming skills or just have some fun learning new things, the world of competitive coding has something to offer you. Some people join with dreams of hitting the podium, and plenty of others are just competing to be their better selves.

Either way, Mathis Hammel is a veteran of the competitive coding scene and he&apos;s going to give us a view into that world, tell a few war stories and share some tips how you can play better, faster and stronger…

ICPC: https://icpc.global/
Advent of Code: https://adventofcode.com/
Advent of Code, Day 18, 2022: https://adventofcode.com/2022/day/18
Clash of Code: https://www.codingame.com/multiplayer/clashofcode
CodeForces: https://codeforces.com/
CodeWars: https://www.codewars.com/
HackerRank: https://www.hackerrank.com/


Mathis on Twitter: https://twitter.com/mathishammel
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 26 Jul 2023 14:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="80205165" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/64c11ae9ca9f5b5390a03c55/size/80205165/audio-files/619e48a9649c44004c5a44e8/ca26de54-02db-48cc-b185-648cc3074b25.mp3"/>
      <description><![CDATA[<p>Whether you’re trying to ace the coding interview, sharpen your programming skills or just have some fun learning new things, the world of competitive coding has something to offer you. Some people join with dreams of hitting the podium, and plenty of others are just competing to be their better selves.</p><p>Either way, Mathis Hammel is a veteran of the competitive coding scene and he’s going to give us a view into that world, tell a few war stories and share some tips how you can play better, faster and stronger…</p><p>ICPC: https://icpc.global/<br>Advent of Code: https://adventofcode.com/<br>Advent of Code, Day 18, 2022: <a href="https://adventofcode.com/2022/day/18">https://adventofcode.com/2022/day/18</a><br>Clash of Code: <a href="https://www.codingame.com/multiplayer/clashofcode">https://www.codingame.com/multiplayer/clashofcode</a><br>CodeForces: <a href="https://codeforces.com/">https://codeforces.com/</a><br>CodeWars: https://www.codewars.com/<br>HackerRank: <a href="https://www.hackerrank.com/">https://www.hackerrank.com/</a><br></p><p>Mathis on Twitter: https://twitter.com/mathishammel<br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p>]]></description>
      <content:encoded><![CDATA[<p>Whether you’re trying to ace the coding interview, sharpen your programming skills or just have some fun learning new things, the world of competitive coding has something to offer you. Some people join with dreams of hitting the podium, and plenty of others are just competing to be their better selves.</p><p>Either way, Mathis Hammel is a veteran of the competitive coding scene and he’s going to give us a view into that world, tell a few war stories and share some tips how you can play better, faster and stronger…</p><p>ICPC: https://icpc.global/<br>Advent of Code: https://adventofcode.com/<br>Advent of Code, Day 18, 2022: <a href="https://adventofcode.com/2022/day/18">https://adventofcode.com/2022/day/18</a><br>Clash of Code: <a href="https://www.codingame.com/multiplayer/clashofcode">https://www.codingame.com/multiplayer/clashofcode</a><br>CodeForces: <a href="https://codeforces.com/">https://codeforces.com/</a><br>CodeWars: https://www.codewars.com/<br>HackerRank: <a href="https://www.hackerrank.com/">https://www.hackerrank.com/</a><br></p><p>Mathis on Twitter: https://twitter.com/mathishammel<br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p>]]></content:encoded>
      <guid isPermaLink="false">e4e349ac-98b3-4096-bccf-bc5bf512dfe9</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3341</itunes:duration>
    </item>
    <item>
      <title>Unison: A Programming Language for Distributed Computing</title>
      <link>https://zencastr.com/z/SUIawwwC</link>
      <itunes:title>Unison: A Programming Language for Distributed Computing</itunes:title>
      <itunes:summary>&quot;Software development has not caught up with the internet age.&quot; So says this week&apos;s guest, Rúnar Bjarnason. But what does that mean? What would a programming language for the internet age look like?

Rúnar&apos;s answer is Unison. A language that completely rethinks the way distributing computing can work, from the source code up. Borrowing some key ideas from git, it challenges the way we think about code-sharing, compilation, versioning and more. 

--

Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/
Rúnar on Twitter: https://twitter.com/runarorama
Rúnar&apos;s book, Function Programming in Scala: https://amzn.to/46I9jew
Unison website: https://unison-lang.org

Complete and Easy Bidirectional Typechecking for Higher-Rank Polymorphism (pdf): https://www.cl.cam.ac.uk/~nk480/bidir.pdf
Do Be Do Be Do (pdf): https://arxiv.org/pdf/1611.09259.pdf
Rúnar&apos;s Øredev conference talk: https://youtu.be/EgIVzOobD48

Cloud icons created by Freepik - Flaticon: https://www.flaticon.com/free-icons/cloud
Computer icons created by xnimrodx - Flaticon: https://www.flaticon.com/free-icons/computer</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 19 Jul 2023 14:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="89457453" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/64b564a5ffbb585573f0cc3d/size/89457453/audio-files/619e48a9649c44004c5a44e8/0e59d03c-d7e7-4086-b8e3-fac8365bcfbe.mp3"/>
      <description><![CDATA[<p>“Software development has not caught up with the internet age.” So says this week’s guest, Rúnar Bjarnason. But what does that mean? What would a programming language for the internet age look like?</p><p>Rúnar’s answer is Unison. A language that completely rethinks the way distributing computing can work, from the source code up. Borrowing some key ideas from git, it challenges the way we think about code-sharing, compilation, versioning and more.&nbsp;</p><p>--<br><br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/<br>Rúnar on Twitter: https://twitter.com/runarorama<br>Rúnar’s book, Function Programming in Scala: https://amzn.to/46I9jew<br>Unison website: https://unison-lang.org<br><br>Complete and Easy Bidirectional Typechecking for Higher-Rank Polymorphism (pdf): https://www.cl.cam.ac.uk/~nk480/bidir.pdf<br>Do Be Do Be Do (pdf): https://arxiv.org/pdf/1611.09259.pdf<br>Rúnar’s Øredev conference talk: https://youtu.be/EgIVzOobD48</p><p>Cloud icons created by Freepik - Flaticon: https://www.flaticon.com/free-icons/cloud<br>Computer icons created by xnimrodx - Flaticon: https://www.flaticon.com/free-icons/computer</p>]]></description>
      <content:encoded><![CDATA[<p>“Software development has not caught up with the internet age.” So says this week’s guest, Rúnar Bjarnason. But what does that mean? What would a programming language for the internet age look like?</p><p>Rúnar’s answer is Unison. A language that completely rethinks the way distributing computing can work, from the source code up. Borrowing some key ideas from git, it challenges the way we think about code-sharing, compilation, versioning and more.&nbsp;</p><p>--<br><br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/<br>Rúnar on Twitter: https://twitter.com/runarorama<br>Rúnar’s book, Function Programming in Scala: https://amzn.to/46I9jew<br>Unison website: https://unison-lang.org<br><br>Complete and Easy Bidirectional Typechecking for Higher-Rank Polymorphism (pdf): https://www.cl.cam.ac.uk/~nk480/bidir.pdf<br>Do Be Do Be Do (pdf): https://arxiv.org/pdf/1611.09259.pdf<br>Rúnar’s Øredev conference talk: https://youtu.be/EgIVzOobD48</p><p>Cloud icons created by Freepik - Flaticon: https://www.flaticon.com/free-icons/cloud<br>Computer icons created by xnimrodx - Flaticon: https://www.flaticon.com/free-icons/computer</p>]]></content:encoded>
      <guid isPermaLink="false">0ab429f1-a69d-44b9-a918-69c0169fcd83</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3727</itunes:duration>
    </item>
    <item>
      <title>The Evolution of Databases &amp; the Future of Database Technology (with Ben Stopford)</title>
      <link>https://zencastr.com/z/-gH_-hUZ</link>
      <itunes:title>The Evolution of Databases &amp; the Future of Database Technology (with Ben Stopford)</itunes:title>
      <itunes:summary>Have you ever been overwhelmed by the number of databases on offer? This week we welcome database expert Ben Stopford as a guide to help us map the database landscape and make sense of it all!

Join us as we embark on a journey through the history of databases, tracing the path from Edgar Codd to the multitude cloud-era of options available today. Discover the strengths of various database styles and explore the tradeoffs between general-purpose databases like #PostgreSQL and highly customised ones like #Cassandra or #Snowflake.

We delve into the realm of the cloud and the opportunities it brings, both for users and the database vendors themselves. And then we examine the challenges that arise when you&apos;re forced to connect multiple databases across an organisation. Should you look at Event Sourcing? Or Event Streaming, and how exactly do they differ?

Finally, we look towards the future, discussing Ben&apos;s vision of an ideal database and which programming language he would choose to build it in.

Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/
Kris on Mastodon: https://mastodon.social/@krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 12 Jul 2023 14:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="71700525" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/64a6ceb38b2e2c4f2357e7af/size/71700525/audio-files/619e48a9649c44004c5a44e8/936b4e23-04c7-49ce-9f5a-d4fa3d04f94b.mp3"/>
      <description><![CDATA[<p>Have you ever been overwhelmed by the number of databases on offer? This week we welcome database expert Ben Stopford as a guide to help us map the database landscape and make sense of it all!</p><p>Join us as we embark on a journey through the history of databases, tracing the path from Edgar Codd to the multitude cloud-era of options available today. Discover the strengths of various database styles and explore the tradeoffs between general-purpose databases like #PostgreSQL and highly customised ones like #Cassandra or #Snowflake.</p><p>We delve into the realm of the cloud and the opportunities it brings, both for users and the database vendors themselves. And then we examine the challenges that arise when you're forced to connect multiple databases across an organisation. Should you look at Event Sourcing? Or Event Streaming, and how exactly do they differ?</p><p>Finally, we look towards the future, discussing Ben's vision of an ideal database and which programming language he would choose to build it in.</p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a><br>Kris on Mastodon: <a href="https://mastodon.social/@krisajenkins">https://mastodon.social/@krisajenkins</a></p>]]></description>
      <content:encoded><![CDATA[<p>Have you ever been overwhelmed by the number of databases on offer? This week we welcome database expert Ben Stopford as a guide to help us map the database landscape and make sense of it all!</p><p>Join us as we embark on a journey through the history of databases, tracing the path from Edgar Codd to the multitude cloud-era of options available today. Discover the strengths of various database styles and explore the tradeoffs between general-purpose databases like #PostgreSQL and highly customised ones like #Cassandra or #Snowflake.</p><p>We delve into the realm of the cloud and the opportunities it brings, both for users and the database vendors themselves. And then we examine the challenges that arise when you're forced to connect multiple databases across an organisation. Should you look at Event Sourcing? Or Event Streaming, and how exactly do they differ?</p><p>Finally, we look towards the future, discussing Ben's vision of an ideal database and which programming language he would choose to build it in.</p><p>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a><br>Kris on Mastodon: <a href="https://mastodon.social/@krisajenkins">https://mastodon.social/@krisajenkins</a></p>]]></content:encoded>
      <guid isPermaLink="false">ffbaa815-6e0b-49fd-922d-63be80bcec57</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>2987</itunes:duration>
    </item>
    <item>
      <title>The Open Source AI Revolution Begins Now...</title>
      <link>https://zencastr.com/z/pOxvq-8m</link>
      <itunes:title>The Open Source AI Revolution Begins Now...</itunes:title>
      <itunes:summary>LLMs like ChatGPT are not just fascinating, they&apos;re becoming increasing useful in our working lives. They&apos;ve graduated from novelty to valuable tool. But building those tools is still in the hands of huge companies. Or is it?

In this week&apos;s episode of Developer Voices, we&apos;re learning how you can run LLMs on your own laptop, and how you can customize the system to make a tailored research assistant, a better documentation-searcher, and much more. All you need is a guide on which pieces you need, and how they fit together, and that&apos;s exactly what this week&apos;s guest—Tobi Fankhänel—is here to take us through.

A leaked memo from Google recently outlined how the Big Company Advantage has almost completely eroded, and how the next wave of LLM development is going to come from the open source community. So hackers rise up - the open source AI revolution begins now!

--

Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/
Tobias on LinkedIn: https://www.linkedin.com/in/tobias-fankh%C3%A4nel-749712180/
Tobias&apos; blog: https://blog.exxample.eu
LangChain: https://python.langchain.com/docs/get_started/introduction.html
Embeddings: https://weaviate.io/blog/vector-embeddings-explained
Vector Databases: https://en.wikipedia.org/wiki/Vector_database
&quot;We have no moat&quot; – Google Employee on Open-source LLMs: https://www.semianalysis.com/p/google-we-have-no-moat-and-neither
&quot;Attention is all you need&quot; - https://proceedings.neurips.cc/paper_files/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf
Timeline since Meta open-sourced their first-gen models: https://www.semianalysis.com/i/119223672/the-timeline
Run LLMs on CPU only or, since May, mix CPU and GPU usage: https://github.com/abetlen/llama-cpp-python
Samantha: https://erichartford.com/meet-samantha
Embedding model leaderboards: https://huggingface.co/spaces/mteb/leaderboard
Open-source LLMs: https://huggingface.co/spaces/HuggingFaceH4/open_llm_leaderboard
LLaMA: https://ai.facebook.com/blog/large-language-model-llama-meta-ai/
Blog post: Design-pattern &apos;In-context learning&apos; https://a16z.com/2023/06/20/emerging-architectures-for-llm-applications/#section--2
Tobi&apos;s GitHub branch &apos;In-context learning with LangChain&apos; https://github.com/aviav/turmbauten/blob/spaghetti-code/CHANGELOG.md
Prompt Syntax Cheat Sheet: https://github.com/oobabooga/text-generation-webui/tree/main/characters/instruction-following
Google Workspace Labs Sign-Up: https://workspace.google.com/labs-sign-up/
GMail Workspace Labs Demo Video, click &apos;See it in action&apos;: https://workspace.google.com/solutions/ai/#m10
Prediction trading on open-source LLMs vs GPT-4: https://manifold.markets/PeterWildeford/will-i-peter-wildeford-think-that-t-c95ff3c1b385</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 05 Jul 2023 14:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="69211629" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/64a412b29e850a6a8d49d09c/size/69211629/audio-files/619e48a9649c44004c5a44e8/e2ed2a63-adec-4ec2-997d-e24aa70cddb6.mp3"/>
      <description><![CDATA[<p>LLMs like ChatGPT are not just fascinating, they're becoming increasing useful in our working lives. They've graduated from novelty to valuable tool. But building those tools is still in the hands of huge companies. Or is it?<br><br>In this week's episode of Developer Voices, we're learning how you can run LLMs on your own laptop, and how you can customize the system to make a tailored research assistant, a better documentation-searcher, and much more. All you need is a guide on which pieces you need, and how they fit together, and that's exactly what this week's guest—Tobi Fankhänel—is here to take us through.</p><p>A leaked memo from Google recently outlined how the Big Company Advantage has almost completely eroded, and how the next wave of LLM development is going to come from the open source community. So hackers rise up - the open source AI revolution begins now!</p><p>--</p><p>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/<br>Tobias on LinkedIn: https://www.linkedin.com/in/tobias-fankh%C3%A4nel-749712180/<br>Tobias’ blog: https://blog.exxample.eu<br>LangChain: https://python.langchain.com/docs/get_started/introduction.html<br>Embeddings: https://weaviate.io/blog/vector-embeddings-explained<br>Vector Databases: https://en.wikipedia.org/wiki/Vector_database<br>"We have no moat" – Google Employee on Open-source LLMs: https://www.semianalysis.com/p/google-we-have-no-moat-and-neither<br>“Attention is all you need” - https://proceedings.neurips.cc/paper_files/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf<br>Timeline since Meta open-sourced their first-gen models: https://www.semianalysis.com/i/119223672/the-timeline<br>Run LLMs on CPU only or, since May, mix CPU and GPU usage: https://github.com/abetlen/llama-cpp-python<br>Samantha: https://erichartford.com/meet-samantha<br>Embedding model leaderboards: https://huggingface.co/spaces/mteb/leaderboard<br>Open-source LLMs: https://huggingface.co/spaces/HuggingFaceH4/open_llm_leaderboard<br>LLaMA: https://ai.facebook.com/blog/large-language-model-llama-meta-ai/<br>Blog post: Design-pattern ‘In-context learning’ https://a16z.com/2023/06/20/emerging-architectures-for-llm-applications/#section--2<br>Tobi's GitHub branch ‘In-context learning with LangChain’ https://github.com/aviav/turmbauten/blob/spaghetti-code/CHANGELOG.md<br>Prompt Syntax Cheat Sheet: https://github.com/oobabooga/text-generation-webui/tree/main/characters/instruction-following<br>Google Workspace Labs Sign-Up: https://workspace.google.com/labs-sign-up/<br>GMail Workspace Labs Demo Video, click ‘See it in action’: https://workspace.google.com/solutions/ai/#m10<br>Prediction trading on open-source LLMs vs GPT-4: https://manifold.markets/PeterWildeford/will-i-peter-wildeford-think-that-t-c95ff3c1b385</p>]]></description>
      <content:encoded><![CDATA[<p>LLMs like ChatGPT are not just fascinating, they're becoming increasing useful in our working lives. They've graduated from novelty to valuable tool. But building those tools is still in the hands of huge companies. Or is it?<br><br>In this week's episode of Developer Voices, we're learning how you can run LLMs on your own laptop, and how you can customize the system to make a tailored research assistant, a better documentation-searcher, and much more. All you need is a guide on which pieces you need, and how they fit together, and that's exactly what this week's guest—Tobi Fankhänel—is here to take us through.</p><p>A leaked memo from Google recently outlined how the Big Company Advantage has almost completely eroded, and how the next wave of LLM development is going to come from the open source community. So hackers rise up - the open source AI revolution begins now!</p><p>--</p><p>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/<br>Tobias on LinkedIn: https://www.linkedin.com/in/tobias-fankh%C3%A4nel-749712180/<br>Tobias’ blog: https://blog.exxample.eu<br>LangChain: https://python.langchain.com/docs/get_started/introduction.html<br>Embeddings: https://weaviate.io/blog/vector-embeddings-explained<br>Vector Databases: https://en.wikipedia.org/wiki/Vector_database<br>"We have no moat" – Google Employee on Open-source LLMs: https://www.semianalysis.com/p/google-we-have-no-moat-and-neither<br>“Attention is all you need” - https://proceedings.neurips.cc/paper_files/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf<br>Timeline since Meta open-sourced their first-gen models: https://www.semianalysis.com/i/119223672/the-timeline<br>Run LLMs on CPU only or, since May, mix CPU and GPU usage: https://github.com/abetlen/llama-cpp-python<br>Samantha: https://erichartford.com/meet-samantha<br>Embedding model leaderboards: https://huggingface.co/spaces/mteb/leaderboard<br>Open-source LLMs: https://huggingface.co/spaces/HuggingFaceH4/open_llm_leaderboard<br>LLaMA: https://ai.facebook.com/blog/large-language-model-llama-meta-ai/<br>Blog post: Design-pattern ‘In-context learning’ https://a16z.com/2023/06/20/emerging-architectures-for-llm-applications/#section--2<br>Tobi's GitHub branch ‘In-context learning with LangChain’ https://github.com/aviav/turmbauten/blob/spaghetti-code/CHANGELOG.md<br>Prompt Syntax Cheat Sheet: https://github.com/oobabooga/text-generation-webui/tree/main/characters/instruction-following<br>Google Workspace Labs Sign-Up: https://workspace.google.com/labs-sign-up/<br>GMail Workspace Labs Demo Video, click ‘See it in action’: https://workspace.google.com/solutions/ai/#m10<br>Prediction trading on open-source LLMs vs GPT-4: https://manifold.markets/PeterWildeford/will-i-peter-wildeford-think-that-t-c95ff3c1b385</p>]]></content:encoded>
      <guid isPermaLink="false">a232735a-89c4-4c1e-a35d-c1b15b33f08b</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/96973d74-2516-4e2d-9d94-649aee1838f7.jpg"/>
      <itunes:duration>2883</itunes:duration>
    </item>
    <item>
      <title>Gren: The friendly, fullstack, functional future?</title>
      <link>https://zencastr.com/z/tTq9j1mb</link>
      <itunes:title>Gren: The friendly, fullstack, functional future?</itunes:title>
      <itunes:summary>Time to put another new #programming language - and its creator - under the spotlight, as we talk to Robin Heggelund Hansen, the creator of Gren. Gren is a Norwegian word meaning &apos;branch&apos;, which is appropriate for a language that started as a fork from its roots in Elm.

With Gren, Robin&apos;s trying to create a safe, sane, #fullstack language that puts the power and elegance of functional programming working seamlessly on the server and the browser. But how and why do you do that? What design choices to do make, how much time do you spend on adding new features vs. improving the developer&apos;s experience of the existing ones? And most importantly...how do you pronounce Gren correctly? 😅

Gren Website: https://gren-lang.org
Gren Zulip: https://gren.zulipchat.com/
Gren package site: https://packages.gren-lang.org/
Example projects written in Gren: https://github.com/gren-lang/example-projects
Gren on Mastodon: https://fosstodon.org/@gren_lang
Gren on Twitter: https://twitter.com/gren_lang
Gren language proposal on parameterized modules: https://github.com/gren-lang/compiler/issues/81
Elm Website: https://elm-lang.org/  

Robin on Mastodon: https://snabelen.no/@robinheghan
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/
Kris on Mastodon: https://mastodon.social/@krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 28 Jun 2023 14:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="90581805" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/649c06ddc60159f4b41d31d0/size/90581805/audio-files/619e48a9649c44004c5a44e8/57c3d261-b164-4f9f-a6e1-bffdeeb3e8f5.mp3"/>
      <description><![CDATA[<p>Time to put another new #programming language - and its creator - under the spotlight, as we talk to Robin Heggelund Hansen, the creator of Gren. Gren is a Norwegian word meaning 'branch', which is appropriate for a language that started as a fork from its roots in Elm.<br><br>With Gren, Robin's trying to create a safe, sane, #fullstack language that puts the power and elegance of functional programming working seamlessly on the server and the browser. But how and why do you do that? What design choices to do make, how much time do you spend on adding new features vs. improving the developer's experience of the existing ones? And most importantly...how do you pronounce Gren correctly? 😅<br><br>Gren Website: https://gren-lang.org<br>Gren Zulip: https://gren.zulipchat.com/<br>Gren package site: https://packages.gren-lang.org/<br>Example projects written in Gren: https://github.com/gren-lang/example-projects<br>Gren on Mastodon: https://fosstodon.org/@gren_lang<br>Gren on Twitter: https://twitter.com/gren_lang <br>Gren language proposal on parameterized modules: https://github.com/gren-lang/compiler/issues/81 <br>Elm Website: https://elm-lang.org/ &nbsp;</p><p>Robin on Mastodon: https://snabelen.no/@robinheghan <br>Kris on Twitter: https://twitter.com/krisajenkins <br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/ <br>Kris on Mastodon: https://mastodon.social/@krisajenkins</p>]]></description>
      <content:encoded><![CDATA[<p>Time to put another new #programming language - and its creator - under the spotlight, as we talk to Robin Heggelund Hansen, the creator of Gren. Gren is a Norwegian word meaning 'branch', which is appropriate for a language that started as a fork from its roots in Elm.<br><br>With Gren, Robin's trying to create a safe, sane, #fullstack language that puts the power and elegance of functional programming working seamlessly on the server and the browser. But how and why do you do that? What design choices to do make, how much time do you spend on adding new features vs. improving the developer's experience of the existing ones? And most importantly...how do you pronounce Gren correctly? 😅<br><br>Gren Website: https://gren-lang.org<br>Gren Zulip: https://gren.zulipchat.com/<br>Gren package site: https://packages.gren-lang.org/<br>Example projects written in Gren: https://github.com/gren-lang/example-projects<br>Gren on Mastodon: https://fosstodon.org/@gren_lang<br>Gren on Twitter: https://twitter.com/gren_lang <br>Gren language proposal on parameterized modules: https://github.com/gren-lang/compiler/issues/81 <br>Elm Website: https://elm-lang.org/ &nbsp;</p><p>Robin on Mastodon: https://snabelen.no/@robinheghan <br>Kris on Twitter: https://twitter.com/krisajenkins <br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/ <br>Kris on Mastodon: https://mastodon.social/@krisajenkins</p>]]></content:encoded>
      <guid isPermaLink="false">3f2074f0-4039-4e81-9e6d-89b5d94d2ffa</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3774</itunes:duration>
    </item>
    <item>
      <title>PostgreSQL in the Cloud</title>
      <link>https://zencastr.com/z/vuqgsQns</link>
      <itunes:title>PostgreSQL in the Cloud</itunes:title>
      <itunes:summary>What&apos;s going on with Postgres? Joining us for his perspective is Raouf Chebri, a Developer Advocate for PostgreSQL and the cloud service Neon. We catch up on what&apos;s new and important in recent versions of Postgres, what Neon have been doing to make Postgres work well in the Cloud, and what Raouf&apos;s life is like as a professional singer of Postgres&apos;s virtues.


Neon: https://neon.tech/
Neon&apos;s architecture: https://neon.tech/docs/introduction/architecture-overview
That CEO quote: https://twitter.com/nikitabase/status/1563913187862335489
Raouf on Twitter: https://twitter.com/raoufdevrel
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 21 Jun 2023 15:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="48389229" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/648de260924a45979de9f74b/size/48389229/audio-files/619e48a9649c44004c5a44e8/116a4e99-83d8-47e9-83ae-5e33ddd61814.mp3"/>
      <description><![CDATA[<p>What's going on with Postgres? Joining us for his perspective is Raouf Chebri, a Developer Advocate for PostgreSQL and the cloud service Neon. We catch up on what's new and important in recent versions of Postgres, what Neon have been doing to make Postgres work well in the Cloud, and what Raouf's life is like as a professional singer of Postgres's virtues.<br></p><p>Neon: https://neon.tech/<br>Neon’s architecture: <a href="https://neon.tech/docs/introduction/architecture-overview">https://neon.tech/docs/introduction/architecture-overview</a><br>That CEO quote: https://twitter.com/nikitabase/status/1563913187862335489<br>Raouf on Twitter: https://twitter.com/raoufdevrel<br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p>]]></description>
      <content:encoded><![CDATA[<p>What's going on with Postgres? Joining us for his perspective is Raouf Chebri, a Developer Advocate for PostgreSQL and the cloud service Neon. We catch up on what's new and important in recent versions of Postgres, what Neon have been doing to make Postgres work well in the Cloud, and what Raouf's life is like as a professional singer of Postgres's virtues.<br></p><p>Neon: https://neon.tech/<br>Neon’s architecture: <a href="https://neon.tech/docs/introduction/architecture-overview">https://neon.tech/docs/introduction/architecture-overview</a><br>That CEO quote: https://twitter.com/nikitabase/status/1563913187862335489<br>Raouf on Twitter: https://twitter.com/raoufdevrel<br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p>]]></content:encoded>
      <guid isPermaLink="false">4607688e-2cc5-4591-850d-afcd492dee63</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>2016</itunes:duration>
    </item>
    <item>
      <title>Building a Thriving Community Around Your Software with Ale Murray</title>
      <link>https://zencastr.com/z/15DLXCdQ</link>
      <itunes:title>Building a Thriving Community Around Your Software with Ale Murray</itunes:title>
      <itunes:summary>Are you trying to build the community around your software? And what does &quot;building a community&quot; really mean? What are we building communities for?

Join us on Developer Voices as host Kris Jenkins sits down with Ale Murray, a seasoned community manager with nearly a decade of experience, to discuss her tips for building a thriving tech community. 

Ale shares her insights on why community building is essential, how to identify your target audience, and how to approach community building with the right mindset. She also offers practical advice on how to handle challenging situations, such as dealing with negative feedback and managing conflicts within the community. 

Whether you&apos;re just starting out or looking to improve your existing community, this conversation offers valuable insights and actionable tips to help you succeed.

Ale on Twitter: https://twitter.com/ale_amurray
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins
Kris on Mastodon: https://mastodon.social/@krisajenkins</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Tue, 13 Jun 2023 14:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="79529517" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/64837cfc9b26a15038585aa5/size/79529517/audio-files/619e48a9649c44004c5a44e8/d3e6618c-9c59-432a-bfd3-670236122939.mp3"/>
      <description><![CDATA[<p>Are you trying to build the community around your software? And what does “building a community” really mean? What are we building communities for?</p><p>Join us on Developer Voices as host Kris Jenkins sits down with Ale Murray, a seasoned community manager with nearly a decade of experience, to discuss her tips for building a thriving tech community.&nbsp;</p><p>Ale shares her insights on why community building is essential, how to identify your target audience, and how to approach community building with the right mindset. She also offers practical advice on how to handle challenging situations, such as dealing with negative feedback and managing conflicts within the community.&nbsp;</p><p>Whether you're just starting out or looking to improve your existing community, this conversation offers valuable insights and actionable tips to help you succeed.<br><br>Ale on Twitter: https://twitter.com/ale_amurray<br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins<br>Kris on Mastodon: https://mastodon.social/@krisajenkins</p>]]></description>
      <content:encoded><![CDATA[<p>Are you trying to build the community around your software? And what does “building a community” really mean? What are we building communities for?</p><p>Join us on Developer Voices as host Kris Jenkins sits down with Ale Murray, a seasoned community manager with nearly a decade of experience, to discuss her tips for building a thriving tech community.&nbsp;</p><p>Ale shares her insights on why community building is essential, how to identify your target audience, and how to approach community building with the right mindset. She also offers practical advice on how to handle challenging situations, such as dealing with negative feedback and managing conflicts within the community.&nbsp;</p><p>Whether you're just starting out or looking to improve your existing community, this conversation offers valuable insights and actionable tips to help you succeed.<br><br>Ale on Twitter: https://twitter.com/ale_amurray<br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins<br>Kris on Mastodon: https://mastodon.social/@krisajenkins</p>]]></content:encoded>
      <guid isPermaLink="false">a5fd4bd9-2d9d-4cac-aa92-56f706733c40</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/96973d74-2516-4e2d-9d94-649aee1838f7.jpg"/>
      <itunes:duration>3313</itunes:duration>
    </item>
    <item>
      <title>Bitemporal Databases: What They Are and Why They Matter, with James Henderson of XTDB</title>
      <link>https://zencastr.com/z/FsZxErXn</link>
      <itunes:title>Bitemporal Databases: What They Are and Why They Matter, with James Henderson of XTDB</itunes:title>
      <itunes:summary>As a developer, it&apos;s crucial to understand the various types of databases available so you can choose the right tool for the job. In this episode, we&apos;re shining a spotlight on bitemporal databases with James Henderson, lead developer of of a new bitemporal database called XTDB.

You may have already created an ad-hoc bitemporal database without realizing it, but James and his team have been hard at work building a custom database that&apos;s tailor-made for situations where having two notions of time are essential. Join us to learn about the what and why of bitemporality and explore the process of designing and building a database in Clojure.

Ready to get started with XTDB? Visit https://www.xtdb.com/v2 to learn more.
Want to get involved with the XTDB community? Head over to https://discuss.xtdb.com.
Follow XTDB on Twitter at https://twitter.com/xtdb_com
 and Kris Jenkins at https://twitter.com/krisajenkins.
Connect with Kris on LinkedIn at https://www.linkedin.com/in/krisjenkins/.</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 07 Jun 2023 14:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="81677421" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/647e1e48b45685d830b91324/size/81677421/audio-files/619e48a9649c44004c5a44e8/c16207ea-a599-4dcf-8a64-e3c75eb66d5a.mp3"/>
      <description><![CDATA[<p>As a developer, it's crucial to understand the various types of databases available so you can choose the right tool for the job. In this episode, we're shining a spotlight on bitemporal databases with James Henderson, lead developer of of a new bitemporal database called XTDB.<br><br>You may have already created an ad-hoc bitemporal database without realizing it, but James and his team have been hard at work building a custom database that's tailor-made for situations where having two notions of time are essential. Join us to learn about the what and why of bitemporality and explore the process of designing and building a database in Clojure.<br><br>Ready to get started with XTDB? Visit https://www.xtdb.com/v2 to learn more.<br>Want to get involved with the XTDB community? Head over to https://discuss.xtdb.com.<br>Follow XTDB on Twitter at https://twitter.com/xtdb_com<br> &nbsp;and Kris Jenkins at https://twitter.com/krisajenkins.<br>Connect with Kris on LinkedIn at https://www.linkedin.com/in/krisjenkins/.</p>]]></description>
      <content:encoded><![CDATA[<p>As a developer, it's crucial to understand the various types of databases available so you can choose the right tool for the job. In this episode, we're shining a spotlight on bitemporal databases with James Henderson, lead developer of of a new bitemporal database called XTDB.<br><br>You may have already created an ad-hoc bitemporal database without realizing it, but James and his team have been hard at work building a custom database that's tailor-made for situations where having two notions of time are essential. Join us to learn about the what and why of bitemporality and explore the process of designing and building a database in Clojure.<br><br>Ready to get started with XTDB? Visit https://www.xtdb.com/v2 to learn more.<br>Want to get involved with the XTDB community? Head over to https://discuss.xtdb.com.<br>Follow XTDB on Twitter at https://twitter.com/xtdb_com<br> &nbsp;and Kris Jenkins at https://twitter.com/krisajenkins.<br>Connect with Kris on LinkedIn at https://www.linkedin.com/in/krisjenkins/.</p>]]></content:encoded>
      <guid isPermaLink="false">021c3069-d0d2-42cf-bdba-9ff36a689a1e</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/96973d74-2516-4e2d-9d94-649aee1838f7.jpg"/>
      <itunes:duration>3403</itunes:duration>
    </item>
    <item>
      <title>What are the fundamentals of Data Engineering?</title>
      <link>https://zencastr.com/z/njcPgYKB</link>
      <itunes:title>What are the fundamentals of Data Engineering?</itunes:title>
      <itunes:summary>Every business deals in data, but the internet age has ushered in an explosion of the number of different data formats we have to process from a number of different databases to get the job done. Ask any Data Scientist, and they&apos;ll tell you a huge part of their job isn&apos;t data science - it&apos;s data engineering. Acquiring, processing and shipping data, and above all, understanding it. We&apos;ve always had that task in the IT world, but these days it&apos;s a whole discipline.

Today&apos;s podcast sits down with the author of &quot;The Fundamentals Of Data Engineering&quot; to survey the landscape. To understand what data engineering is, and go deep into what a data engineer needs to understand to succeed.</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 31 May 2023 14:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="78561837" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/6475f6b6e11f6e6101c12a2f/size/78561837/audio-files/619e48a9649c44004c5a44e8/782e72d7-a287-4238-ab68-6961a808cd83.mp3"/>
      <description><![CDATA[<p>Every business deals in data, but the internet age has ushered in an explosion of the number of different data formats we have to process from a number of different databases to get the job done. Ask any Data Scientist, and they’ll tell you a huge part of their job isn’t data science - it’s data engineering. Acquiring, processing and shipping data, and above all, understanding it. We’ve always had that task in the IT world, but these days it’s a whole discipline.</p><p>Today’s podcast sits down with the author of “The Fundamentals Of Data Engineering” to survey the landscape. To understand what data engineering is, and go deep into what a data engineer needs to understand to succeed.</p>]]></description>
      <content:encoded><![CDATA[<p>Every business deals in data, but the internet age has ushered in an explosion of the number of different data formats we have to process from a number of different databases to get the job done. Ask any Data Scientist, and they’ll tell you a huge part of their job isn’t data science - it’s data engineering. Acquiring, processing and shipping data, and above all, understanding it. We’ve always had that task in the IT world, but these days it’s a whole discipline.</p><p>Today’s podcast sits down with the author of “The Fundamentals Of Data Engineering” to survey the landscape. To understand what data engineering is, and go deep into what a data engineer needs to understand to succeed.</p>]]></content:encoded>
      <guid isPermaLink="false">bb1c61e4-62c2-45d3-b701-98831782edef</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3273</itunes:duration>
      <itunes:keywords>data science,data engineering</itunes:keywords>
    </item>
    <item>
      <title>Can Kotlin take you everywhere?</title>
      <link>https://zencastr.com/z/F1E-cQxG</link>
      <itunes:title>Can Kotlin take you everywhere?</itunes:title>
      <itunes:summary>In this episode we&apos;re exploring the Kotlin programming language with an expert from Google. What does Kotlin have to offer? Is it just a Java alternative, or has it turned into something much more ambitious? Along the way we manage to discuss Scala, Function Programming vs. Object Orientation, Editors, Higher Kinded Types, Elm, React, UI architectures and multiplatform programming. A very full episode!

Happy Path Programming - Haskell is not as scary as you think: https://pod.link/1531666706/episode/710a605d605fda251f2e83b8858615b8
The Kotlin Programming Language: https://kotlinlang.org/
Android Studio: https://developer.android.com/studio
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 24 May 2023 15:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="88758765" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/646b8c62bc53f55550e0e470/size/88758765/audio-files/619e48a9649c44004c5a44e8/c4d1bb75-64fc-400b-b373-3e9723dbb012.mp3"/>
      <description><![CDATA[<p>In this episode we're exploring the Kotlin programming language with an expert from Google. What does Kotlin have to offer? Is it just a Java alternative, or has it turned into something much more ambitious? Along the way we manage to discuss Scala, Function Programming vs. Object Orientation, Editors, Higher Kinded Types, Elm, React, UI architectures and multiplatform programming. A very full episode!</p><p>Happy Path Programming - Haskell is not as scary as you think: <a href="https://pod.link/1531666706/episode/710a605d605fda251f2e83b8858615b8">https://pod.link/1531666706/episode/710a605d605fda251f2e83b8858615b8</a><br>The Kotlin Programming Language: <a href="https://kotlinlang.org/">https://kotlinlang.org/</a><br>Android Studio: <a href="https://developer.android.com/studio">https://developer.android.com/studio</a><br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p>]]></description>
      <content:encoded><![CDATA[<p>In this episode we're exploring the Kotlin programming language with an expert from Google. What does Kotlin have to offer? Is it just a Java alternative, or has it turned into something much more ambitious? Along the way we manage to discuss Scala, Function Programming vs. Object Orientation, Editors, Higher Kinded Types, Elm, React, UI architectures and multiplatform programming. A very full episode!</p><p>Happy Path Programming - Haskell is not as scary as you think: <a href="https://pod.link/1531666706/episode/710a605d605fda251f2e83b8858615b8">https://pod.link/1531666706/episode/710a605d605fda251f2e83b8858615b8</a><br>The Kotlin Programming Language: <a href="https://kotlinlang.org/">https://kotlinlang.org/</a><br>Android Studio: <a href="https://developer.android.com/studio">https://developer.android.com/studio</a><br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p>]]></content:encoded>
      <guid isPermaLink="false">7b8ce00b-1a4f-46e0-a0e2-6bcb157426ea</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:image href="https://media.zencastr.com/image-files/619e48a9649c44004c5a44e8/96973d74-2516-4e2d-9d94-649aee1838f7.jpg"/>
      <itunes:duration>3698</itunes:duration>
      <itunes:keywords>kotlin,programming,android,jvm</itunes:keywords>
    </item>
    <item>
      <title>How Do You Get AI Into Production?</title>
      <link>https://zencastr.com/z/rusgSr3v</link>
      <itunes:title>How Do You Get AI Into Production?</itunes:title>
      <itunes:summary>AI is the new hotness, but with new approaches come new problems of scale. How do you make raw data accessible to teams of data scientists and model-builders? How do build a repeatable deployment pipeline? And how do you monitor your models once they&apos;re in production? Today&apos;s episode goes through all these reality checks with author and expert Adi Polak, who&apos;s just released a new book on the subject.

Scaling Machine Learning With Spark (book): https://www.oreilly.com/library/view/scaling-machine-learning/9781098106812/
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Tue, 16 May 2023 06:00:00 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="68870637" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/6461e8731934030f0ce7b8fe/size/68870637/audio-files/619e48a9649c44004c5a44e8/cf808211-3668-4e23-ae6b-d8a38187caf8.mp3"/>
      <description><![CDATA[<p>AI is the new hotness, but with new approaches come new problems of scale. How do you make raw data accessible to teams of data scientists and model-builders? How do build a repeatable deployment pipeline? And how do you monitor your models once they're in production? Today's episode goes through all these reality checks with author and expert Adi Polak, who's just released a new book on the subject.<br><br>Scaling Machine Learning With Spark (book): https://www.oreilly.com/library/view/scaling-machine-learning/9781098106812/<br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p>]]></description>
      <content:encoded><![CDATA[<p>AI is the new hotness, but with new approaches come new problems of scale. How do you make raw data accessible to teams of data scientists and model-builders? How do build a repeatable deployment pipeline? And how do you monitor your models once they're in production? Today's episode goes through all these reality checks with author and expert Adi Polak, who's just released a new book on the subject.<br><br>Scaling Machine Learning With Spark (book): https://www.oreilly.com/library/view/scaling-machine-learning/9781098106812/<br>Kris on Twitter: https://twitter.com/krisajenkins<br>Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</p>]]></content:encoded>
      <guid isPermaLink="false">cba17dcb-4b3d-4875-a40d-6442bd207d4b</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>2869</itunes:duration>
    </item>
    <item>
      <title>Is Gleam your next programming language?</title>
      <link>https://zencastr.com/z/63UUlazs</link>
      <itunes:title>Is Gleam your next programming language?</itunes:title>
      <itunes:summary>Louis Pilfold joins us to talk about Gleam, a new language that runs on Erlang&apos;s BEAM. In creating Gleam, Louis has tried to bring a new level of developer-friendliness to Erlang&apos;s famously fault-tolerant platform.

If you&apos;re interested in building reliable distributed systems, exploring functional programming, learning new languages or finding out what it takes to design your own language, Louis is here to talk us through it all.

The Gleam language: https://gleam.run/
Gleam&apos;s package repo: https://packages.gleam.run/
Gleam on Twitter: https://twitter.com/gleamlang
Kris on Twitter: https://twitter.com/krisajenkins
Kris on LinkedIn: https://www.linkedin.com/in/krisjenkins/</itunes:summary>
      <itunes:episodeType>full</itunes:episodeType>
      <pubDate>Wed, 10 May 2023 10:27:03 GMT</pubDate>
      <itunes:author>Kris Jenkins</itunes:author>
      <enclosure length="76798701" type="audio/mpeg" url="https://redirect.zencastr.com/r/episode/645b717704f022bbf52bc940/size/76798701/audio-files/619e48a9649c44004c5a44e8/9d909f49-74a6-4769-8134-6c99d21f1d31.mp3"/>
      <description><![CDATA[<p>Louis Pilfold joins us to talk about Gleam, a new language that runs on Erlang's BEAM. In creating Gleam, Louis has tried to bring a new level of developer-friendliness to Erlang's famously fault-tolerant platform.</p><p>If you're interested in building reliable distributed systems, exploring functional programming, learning new languages or finding out what it takes to design your own language, Louis is here to talk us through it all.</p><p>The Gleam language: <a href="https://gleam.run/">https://gleam.run/</a><br>Gleam’s package repo: <a href="https://packages.gleam.run/">https://packages.gleam.run/</a><br>Gleam on Twitter: https://twitter.com/gleamlang<br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p>]]></description>
      <content:encoded><![CDATA[<p>Louis Pilfold joins us to talk about Gleam, a new language that runs on Erlang's BEAM. In creating Gleam, Louis has tried to bring a new level of developer-friendliness to Erlang's famously fault-tolerant platform.</p><p>If you're interested in building reliable distributed systems, exploring functional programming, learning new languages or finding out what it takes to design your own language, Louis is here to talk us through it all.</p><p>The Gleam language: <a href="https://gleam.run/">https://gleam.run/</a><br>Gleam’s package repo: <a href="https://packages.gleam.run/">https://packages.gleam.run/</a><br>Gleam on Twitter: https://twitter.com/gleamlang<br>Kris on Twitter: <a href="https://twitter.com/krisajenkins">https://twitter.com/krisajenkins</a><br>Kris on LinkedIn: <a href="https://www.linkedin.com/in/krisjenkins/">https://www.linkedin.com/in/krisjenkins/</a></p>]]></content:encoded>
      <guid isPermaLink="false">2270a006-587b-4959-a0ce-5dfcc41714e0</guid>
      <itunes:explicit>false</itunes:explicit>
      <itunes:duration>3200</itunes:duration>
      <itunes:keywords>gleam,programming,functional programming,erlang,design,distributed systems</itunes:keywords>
    </item>
  </channel>
</rss>