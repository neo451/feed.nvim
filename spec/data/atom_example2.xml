<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://neovim.io/news.xml" rel="self" type="application/atom+xml" /><link href="https://neovim.io/" rel="alternate" type="text/html" /><updated>2024-09-29T19:55:20+00:00</updated><id>https://neovim.io/news.xml</id><title type="html">Neovim</title><subtitle>vim out of the box</subtitle><entry><title type="html">Neovim 0.10</title><link href="https://neovim.io/news/2024/05" rel="alternate" type="text/html" title="Neovim 0.10" /><published>2024-05-16T00:00:00+00:00</published><updated>2024-05-16T00:00:00+00:00</updated><id>https://neovim.io/news/2024/news</id><content type="html" xml:base="https://neovim.io/news/2024/05"><![CDATA[<p>Nvim 0.10 was released.</p>

<ul>
  <li>Newsletter is here: <a href="https://gpanders.com/blog/whats-new-in-neovim-0.10/">https://gpanders.com/blog/whats-new-in-neovim-0.10/</a></li>
  <li>LWN: <a href="https://lwn.net/Articles/973917/">https://lwn.net/Articles/973917/</a></li>
  <li>Features are described here: <a href="https://neovim.io/doc/user/news-0.10.html">https://neovim.io/doc/user/news-0.10.html</a></li>
</ul>]]></content><author><name></name></author><category term="newsletter" /><summary type="html"><![CDATA[Nvim 0.10 was released.]]></summary></entry><entry><title type="html">Vim Boss</title><link href="https://neovim.io/news/2023/08" rel="alternate" type="text/html" title="Vim Boss" /><published>2023-08-09T00:00:00+00:00</published><updated>2023-08-09T00:00:00+00:00</updated><id>https://neovim.io/news/2023/bram</id><content type="html" xml:base="https://neovim.io/news/2023/08"><![CDATA[<p>Bram is one of my heroes. That’s literal and recursive: when I say it,
internally I check before making a frivolous claim, which is a feature of this
particular role-model; “What would Bram do?” is a fixture in me which informs my
choices.</p>

<p>Those who studied <code class="language-plaintext highlighter-rouge">vim_dev</code> and the Vim source and docs, accumulated treasure
from a stream of copious messages and spare impressions. But also from what he
omitted: he never appealed to sensationalism or personal judgements.</p>

<p>Even when treated rudely, Bram usually responded only to advance his
understanding of a problem to solve. Bram was one of those humans quietly
providing deep value to the universe, but there was no parade and little
celebrity.</p>

<p>Bram was anchored to reality, directly interested in results and adjusting what
produced them. The “Problem/Solution” mantra in his commit messages is simple
yet profoundly effective. He used that approach to help <a href="https://www.moolenaar.net/albums.html">people in
Uganda</a>, managing resources directly
instead of abstractly.</p>

<p>Bram’s principles (as I observed them) extended beyond mere technical
craftsmanship. The ability to adopt a position of <em>modesty</em> is a mind-trick that
channels an endeavor through a “narrow waist”, a voluntary constraint. That lens
can create a more composable and powerful result. Plugins like
<a href="https://github.com/tpope/vim-unimpaired">unimpaired</a> riff on the theme. And
this touches on a central point: the main utility—not ideology, but <em>utility</em>—of
“lifestyle software” like Emacs and Vim, is that the ecosystem is alive, and has
escape velocity, so its momentum is self-perpetuated.</p>

<p>Neovim has always been intentionally positioned as a derivative of Vim, which
means simultaneously it both continues and diverges from Vim. I’m convinced that
<a href="https://twitter.com/justinmk/status/1671916719143526400">forks create energy</a>
rather than destroy it. So although we can’t deliver Vim without Bram, we can
continue some essential parts:</p>

<ul>
  <li><a href="https://neovim.io/doc/user/develop.html#design-maintain">Maintenance</a>:
Experimentation is good, and the world needs creative destruction and playful
failures. But Neovim does not represent lust for the new (“neomania”).</li>
  <li><a href="https://neovim.io/doc/user/develop.html#design-documented">Documentation</a>:
the habits of Vim documentation are obvious, this is one of the biggest gains
that Nvim acquired by building on vim.</li>
  <li>Extensibility: Bram’s own <a href="http://www.agide.org">Agide</a> project aspired to
a similar sort of extensibility as Neovim:
    <blockquote>
      <p>Agide is not a monolitic application. Separate tools can be plugged in. Thus
you are not forced to use one editor. … Each tool implements part of the
plugin interface.</p>
    </blockquote>
  </li>
  <li><a href="https://neovim.io/doc/user/develop.html#design-not">Embedding</a>: Vim’s
<a href="https://github.com/vim/vim/blob/531da5955e03afadb2f0cf72264fe8deb4bf430e/runtime/doc/develop.txt#L145-L153">:help design-not</a>
for most of its life proclaimed this tenet of Neovim:
    <blockquote>
      <p>Vim is not a shell or an Operating System. …  This should work the other way
around: Use Vim as a component from a shell or in an IDE.</p>
    </blockquote>
  </li>
</ul>

<p>And another thing: Bram didn’t take himself too seriously. He had his own sense
of humor.</p>

<p>Neovim is a monument to Vim and Bram. We should be pragmatic, not dogmatic; we
should remember what the goal is, and compare our actions to the results.</p>

<hr />

<p><em>— Justin M. Keyes</em></p>

<p>P.S. Jan van den Berg wrote <a href="https://j11g.com/2023/08/07/the-legacy-of-bram-moolenaar/">a nice post on Bram’s legacy</a>.</p>]]></content><author><name></name></author><category term="newsletter" /><summary type="html"><![CDATA[Bram is one of my heroes. That’s literal and recursive: when I say it, internally I check before making a frivolous claim, which is a feature of this particular role-model; “What would Bram do?” is a fixture in me which informs my choices.]]></summary></entry><entry><title type="html">What Neovim shipped in 2022</title><link href="https://neovim.io/news/2022/12" rel="alternate" type="text/html" title="What Neovim shipped in 2022" /><published>2022-12-31T00:00:00+00:00</published><updated>2022-12-31T00:00:00+00:00</updated><id>https://neovim.io/news/2022/newsletter</id><content type="html" xml:base="https://neovim.io/news/2022/12"><![CDATA[<p>Neovim is the <a href="https://insights.stackoverflow.com/survey/2021#most-loved-dreaded-and-wanted-new-collab-tools-love-dread">world’s most-loved editor</a>. That’s just science:</p>

<p><img src="/images/2023/3_1537128649228537859.jpg" alt="" /></p>

<p>Here are some highlights from Neovim 2022 (Nvim 0.8) development.</p>

<h2 id="ui">UI</h2>

<p>Eye candy first!</p>

<ul>
  <li>‘winhighlight’ was throughly <a href="https://github.com/neovim/neovim/pull/13457">reimplemented</a> as window-local highlight namespaces. This is backwards-compatible while enabling many new usecases, like window-local syntax highlighting.</li>
  <li><a href="https://github.com/neovim/neovim/issues/9342">global ‘statusline’</a> designates one statusline for all windows. Try it:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:set laststatus=3
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">'winbar'</code> is like an extra statusline at the top of each window. It complements <code class="language-plaintext highlighter-rouge">laststatus=3</code>:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set winbar=%f
set laststatus=3
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">'winbar'</code> and <code class="language-plaintext highlighter-rouge">'statusline'</code> gained <a href="https://github.com/neovim/neovim/pull/18650">support for mouse-click regions</a> (as ‘tabline’ has had since 2016):
    <ul>
      <li><img src="/images/2023/3_1527849187110440961.jpg" alt="" /></li>
    </ul>
  </li>
  <li><em>Experimental</em> <a href="https://github.com/neovim/neovim/pull/16251">zero-height command-line</a>:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:set cmdheight=0
</code></pre></div>    </div>
  </li>
  <li>The <a href="https://github.com/neovim/neovim/pull/12355">‘mousescroll’ option</a> controls vertical/horizontal mouse scroll behavior.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:set mousescroll=ver:5,hor:2
</code></pre></div>    </div>
  </li>
  <li>The new <a href="https://github.com/neovim/neovim/pull/20621">‘statuscolumn’</a> option gives full control of the “gutter”, with the same familiar format of ‘statusline’. It even supports click events, just like ‘statusline’, ‘tabline’, and ‘winbar’.
    <ul>
      <li>Feature author @luukvbaal also provides a <a href="https://github.com/luukvbaal/statuscol.nvim">plugin</a> with various pre-packaged ‘statuscolumn’ configs.</li>
      <li>Try it!
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:set rnu nu 
:let &amp;stc='%#NonText#%{&amp;nu?v:lnum:""}%=%{&amp;rnu&amp;&amp;(v:lnum%2)?"\ ".v:relnum:""}%#LineNr#%{&amp;rnu&amp;&amp;!(v:lnum%2)?"\ ".v:relnum:""}'
</code></pre></div>        </div>
      </li>
      <li>
        <video height="360" controls=""><source src="/images/2023/statuscolumn.mp4" type="video/mp4" /></video>
      </li>
    </ul>
  </li>
  <li>Marks can <a href="https://github.com/neovim/neovim/pull/15831">save and restore viewport info</a>.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:set jumpoptions=view
</code></pre></div>    </div>
    <ul>
      <li>When you jump around, or switch buffers with <kbd>ctrl-^</kbd>, the viewport is restored instead of resetting/recentering vertically.</li>
    </ul>
  </li>
  <li><a href="https://neovim.io/doc/user/lua.html#vim.ui_attach%28%29">vim.ui_attach</a> (experimental) enables in-process Lua plugins to hook into the same events exposed to all Nvim UIs.  <a href="https://twitter.com/Neovim/status/1578146342991527938/photo/1">pic.twitter.com/w9U87jGfIL</a>
    <ul>
      <li><a href="https://github.com/folke/noice.nvim">noice.nvim</a> was an early adopter (a matter of days!).</li>
      <li><img src="/images/2023/noice-ui_attach.webp" alt="" /></li>
    </ul>
  </li>
</ul>

<h2 id="lsp">LSP</h2>

<ul>
  <li><a href="https://www.vikasraj.dev/blog/lsp-neovim-retrospective">Summary</a> of the history and status of Nvim builtin LSP support.</li>
  <li>Nvim LSP client now <a href="https://github.com/neovim/neovim/pull/19916">supports</a> connecting to language servers by TCP.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim.lsp.start({ name = 'godot', cmd = vim.lsp.rpc.connect('127.0.0.1', 6008) })
</code></pre></div>    </div>
  </li>
  <li>New <a href="https://github.com/neovim/neovim/pull/18507">core events for LSP</a>: <code class="language-plaintext highlighter-rouge">LspAttach</code>, <code class="language-plaintext highlighter-rouge">LspDetach</code>. Example:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim.api.nvim_create_autocmd('LspAttach', {
  group = yourGroupID,
  callback = function(args)
    local client = vim.lsp.get_client_by_id(args.data.client_id)
    your_callbac_func(client, args.buf)
  end
}
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">vim.lsp.get_active_clients()</code> learned to filter (this will be a standard pattern in the Lua stdlib):
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>get_active_clients({id=42})
get_active_clients({bufnr=99})
get_active_clients({name='tsserver'})
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="editor">Editor</h2>

<ul>
  <li>Nvim now <a href="https://github.com/neovim/neovim/pull/15391">includes</a> treesitter parsers for C, Lua, and Vimscript. This is a step towards “treesitter by default” for common languages, instead of regex-based vim syntax definitions.</li>
  <li><a href="https://github.com/neovim/neovim/pull/19419">tree-sitter spellcheck</a> constrained to extmark region.</li>
  <li>The diff-mode <a href="https://github.com/neovim/neovim/pull/14537">“linematch” feature</a> improves rendering of same-line diff changes:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:set diffopt+=linematch:60
</code></pre></div>    </div>
    <ul>
      <li><img src="/images/2023/3_1589419182713602048.jpg" alt="" /></li>
    </ul>
  </li>
  <li>Nvim supports <a href="https://editorconfig.org">editorconfig</a>, and <a href="https://github.com/neovim/neovim/pull/21633">enables it</a> by default. Nvim detects “.editorconfig” files in your project and applies the settings.
    <ul>
      <li>To opt-out of this feature, add this to your config:
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim.g.editorconfig_enable = false
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Plugins can provide a <a href="https://neovim.io/doc/user/map.html#%3Acommand-preview">live preview</a> of user-defined commands.
    <ul>
      <li>This extends the builtin <code class="language-plaintext highlighter-rouge">'inccommand'</code> feature (since 2017), which show the effects of <code class="language-plaintext highlighter-rouge">:substitute</code> (<code class="language-plaintext highlighter-rouge">:s/foo/bar</code>) as you type.</li>
      <li>Example: The <a href="https://github.com/smjonas/live-command.nvim">live-command.nvim</a> plugin adds preview for <code class="language-plaintext highlighter-rouge">:normal</code> and macros:
        <ul>
          <li>
            <video height="360" controls=""><source src="/images/2023/normal-cmd-preview_a84638.mp4" type="video/mp4" /></video>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>You <a href="https://github.com/neovim/neovim/pull/18194">can now</a> implement <a href="https://neovim.io/doc/user/options.html#'inccommand'">‘inccommand’</a> preview for any user-defined command. This builds a foundation for live preview of <code class="language-plaintext highlighter-rouge">:normal</code>, <a href="https://github.com/neovim/neovim/pull/18815">:global</a>, etc.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim.api.nvim_create_user_command(
  'MyCmd',
  my_cmd,
  { …, preview = my_cmd_preview })
</code></pre></div>    </div>
  </li>
  <li>The <code class="language-plaintext highlighter-rouge">:write</code> command <a href="https://github.com/neovim/neovim/issues/19884">gained</a> the <code class="language-plaintext highlighter-rouge">++p</code> flag, so this creates parent/dir/ if it doesn’t exist:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:edit parent/dir/file.txt
:write ++p
</code></pre></div>    </div>
  </li>
  <li>Nvim <a href="https://github.com/neovim/neovim/pull/15583">now stores</a> “session data” (shada, persistent undo, …) in <code class="language-plaintext highlighter-rouge">$XDG_STATE_HOME</code> (~/.local/state) instead of <code class="language-plaintext highlighter-rouge">$XDG_CACHE_HOME</code> (~/.cache). This change only affects macOS/unix, the Windows locations are unchanged.</li>
  <li>Plugins can also use <code class="language-plaintext highlighter-rouge">stdpath('log')</code> to get the recommended location for log files.</li>
  <li><kbd>gO</kbd> in the manpage viewer (<code class="language-plaintext highlighter-rouge">:help :Man</code>) shows an outline (table of contents) in the location list. Now the outline also <a href="https://github.com/neovim/neovim/pull/17558">lists the flags</a>.
    <ul>
      <li><img src="/images/2023/3_1526166272706215938.jpg" alt="" /></li>
    </ul>
  </li>
</ul>

<h2 id="performance">Performance</h2>

<ul>
  <li><a href="https://github.com/neovim/neovim/issues/18604">Filetype detection</a> uses Lua (instead of Vimscript) + “on-demand” strategy =&gt; 7x speedup vs the old filetype.vim, saves 5+ ms on startup:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>before:
  9.0ms: sourcing …/runtime/filetype.vim
after:
  1.3ms: sourcing …/runtime/filetype.lua
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">nvim --startuptime</code> <a href="https://github.com/neovim/neovim/pull/19267">now reports</a> Lua <code class="language-plaintext highlighter-rouge">require()</code> times.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>000.010  000.010: --- NVIM STARTING ---
000.198  000.188: event init
...
026.333  001.109  001.101: require('vim.lsp.protocol')
028.144  000.423  000.423: require('vim.lsp._snippet')
...
</code></pre></div>    </div>
  </li>
  <li>A brief summary of Nvim ‘packpath’ improvements:
    <ul>
      <li><img src="/images/2023/3_1531381005990473730.jpg" alt="" /></li>
    </ul>
  </li>
  <li><a href="https://github.com/kevinhwang91/nvim-ufo">Fast, slick folds</a> provided by a plugin.</li>
</ul>

<h2 id="defaults">Defaults</h2>

<ul>
  <li>‘mouse’ option is <a href="https://github.com/neovim/neovim/pull/19290">set by default</a> (again). Was disabled since 2017 “until a better approach”.  Now we have it:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mouse=nvi
Type ":" (cmdline-mode) to temporarily disable mouse. Right-click shows a popup menu.
Try it!
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="api">API</h2>

<ul>
  <li><a href="https://github.com/neovim/neovim/pull/18231">nvim_parse_cmd()</a> provides the foundation for <code class="language-plaintext highlighter-rouge">nvim_cmd([list])</code> and “user cmd-preview”! And super useful for defining custom cmdline (<code class="language-plaintext highlighter-rouge">:</code>) behavior.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:echo nvim_parse_cmd('.,$g/foo/bar', {})
{
 'cmd': 'global',
 'args': ['/foo/bar'],
 'mods': {…},
 'magic': {'file': v:false, 'bar': v:false}
}
</code></pre></div>    </div>
  </li>
  <li>Use <code class="language-plaintext highlighter-rouge">nvim_cmd()</code> to call any Vim legacy command in a structured way, like <code class="language-plaintext highlighter-rouge">system([...])</code>.
    <ul>
      <li>Don’t need <code class="language-plaintext highlighter-rouge">fnameescape()</code>: special chars are controlled by the <code class="language-plaintext highlighter-rouge">magic</code> param.
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvim_cmd({cmd='vimgrep', args={'/%s/j', '**'}}, {})
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><a href="https://github.com/noib3/nvim-oxi">nvim-oxi</a>: “first-class Rust bindings (FFI to Nvim C) to the rich API exposed by Neovim.”</li>
</ul>

<h2 id="lua">Lua</h2>

<ul>
  <li>Check out the <a href="https://neovim.io/doc/user/lua.html#vim.fs">vim.fs</a> module for filesystem operations.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">vim.fs.find()</code> is now the canonical way to find “root files”, common for LSP configuration.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">vim.cmd</code> is the Lua <code class="language-plaintext highlighter-rouge">nvim_cmd</code> wrapper. It supports calling Ex commands as functions instead of strings:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim.cmd.colorscheme('nightfox')
</code></pre></div>    </div>
  </li>
  <li>Lua plugins <a href="https://zignar.net/2022/11/06/structuring-neovim-lua-plugins/">continue to mature</a>:
    <blockquote>
      <p>“Lua plugins are basically the same as a vim plugin, except the file extension is <code class="language-plaintext highlighter-rouge">.lua</code> instead of <code class="language-plaintext highlighter-rouge">.vim</code> and the file contains Lua code instead of Vimscript.”</p>
    </blockquote>
    <ul>
      <li>This elegant interface required lots of careful work, largely thanks to @bfredl!</li>
    </ul>
  </li>
</ul>

<h2 id="maintenance">Maintenance</h2>

<ul>
  <li>Work by @dundargoc closed two refactor epics started in 2014 and 2017: <a href="https://github.com/neovim/neovim/issues/567">#567</a> <a href="https://github.com/neovim/neovim/issues/7401">#7401</a></li>
  <li><a href="https://twitter.com/teej_dv/status/1575450247173738498">Progress</a> on vim9script =&gt; Nvim-Lua transpiler from core maintainer <a href="https://twitter.com/teej_dv">@teej_dv</a> will enable us to continue pulling test coverage from Vim, plus syntax, ftplugins, and even plugins like cfilter.</li>
  <li><a href="https://github.com/neovim/neovim/releases">Nightly + stable releases</a> now <a href="https://github.com/neovim/neovim/pull/19029">provide</a> a universal binary (ARM/M1, Intel) for macOS 11+.</li>
</ul>

<h2 id="documentation">Documentation</h2>

<p>Automated generation of the <a href="https://neovim.io/doc/user/">online Nvim documentation</a> was rewritten by replacing an old AWK script with Lua + tree-sitter. <a href="https://twitter.com/justinmk/status/1577344345736466432">We can have nice things.</a></p>

<ul>
  <li>Improved styling</li>
  <li>Nested lists</li>
  <li>Soft-wrapped “flow” layout on selected pages (<a href="https://neovim.io/doc/user/luaref.html">example</a>)</li>
  <li>Improved parsing of vim :help tokens</li>
</ul>

<p>Compare the old layout (left) to the new one (right):</p>

<p><img src="/images/2023/3_1564266982698090496.jpg" alt="" /></p>

<h2 id="job-control">Job control</h2>

<p>Nvim now <a href="https://github.com/neovim/neovim/pull/11009">sets</a> the <code class="language-plaintext highlighter-rouge">$NVIM</code> environment variable in <code class="language-plaintext highlighter-rouge">jobstart()</code> and <code class="language-plaintext highlighter-rouge">:terminal</code> jobs, so child processes have an unambiguous hint that they are children of Nvim. The old <code class="language-plaintext highlighter-rouge">$NVIM_LISTEN_ADDRESS</code>, which had conflicting “dual purposes”, is no longer passed to children.</p>

<h2 id="rpc">RPC</h2>

<p>Nvim UIs are just (inverted) plugins. And now <code class="language-plaintext highlighter-rouge">nvim</code> itself is a <a href="https://github.com/neovim/neovim/pull/18375">self-hosting UI</a>: when you run <code class="language-plaintext highlighter-rouge">nvim</code> in a terminal, it starts the TUI as a <code class="language-plaintext highlighter-rouge">nvim --embed</code> child process.</p>

<p><img src="/images/2023/3_1609951283833716739.jpg" alt="" /></p>

<p>Just like Nvim GUIs, you can connect the <code class="language-plaintext highlighter-rouge">nvim</code> TUI to any Nvim server to see its UI! You can try it right now:</p>

<ol>
  <li>Start a server at address <code class="language-plaintext highlighter-rouge">./foo</code> (creates a <code class="language-plaintext highlighter-rouge">foo</code> file in the current directory):
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvim --listen ./foo
</code></pre></div>    </div>
  </li>
  <li>From a different terminal (in the same directory as <code class="language-plaintext highlighter-rouge">./foo</code>), connect <code class="language-plaintext highlighter-rouge">nvim</code> to the server:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvim --remote-ui --server ./foo
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="deprecations">Deprecations</h2>

<ul>
  <li><a href="https://github.com/neovim/neovim/pull/18547#issuecomment-1134613097">Removed the <code class="language-plaintext highlighter-rouge">'insertmode'</code> option</a>, which was used in Vim to implement “easy vim”.
    <ul>
      <li>We’re driving towards making the same behavior possible as a plugin. See <code class="language-plaintext highlighter-rouge">:help 'insertmode'</code>.</li>
    </ul>
  </li>
  <li>cscope support was <a href="https://github.com/neovim/neovim/pull/20545">removed</a>, because it is mostly redundant with the LSP client (<code class="language-plaintext highlighter-rouge">:help lsp</code>).
    <ul>
      <li>Note: ctags support will <em>never</em> be removed, it is far more common and generally useful.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="newsletter" /><summary type="html"><![CDATA[Neovim is the world’s most-loved editor. That’s just science:]]></summary></entry><entry><title type="html">Neovim News #12 - What’s New In Neovim 0.7</title><link href="https://neovim.io/news/2022/04" rel="alternate" type="text/html" title="Neovim News #12 - What’s New In Neovim 0.7" /><published>2022-04-26T00:00:00+00:00</published><updated>2022-04-26T00:00:00+00:00</updated><id>https://neovim.io/news/2022/newsletter</id><content type="html" xml:base="https://neovim.io/news/2022/04"><![CDATA[<blockquote>
  <p>Original article: <a href="https://gpanders.com/blog/whats-new-in-neovim-0-7">https://gpanders.com/blog/whats-new-in-neovim-0-7</a></p>
</blockquote>

<p>Neovim 0.7 was just released, bringing with it lots of new features (and of
course plenty of bug fixes). You can find the full release notes
<a href="https://github.com/neovim/neovim/releases/tag/v0.7.0">here</a>, but in this post I’ll cover just a few of the new
additions.</p>

<h2 id="table-of-contents">Table of Contents</h2>

<ul>
  <li><a href="#lua-everywhere">Lua everywhere!</a></li>
  <li><a href="#distinguishing-modifier-keys">Distinguishing modifier keys</a></li>
  <li><a href="#global-statusline">Global statusline</a></li>
  <li><a href="#filetypelua">filetype.lua</a></li>
  <li><a href="#client-server-communication">Client-server communication</a></li>
  <li><a href="#looking-ahead-to-08">Looking ahead to 0.8</a></li>
</ul>

<h2 id="lua-everywhere">Lua everywhere!</h2>

<p>Neovim 0.5 saw the introduction of Lua as a first-class citizen in the Neovim
ecosystem: Lua could now be used in the user’s init file, plugins,
colorschemes, ftplugins, etc. Basically, anywhere that you could use a <code class="language-plaintext highlighter-rouge">.vim</code>
file, you could now use <code class="language-plaintext highlighter-rouge">.lua</code> instead.</p>

<p>However, there were still some shortcomings in the Lua API at that time.
Notably absent was the ability to create autocommands in Lua, as well as bind
key mappings directly to Lua functions. In order to do either of these things,
users needed to resort to workarounds involving a round trip through Vimscript
conversion, which is a bit clunky:</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- Using a Lua function in a key mapping prior to 0.7</span>
<span class="kd">local</span> <span class="k">function</span> <span class="nf">say_hello</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">"Hello world!"</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">_G</span><span class="p">.</span><span class="n">my_say_hello</span> <span class="o">=</span> <span class="n">say_hello</span>

<span class="n">vim</span><span class="p">.</span><span class="n">api</span><span class="p">.</span><span class="n">nvim_set_keymap</span><span class="p">(</span><span class="s2">"n"</span><span class="p">,</span> <span class="s2">"&lt;leader&gt;H"</span><span class="p">,</span> <span class="s2">"&lt;Cmd&gt;call v:lua.my_say_hello()&lt;CR&gt;"</span><span class="p">,</span> <span class="p">{</span><span class="n">noremap</span> <span class="o">=</span> <span class="kc">true</span><span class="p">})</span>
</code></pre></div></div>

<p>The situation was similar for autocommands and custom user commands.</p>

<p>In Neovim 0.7, it is now possible to use all of the usual configuration
primitives (key mappings, autocommands, user commands, etc.) directly in Lua,
with no Vimscript conversion necessary. This also makes it possible to bind
key mappings and autocommands directly to <em>local</em> Lua functions:</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- Using a Lua function in a key mapping in 0.7</span>
<span class="n">vim</span><span class="p">.</span><span class="n">api</span><span class="p">.</span><span class="n">nvim_set_keymap</span><span class="p">(</span><span class="s2">"n"</span><span class="p">,</span> <span class="s2">"&lt;leader&gt;H"</span><span class="p">,</span> <span class="s2">""</span><span class="p">,</span> <span class="p">{</span>
    <span class="n">noremap</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span>
    <span class="n">callback</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">"Hello world!"</span><span class="p">)</span>
    <span class="k">end</span><span class="p">,</span>
<span class="p">})</span>

<span class="c1">-- Creating an autocommand in 0.7</span>
<span class="n">vim</span><span class="p">.</span><span class="n">api</span><span class="p">.</span><span class="n">nvim_create_autocmd</span><span class="p">(</span><span class="s2">"BufEnter"</span><span class="p">,</span> <span class="p">{</span>
    <span class="n">pattern</span> <span class="o">=</span> <span class="s2">"*"</span><span class="p">,</span>
    <span class="n">callback</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">"Entered buffer "</span> <span class="o">..</span> <span class="n">args</span><span class="p">.</span><span class="n">buf</span> <span class="o">..</span> <span class="s2">"!"</span><span class="p">)</span>
    <span class="k">end</span><span class="p">,</span>
    <span class="n">desc</span> <span class="o">=</span> <span class="s2">"Tell me when I enter a buffer"</span><span class="p">,</span>
<span class="p">})</span>

<span class="c1">-- Creating a custom user command in 0.7</span>
<span class="n">vim</span><span class="p">.</span><span class="n">api</span><span class="p">.</span><span class="n">nvim_create_user_command</span><span class="p">(</span><span class="s2">"SayHello"</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">"Hello "</span> <span class="o">..</span> <span class="n">args</span><span class="p">.</span><span class="n">args</span><span class="p">)</span>
<span class="k">end</span><span class="p">,</span> <span class="p">{</span>
    <span class="n">nargs</span> <span class="o">=</span> <span class="s2">"*"</span><span class="p">,</span>
    <span class="n">desc</span> <span class="o">=</span> <span class="s2">"Say hi to someone"</span><span class="p">,</span>
<span class="p">})</span>
</code></pre></div></div>

<p>You may notice that <code class="language-plaintext highlighter-rouge">nvim_set_keymap</code> must set the Lua callback as a key in
the final table argument, while <code class="language-plaintext highlighter-rouge">nvim_create_user_command</code> can pass the
callback function directly as a positional parameter. This is a consequence of
Neovim’s strict API contract, which mandates that after an API function makes
it into a stable release, it’s signature <em>must not</em> change in any way.
However, because <code class="language-plaintext highlighter-rouge">nvim_create_user_command</code> is a new API function, we are able
to add a bit of convenience by making its second argument accept either a
string or a function.</p>

<p>Neovim 0.7 also includes a Lua-only convenience function <code class="language-plaintext highlighter-rouge">vim.keymap.set</code> for
easily creating new key mappings:</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vim</span><span class="p">.</span><span class="n">keymap</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">"n"</span><span class="p">,</span> <span class="s2">"&lt;leader&gt;H"</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span> <span class="nb">print</span><span class="p">(</span><span class="s2">"Hello world!"</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">vim.keymap.set</code> differs from <code class="language-plaintext highlighter-rouge">nvim_set_keymap</code> in the following ways:</p>

<ul>
  <li>It can accept either a string or a Lua function as its 3rd argument.</li>
  <li>It sets <code class="language-plaintext highlighter-rouge">noremap</code> by default, as this is what users want 99% of the
time.</li>
</ul>

<p>The help docs contain much more information: run <code class="language-plaintext highlighter-rouge">:h vim.keymap.set</code> in Neovim
to learn more.</p>

<p>Finally, users can now use the API function <code class="language-plaintext highlighter-rouge">nvim_set_hl</code> to modify global
highlight groups (the equivalent of using <code class="language-plaintext highlighter-rouge">:hi</code>), opening the door to pure-Lua
colorschemes.</p>

<h2 id="distinguishing-modifier-keys">Distinguishing modifier keys</h2>

<p>Being a terminal based application, Neovim has long been subject to the
constraints of terminal emulators, one of which being that many keys are
encoded the same and thus indistinguishable to applications running in the
terminal. For example, <code class="language-plaintext highlighter-rouge">&lt;Tab&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;C-I&gt;</code> use the same representation, as do
<code class="language-plaintext highlighter-rouge">&lt;CR&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;C-M&gt;</code>. This has long meant that it is not possible to separately
map <code class="language-plaintext highlighter-rouge">&lt;C-I&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;Tab&gt;</code>: mapping one necessarily maps both.</p>

<p>This has long been a point of annoyance and there are multiple solutions in
the wild to address it. Neovim uses Paul Evans’ <a href="http://www.leonerd.org.uk/code/libtermkey/">libtermkey</a>, which in turn
makes use of Evans’ own <a href="http://www.leonerd.org.uk/hacks/fixterms/">fixterms</a> proposal for encoding modifier keys in an
unambiguous way. As long as the terminal emulator controlling Neovim sends
keys encoded in this way, Neovim can correctly interpret them.</p>

<p>Neovim 0.7 now correctly <a href="https://github.com/neovim/neovim/pull/17825">distinguishes these modifier key combos</a> in
its own input processing, so users can now map e.g. <code class="language-plaintext highlighter-rouge">&lt;Tab&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;C-I&gt;</code>
separately. In addition, Neovim sends an <a href="https://github.com/neovim/neovim/pull/17844">escape sequence</a> on startup
that signals to the controlling terminal emulator that it supports this style
of key encoding. Some terminal emulators (such as iTerm2, foot, and tmux) use
this sequence to programatically enable the different encoding.</p>

<p>A note of warning: this cuts both ways! You may find that existing mappings to
<code class="language-plaintext highlighter-rouge">&lt;Tab&gt;</code> or <code class="language-plaintext highlighter-rouge">&lt;C-I&gt;</code> (or <code class="language-plaintext highlighter-rouge">&lt;CR&gt;</code>/<code class="language-plaintext highlighter-rouge">&lt;C-M&gt;</code>) no longer work. The fix is easy,
however; simply modify your mapping to use the actual key you want to use.</p>

<p>In addition to disambiguating these modifier pairs, this also enables new
key mappings that were not possible before, such as <code class="language-plaintext highlighter-rouge">&lt;C-;&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;C-1&gt;</code>.</p>

<p>Support for this depends largely on the terminal you are using, so this will
not affect all users.</p>

<h2 id="global-statusline">Global statusline</h2>

<p>Neovim 0.7 introduces a new “global” statusline, which can be enabled by
setting <code class="language-plaintext highlighter-rouge">laststatus=3</code>. Instead of having one statusline per window, the
global statusline always runs the full available width of Neovim’s containing
window. This makes it useful to display information that does not change
per-window, such as VCS information or the current working directory. Many
statusline plugins are already making use of this new feature.</p>

<h2 id="filetypelua">filetype.lua</h2>

<p>In Neovim 0.7 there is a new (experimental) way to do filetype detection. A
quick primer on filetype detection: when you first start Neovim it sources a
file called <code class="language-plaintext highlighter-rouge">filetype.vim</code> in the <code class="language-plaintext highlighter-rouge">$VIMRUNTIME</code> directory. This file creates
several hundred <code class="language-plaintext highlighter-rouge">BufRead,BufNewFile</code> autocommands whose sole purpose is to
infer the filetype of the file based on information about the file, most
commonly the file’s name or extension, but sometimes also using the file’s
contents.</p>

<p>If you profile your startup time with <code class="language-plaintext highlighter-rouge">nvim --startuptime</code> you will notice
that <code class="language-plaintext highlighter-rouge">filetype.vim</code> is one of the slowest files to load. This is because it is
expensive to create so many autocommands. An alternative way to do filetype
detection is to instead create one single autocommand that fires for <em>every</em>
new buffer and then tries to match the filetype through a sequential series of
steps. This is what the new <code class="language-plaintext highlighter-rouge">filetype.lua</code> does.</p>

<p>In addition to using a single autocommand, <code class="language-plaintext highlighter-rouge">filetype.lua</code> uses a table-based
lookup structure, meaning that in many cases filetype detection happens in
constant time. And if your Neovim is compiled with LuaJIT (which it most
likely is), you also get the benefit of just-in-time compilation for this
filetype matching.</p>

<p>This feature is currently <em>opt-in</em> as it does not yet completely match all of
the filetypes covered by <code class="language-plaintext highlighter-rouge">filetype.vim</code>, although it is very close (I have
been using it exclusively for many months without any issues). There are two
ways to opt-in to this feature:</p>

<ol>
  <li>
    <p>Use <code class="language-plaintext highlighter-rouge">filetype.lua</code>, but fallback to <code class="language-plaintext highlighter-rouge">filetype.vim</code></p>

    <p>Add <code class="language-plaintext highlighter-rouge">let g:do_filetype_lua = 1</code> to your <code class="language-plaintext highlighter-rouge">init.vim</code> file. This prevents any
regressions in filetype matching and ensures that filetypes are always
detected <em>at least</em> as well as they are with <code class="language-plaintext highlighter-rouge">filetype.vim</code>. However, you
will pay the startup time cost of both <code class="language-plaintext highlighter-rouge">filetype.lua</code> and <code class="language-plaintext highlighter-rouge">filetype.vim</code>.</p>
  </li>
  <li>
    <p>Use only <code class="language-plaintext highlighter-rouge">filetype.lua</code> and do not load <code class="language-plaintext highlighter-rouge">filetype.vim</code> at all</p>

    <p>Add both <code class="language-plaintext highlighter-rouge">let g:do_filetype_lua = 1</code> and <code class="language-plaintext highlighter-rouge">let g:did_load_filetypes = 0</code> to
your <code class="language-plaintext highlighter-rouge">init.vim</code>. This will exclusively use <code class="language-plaintext highlighter-rouge">filetype.lua</code> for filetype
matching and provides all of the performance benefits outlined above, with
the (small) risk of missed filetype detection.</p>
  </li>
</ol>

<p>In addition to performance benefits, <code class="language-plaintext highlighter-rouge">filetype.lua</code> also makes it easy to
add custom filetypes. Simply create a new file <code class="language-plaintext highlighter-rouge">~/.config/nvim/filetype.lua</code>
and call <code class="language-plaintext highlighter-rouge">vim.filetype.add</code> to create new matching rules. For example:</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vim</span><span class="p">.</span><span class="n">filetype</span><span class="p">.</span><span class="n">add</span><span class="p">({</span>
    <span class="n">extension</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">foo</span> <span class="o">=</span> <span class="s2">"fooscript"</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">filename</span> <span class="o">=</span> <span class="p">{</span>
        <span class="p">[</span><span class="s2">"Foofile"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"fooscript"</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">pattern</span> <span class="o">=</span> <span class="p">{</span>
        <span class="p">[</span><span class="s2">"~/%.config/foo/.*"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"fooscript"</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">vim.filetype.add</code> takes a table with 3 (optional) keys corresponding to
“extension”, “filename”, and “pattern” matching. The value of each table entry
can either be a string (in which case it is interpreted as the filetype) or a
function. For example, you may want to override Neovim’s default behavior of
always classifying <code class="language-plaintext highlighter-rouge">.h</code> files as C++ headers by using a heuristic that only
sets the filetype to C++ if the header file includes another C++-style header
(i.e. one without a trailing <code class="language-plaintext highlighter-rouge">.h</code>):</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vim</span><span class="p">.</span><span class="n">filetype</span><span class="p">.</span><span class="n">add</span><span class="p">({</span>
    <span class="n">extension</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">h</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">bufnr</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">vim</span><span class="p">.</span><span class="n">fn</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="s2">"</span><span class="se">\\</span><span class="s2">C^#include &lt;[^&gt;.]\\+&gt;$"</span><span class="p">,</span> <span class="s2">"nw"</span><span class="p">)</span> <span class="o">~=</span> <span class="mi">0</span> <span class="k">then</span>
                <span class="k">return</span> <span class="s2">"cpp"</span>
            <span class="k">end</span>
            <span class="k">return</span> <span class="s2">"c"</span>
        <span class="k">end</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">})</span>
</code></pre></div></div>

<p>We are bringing <code class="language-plaintext highlighter-rouge">filetype.lua</code> closer to full parity with <code class="language-plaintext highlighter-rouge">filetype.vim</code> every
day. The goal is to make it the default in Neovim 0.8 (with the ability to
opt-out to the traditional <code class="language-plaintext highlighter-rouge">filetype.vim</code>).</p>

<h2 id="client-server-communication">Client-server communication</h2>

<p>Neovim 0.7 brings some of the features of <a href="https://github.com/mhinz/neovim-remote">neovim-remote</a> into the core
editor. You can now use <code class="language-plaintext highlighter-rouge">nvim --remote</code> to open a file in an already running
instance of Neovim. An example:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># In one shell session</span>
nvim <span class="nt">--listen</span> /tmp/nvim.sock

<span class="c"># In another shell session, opens foo.txt in the first Nvim instance</span>
nvim <span class="nt">--server</span> /tmp/nvim.sock <span class="nt">--remote</span> foo.txt
</code></pre></div></div>

<p>One use case for the new remote functionality is the ability to open files
from the embedded terminal emulator in the primary Neovim instance, rather
than creating an embedded Neovim instance running inside Neovim itself.</p>

<h2 id="looking-ahead-to-08">Looking ahead to 0.8</h2>

<p>Neovim is a loosely structured project of motivated individuals who do the
work for fun; thus, any roadmap is always a bit of a guessing game. However,
there are some things already brewing that you <em>might</em> see in Neovim 0.8:</p>

<ul>
  <li>Improvements to Treesitter support</li>
  <li>“Projects” support for LSP</li>
  <li><a href="https://github.com/neovim/neovim/pull/9496">Anti-conceal</a></li>
  <li><a href="https://github.com/neovim/neovim/pull/10071">Fully remote TUI</a></li>
  <li>And more…</li>
</ul>]]></content><author><name></name></author><category term="newsletter" /><summary type="html"><![CDATA[Original article: https://gpanders.com/blog/whats-new-in-neovim-0-7]]></summary></entry><entry><title type="html">Neovim News #11 - The Christmas Issue</title><link href="https://neovim.io/news/2021/07" rel="alternate" type="text/html" title="Neovim News #11 - The Christmas Issue" /><published>2021-07-12T00:00:00+00:00</published><updated>2021-07-12T00:00:00+00:00</updated><id>https://neovim.io/news/2021/newsletter</id><content type="html" xml:base="https://neovim.io/news/2021/07"><![CDATA[<blockquote>
  <p>The <em>real</em> 0.5 was the friends we made along the way</p>
</blockquote>

<p>The long-awaited release of Neovim v0.5.0 finally happened on July 2, 2021. It took longer than everybody had hoped for, but it was worth the wait: With over 4000 commits, it is so big that it broke some of the release tooling. So these notes will not be able to touch on each of the many changes that were made over the course of development and only focus on the most user-visible improvements, of which the biggest are</p>
<ol>
  <li>Lua as a first-class scripting and configuration language,</li>
  <li>Language server protocol (LSP),</li>
  <li>Treesitter (early access).</li>
</ol>

<h2 id="lua-everywhere">Lua everywhere!</h2>

<p>Neovim 0.5 went far in making Lua a first-class scripting language for Neovim, both for plugin development and for user configuration.</p>

<p>As a reminder, Lua is a small scripting language designed for embedding and is often used in, e.g., game development. Furthermore, there is a just-in-time compiler (<a href="https://github.com/LuaJIT/LuaJIT">LuaJIT</a>, which Neovim is built with on platforms where it is available) that can provide impressive performance on relevant tasks. In essence, Lua was chosen over other languages because it is</p>
<ol>
  <li>tiny – perfect for embedding (as opposed to a remote plugin host),</li>
  <li>fast – LuaJIT can be orders of magnitude faster than Vimscript (and non-JITed Lua),</li>
  <li>simple – small but expressive syntax (Lua 5.1) made for scripting, with Neovim itself providing a “standard library” by exposing internal functions via an API.</li>
</ol>

<p>For more details on this choice, see Justin M Keyes’ <a href="https://www.youtube.com/watch?v=Bt-vmPC_-Ho">presentation at Vim Conf 2019 </a> and TJ DeVries’ <a href="https://www.youtube.com/watch?v=IP3J56sKtn0">presentation at Vimconf.live</a>.</p>

<p>Let’s look at what this means for plugin authors and users.</p>

<h3 id="lua-plugins">Lua plugins</h3>

<p>Neovim exposes its API natively to Lua via, e.g., <code class="language-plaintext highlighter-rouge">vim.api.nvim_open_win()</code>. It also provides methods for accessing vimscript (ex) commands and variables via, e.g., <code class="language-plaintext highlighter-rouge">vim.cmd("echo 'foo'")</code> and <code class="language-plaintext highlighter-rouge">vim.g.syntax_on</code>, respectively. This allows writing plugins with the same capabilities as those written in Vimscript while exploiting the performance of Lua(JIT) at core programming language tasks like loops. It is also possible to make use of Lua’s own <code class="language-plaintext highlighter-rouge">luarocks</code> plugin ecosystem.</p>

<p>Correspondingly, over the course of the 0.5 development cycle, there has been an explosion in the number of Lua plugins, ranging from rewrites of popular Vimscript plugins to completely new ones that would not have been possible in Vimscript – often from contributors who were completely new to (neo)vim plugin development and were averse to learning Vimscript for that task. As a positive side effect of the long development cycle, many of these are already fully-featured and stable at the time of the 0.5 release!</p>

<p>Here is a small and non-representative list of Lua plugins:</p>

<ul>
  <li><a href="https://github.com/nvim-lua/plenary.nvim">Plenary</a> – A library of useful utilities for developing Neovim plugins (some of which will later be integrated into core).</li>
  <li><a href="https://github.com/wbthomason/packer.nvim">Packer</a> – A package manager with support for plugin dependencies, lazy-loading, and installing luarocks.</li>
  <li><a href="https://github.com/nvim-telescope/telescope.nvim">Telescope</a> – A highly extendable fuzzy finder over lists.</li>
  <li><a href="https://github.com/lewis6991/gitsigns.nvim">Gitsigns</a> – A plugin for showing and interacting with changes on files in a git repository (asynchronously).</li>
  <li><a href="https://github.com/hrsh7th/nvim-compe">Nvim-compe</a> – An auto completion framework for various sources, including Neovim’s builtin LSP client.</li>
  <li><a href="https://github.com/mfussenegger/nvim-dap">Nvim-dap</a> – A debug adapter protocol implementation for step-through debugging of your code.</li>
  <li><a href="https://github.com/norcalli/nvim-colorizer.lua">Colorizer</a> – A high-performance color highlighter for Neovim without any external dependencies.</li>
  <li><a href="https://github.com/mhartington/formatter.nvim">Formatter</a> – A plugin for asynchronously executing external formatting tools on the current buffer or range.</li>
  <li><a href="https://github.com/phaazon/hop.nvim">Hop.nvim</a> - An <a href="https://github.com/easymotion/vim-easymotion">EasyMotion</a>-like movement plugin that does not need to mess with your buffer.</li>
  <li><a href="https://github.com/TimUntersberger/neogit">Neogit</a> - A <a href="https://github.com/magit/magit">Magit</a>-like Git interface.</li>
</ul>

<p>A much more comprehensive list of Neovim plugins can be found at the user-contributed <a href="https://github.com/rockerBOO/awesome-neovim">Awesome Neovim</a> collection.</p>

<p>Not all of these plugins are actually written in Lua: there are many other languages (some of which are typed) that compile to Lua, e.g.,</p>
<ul>
  <li><a href="https://fennel-lang.org">Fennel(Lisp)</a> via <a href="https://github.com/Olical/aniseed">Aniseed</a> or <a href="https://github.com/jaawerth/fennel-nvim">Fennel-nvim</a>,</li>
  <li><a href="https://github.com/teal-language/tl">Teal</a>,</li>
  <li><a href="https://amulet.works">Amulet ML</a>,</li>
  <li><a href="https://github.com/leafo/moonscript">MoonScript</a> via <a href="https://github.com/svermeulen/nvim-moonmaker">nvim-moonmaker</a>,</li>
  <li><a href="https://github.com/tjdevries/vim9jit">Vim9script</a> (as a proof of concept).</li>
</ul>

<h3 id="lua-config">Lua config</h3>

<p>It is also possible to write user configuration in Lua: If there is an <code class="language-plaintext highlighter-rouge">init.lua</code>, it is read <em>instead of</em> <code class="language-plaintext highlighter-rouge">init.vim</code> (these cannot coexist, and having both in your config directory will give an error), and <code class="language-plaintext highlighter-rouge">.lua</code> files in runtime directories (<code class="language-plaintext highlighter-rouge">plugin/</code>, <code class="language-plaintext highlighter-rouge">colorscheme/</code>, <code class="language-plaintext highlighter-rouge">after/</code> etc.) are sourced in addition to (after) Vimscript files. Note that this is entirely optional and not needed to enjoy the new functions introduced in Neovim 0.5; furthermore, not every Vimscript configuration option has a fully native Lua equivalent yet. Extending the native API to cover these as well is part of the goal for Neovim 0.6.</p>

<p>For a comprehensive and up-to-date guide on using Lua for Neovim scripting and configuration, see  <a href="https://github.com/nanotee/nvim-lua-guide">Getting started using Lua in Neovim</a>. A good model for a Lua configuration using <code class="language-plaintext highlighter-rouge">init.lua</code> is <a href="https://github.com/mjlbach/defaults.nvim">Defaults.nvim</a>.</p>

<h2 id="language-server-protocol-lsp">Language Server Protocol (LSP)</h2>

<p>The <a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a> (LSP) is an open, JSON-RPC-based protocol for communication between code editors and language servers, which provide programming language-specific features such as</p>

<ul>
  <li>completion,</li>
  <li>hover/tooltips,</li>
  <li>go to definition,</li>
  <li>show/go to references,</li>
  <li>show method signatures,</li>
  <li>rename,</li>
  <li>code actions (automatic formatting, organize imports, …),</li>
</ul>

<p>and more.</p>

<p>The idea is to separate these features into an editor-independent but language-specific server and a language-independent but editor-specific client, which communicate via the Language Server Protocol over RPC. (It should be pointed out that not every server implements every feature, and the quality of the responses can vary wildly. The “reference implementation” in VS Code also often adds non-standard features that are not covered by the LSP itself.)</p>

<p>Neovim 0.5 provides an LSP client written (mostly) in Lua that provides a highly configurable and extensible way of accessing these features. It does not aim at competing with more feature-rich and “out-of-the-box” plugins like <a href="https://github.com/neoclide/coc.nvim">CoC.nvim</a> but is meant to be tailored to your preferences (while still being useable with reasonable defaults). For an overview, see TJ DeVries’ <a href="https://www.youtube.com/watch?v=C9X5VF9ASac">Vimconf.live presentation</a> and his <a href="https://www.youtube.com/watch?v=ArwDgvYEZYk">shorter video</a>.</p>

<p>For many language servers, <a href="https://github.com/neovim/nvim-lspconfig">Nvim-lspconfig</a> already provides the necessary configuration to set everything up easily. Alternatively, some languages also have specific LSP plugins that provide a more integrated setup, e.g., for <a href="https://github.com/mfussenegger/nvim-jdtls">Java</a> and <a href="https://github.com/ckipp01/nvim-metals">Scala</a>.</p>

<p>To learn more about LSP and how to use it in Neovim, visit <a href="https://github.com/neovim/nvim-lspconfig">Nvim-lspconfig</a> (including its <a href="https://github.com/neovim/nvim-lspconfig/wiki">Wiki</a>) and read <a href="https://neovim.io/doc/user/lsp.html"><code class="language-plaintext highlighter-rouge">:h lsp</code></a>.</p>

<p>Expect more work on LSP during the 0.5.x development cycle to provide improved configuration options and better coverage of the latest LSP specification (version 3.16 at the point of writing), including semantic highlighting.</p>

<h2 id="tree-sitter">Tree-sitter</h2>

<p>Neovim 0.5 adds <strong>experimental</strong> support for tree-sitter, a library that parses a piece of code into a syntax tree in an incremental and error-resilient way; this means that reparsing that code after an edit is very fast, and parsing error due to, e.g., typos remain localized and do not break parsing further down. This tree can then be efficiently queried to obtain syntax information about the code. This allows for improved and/or faster</p>

<ul>
  <li>syntax highlighting,</li>
  <li>code navigation,</li>
  <li>refactoring,</li>
  <li>text objects and motions,</li>
  <li>searching and replacing,</li>
</ul>

<p>and more. Tree-sitter also makes it easy to highlight parts of a file differently if they contain code in a different language. To learn more about tree-sitter, watch <a href="https://www.youtube.com/watch?v=Jes3bD6P0To&amp;feature=youtu.be&amp;t=232">Tree-sitter - A new parsing system for programming tools - Max Brunsfield</a>.</p>

<p>The goal is to replace the current vim regular expression-based syntax with tree-sitter, not only for better and faster syntax highlighting but also for new and improved ways of structured text editing. However, tree-sitter support in 0.5 should still be considered as “early access”: It works well enough to test out and see what is possible, but it should not be relied on for productive use due to a number of serious bugs and performance regressions that need to be addressed before tree-sitter in Neovim can be declared stable. Note also that enabling tree-sitter based highlighting for a language currently disables the internal regex-based syntax engine <em>completely</em> for this file type, which may break other features that rely on it. Fixing these issues and improving the API will be a major focus of the development cycle leading up to the 0.6 release.</p>

<p>Also, Neovim itself only provides a (Lua) API for generating and querying the syntax tree using the bundled tree-sitter library; see <a href="https://neovim.io/doc/user/treesitter.html"><code class="language-plaintext highlighter-rouge">:h treesitter</code></a>. User-facing features like the ones mentioned above are implemented in plugins like</p>

<ul>
  <li><a href="https://github.com/nvim-treesitter/nvim-treesitter">Nvim-treesitter</a> – Highlighting, folds, incremental selection.</li>
  <li><a href="https://github.com/nvim-treesitter/playground">Playground</a> – Utility functions to easily show the parsed tree and run queries against it.</li>
  <li><a href="https://github.com/nvim-treesitter/nvim-treesitter-textobjects">Nvim-treesitter-textobjects</a> – Better text objects for vim-style motions and operators.</li>
  <li><a href="https://github.com/nvim-treesitter/nvim-treesitter-refactor">Nvim-refactor</a> – Highlight definitions,  navigation, smart rename.</li>
  <li><a href="https://github.com/vigoux/architext.nvim">Architext</a> – structural text editing (i.e., syntax-aware search and replace).</li>
</ul>

<p>More information on using these features can be found in the <a href="https://github.com/nvim-treesitter/nvim-treesitter">Nvim-treesitter README</a> or by watching Thomas Vigouroux’s <a href="https://youtu.be/EReNOGuMBmo?t=515">Vimconf.live presentation</a>.</p>

<h3 id="whats-the-difference-between-lsp-and-tree-sitter">What’s the difference between LSP and tree-sitter?</h3>

<p>This is a common question, especially since LSP as of version 3.16 provides “semantic highlighting”. In short, tree-sitter operates on a single file, parsing the file into a syntax tree which is used to support the variety of enhanced code navigation and manipulation functions. On the other hand, language servers operate across multiple files and project libraries, using various different, server-dependent, methods for parsing each file’s syntax tree. (Of course, tree-sitter is one possible choice for this purpose, and is in fact used by, e.g., <a href="https://github.com/bash-lsp/bash-language-server">bash-language-server</a> and <a href="https://github.com/wasm-lsp/wasm-language-server">wasm-language-server</a>.)</p>

<p>In particular, this means that language servers can use <em>semantic</em> information from a different file to annotate the tree for the current file: For example, a variable declared as <code class="language-plaintext highlighter-rouge">const</code> in one file can be highlighted in red if it is used in a <em>different</em> file – something that tree-sitter cannot do since it only has access to the latter file when highlighting.</p>

<p>For more details, watch TJ DeVries’ <a href="https://www.youtube.com/watch?v=c17j09vY5sw">presentation on this topic</a>.</p>

<h2 id="other-changes">Other changes</h2>

<p>Of course, these were not the only <a href="https://github.com/neovim/neovim/commit/a5ac2f45ff84a688a09479f357a9909d5b914294">major changes in 0.5</a>. Here is a short summary of representative new features.</p>

<h3 id="decorations">Decorations</h3>

<p>There is an improved decoration provider API that allows setting and interacting with extmarks (invisible anchored text markers that move when surrounding text is edited), virtual text (text overlays that can now be drawn at any position on screen), and highlights (which is heavily leveraged by nvim-treesitter).</p>

<p>This mockup from a <a href="https://neovim.discourse.group/t/wip-animated-notifications-plugin/448">post</a> by <a href="https://github.com/sunjon">@sunjon</a> shows what can be achieved with this API:</p>

<p><img src="/images/news11_notif1.gif" style="max-width:400px; height:auto;" title="Notification mockup 1" /></p>

<h3 id="floats">Floats</h3>

<p>The API for floating windows now includes a “z-index” (allowing for control over how floating windows stack) and support for borders.</p>

<h3 id="highlight-on-yank">Highlight on yank</h3>

<p>Neovim now has a built-in function to briefly highlight the yanked region (similarly to https://github.com/machakann/vim-highlightedyank), configurable from Lua. To use it, you can add the following to your <code class="language-plaintext highlighter-rouge">init.vim</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>au TextYankPost * lua vim.highlight.on_yank {higroup="IncSearch", timeout=150, on_visual=true}
</code></pre></div></div>
<p>See <code class="language-plaintext highlighter-rouge">:h vim.highlight.on_yank()</code> for more configuration options.</p>

<h3 id="vim-patches">Vim patches</h3>

<p>Of the over 4000 commits in this release, about 1000 were patches and runtime updates ported from Vim – nearly all of them by or with the help of the amazing <a href="https://github.com/janlazo">@janlazo</a>. In particular, the runtime files (syntax files, documentation, etc.) are fully synced with Vim up to <a href="https://github.com/neovim/neovim/pull/14424">May 2021</a>, with many later changes already included as well.</p>

<h2 id="community">Community</h2>

<p>In keeping with the motto of this newsletter, one of the most noticeable positive changes was the growth of the community and of new ways of interacting with it.</p>

<h3 id="discourse">Discourse</h3>

<p>Previously, support requests and discussions were spread across Reddit, Gitter, and GitHub Discussions and were either ephemeral or hard to search for. We have now consolidated around a new <a href="https://neovim.discourse.group">Neovim Discourse</a>, which is a free and open source forum platform with mailing list and RSS features, in addition to a nice web interface. The Neovim Discourse is an official core project and moderated by core team members.</p>

<h3 id="matrix">Matrix</h3>

<p>The official chatroom for Neovim is on <a href="https://gitter.im/neovim/neovim">Gitter</a>. After the acquisition of Gitter by Matrix (a federated chat protocol), this room can now also be accessed from <a href="https://app.element.io/#/room/#neovim:matrix.org">Matrix</a>; it is also bridged to the IRC network <a href="https://libera.chat">Libera.chat</a>. Due to the increasing number of users, there are now additional, more specific rooms for <a href="https://app.element.io/#/room/#nvim-dev:matrix.org">development of and around neovim</a>, <a href="https://app.element.io/#/room/#neovim-guis:matrix.org">GUIs</a>, and <a href="https://app.element.io/#/room/#neovim-chat:matrix.org">off-topic chat</a>.</p>

<p>(The links above are to the rooms accessed through <a href="https://app.element.io">Element</a>, a web-based Matrix client; you can also access it through any of the many other <a href="https://matrix.org/clients/">Matrix clients</a>.)</p>

<h3 id="vimconflive">Vimconf.live</h3>

<p>Due to the global COVID-19 pandemic, VimConf 2020 unfortunately had to be canceled. In its place, a virtual <a href="https://www.vimconf.live">Vimconf.live</a> conference was held, with 16 speakers and over 1000 registered participants from 12 countries. If you have missed it, you can watch the lectures on the <a href="https://www.youtube.com/playlist?list=PLcTu2VkAIIWzD2kicFNHN2c35XQCeZdsv">Youtube playlist</a>.</p>

<h3 id="twitch">Twitch</h3>

<p>Another effect of the pandemic was the rise of interest in the live streaming of open source development on <a href="https://twitch.tv">Twitch</a>. Many of the speakers at Vimconf.live are active streamers; in particularly, <a href="https://www.twitch.tv/teej_dv">TJ DeVries</a> regularly streams his work on Neovim as “open open source”, and the release of Neovim 0.5 was streamed <a href="https://www.twitch.tv/videos/1074486936">live on his channel</a>. (<strong>Update:</strong> An edited playlist of the release stream is now on <a href="https://www.youtube.com/playlist?list=PLep05UYkc6wSN7MRsO0nvRz9FzsnE49z9">YouTube</a>.)</p>

<h3 id="neovim-development">Neovim development</h3>

<p>The number of people active in Neovim development also grew. Between 0.4.4 and 0.5.0, there were 301 unique commit authors, compared to 112 between 0.3.8 and 0.4.4 (a comparable time frame).</p>

<h2 id="sponsorship">Sponsorship</h2>

<p>You can now sponsor Neovim via <a href="https://github.com/sponsors/neovim">Github Sponsors</a> or <a href="https://opencollective.com/neovim">OpenCollective</a>. (<a href="https://diziet.dreamwidth.org/5938.html">BountySource began introducing worrying changes to their Terms of Service agreement</a> and is therefore no longer recommended.)</p>

<h2 id="whats-next">What’s next?</h2>

<p>As already mentioned, further improvements to the headlight features introduced in 0.5 will happen over the 0.5.x release cycle:</p>

<ul>
  <li>Lua API – Support for more native Lua objects (<a href="https://github.com/neovim/neovim/pull/14661">autocommands</a>, <a href="https://github.com/neovim/neovim/pull/14661">mappings</a>, <a href="https://github.com/neovim/neovim/pull/11613">commands</a>).</li>
  <li>LSP – Improved configuration API, full 3.16 compliance (including <a href="https://github.com/neovim/neovim/pull/14122">semantic highlighting</a>).</li>
</ul>

<p>Making tree-sitter a stable and faster replacement for syntax highlighting (and beyond) is the major goal for the 0.6.0 release. This includes fundamental work on the decorations API to allow for things like in-line folding or inserting virtual lines and columns (“anti-conceal”).</p>

<p>Beyond that, notable goals are <a href="https://github.com/neovim/neovim/pull/12593">better file change detection</a> as well as further decoupling the TUI (terminal UI) from the Neovim core with the goal of allowing remote TUI instances.</p>

<p>Finally, we are aiming for more regular and frequent releases (at least for patch versions), which will hopefully remove the need for a “neovim 0.6 when?” meme for a change.</p>

<h2 id="thanks">Thanks</h2>

<p>A big thank you to everyone involved in the project that helped make Neovim 0.5 a reality – be they contributors, sponsors, bug-reporters, or supporters. In lieu of full credits, here are some of the people you can thank for the features listed in this letter:</p>

<ul>
  <li><a href="https://github.com/tjdevries">@tjdevries</a>, <a href="https://github.com/h-michael">@h-michael</a>, <a href="https://github.com/norcalli">@norcalli</a>, and <a href="https://github.com/mjlbach">@mjlbach</a> for the LSP client;</li>
  <li><a href="https://github.com/vigoux">@vigoux</a>, <a href="https://github.com/bfredl">@bfredl</a>, <a href="https://github.com/theHamsta">@theHamsta</a> and the <a href="https://github.com/nvim-treesitter/nvim-treesitter/graphs/contributors">nvim-treesitter team</a> for the tree-sitter integration;</li>
  <li><a href="https://github.com/janlazo">@janlazo</a> for the tireless (and often thankless) work of porting patches and runtime updates from vim;</li>
  <li>and last but not least <a href="https://github.com/bfredl">@bfredl</a> for the decorations API, floating windows, a variety of similar feats of C-code wizardry, and for taking <code class="language-plaintext highlighter-rouge">:smile</code> seriously.</li>
</ul>

<p>Finally, thank you to <a href="https://github.com/justinmk">@justinmk</a> and <a href="https://github.com/brammool">@brammool</a> for your foundational work and your vision – the *vim community is stronger together!</p>]]></content><author><name></name></author><category term="newsletter" /><summary type="html"><![CDATA[The real 0.5 was the friends we made along the way]]></summary></entry><entry><title type="html">Newsletter #10 - Neovim v0.4.4</title><link href="https://neovim.io/news/2020/10/" rel="alternate" type="text/html" title="Newsletter #10 - Neovim v0.4.4" /><published>2020-10-28T00:00:00+00:00</published><updated>2020-10-28T00:00:00+00:00</updated><id>https://neovim.io/news/2020/newsletter</id><content type="html" xml:base="https://neovim.io/news/2020/10/"><![CDATA[<h2 id="what-is-neovim">What is Neovim?</h2>

<p>Neovim is a fork of the venerable text-editor vim, focused on extensibility and
usability. It is not a rewrite but a continuation and extension of Vim. Many
clones and derivatives exist, some very clever—but none are Vim. Neovim is built
for users who want the good parts of Vim, and more. See a list of differences
via <a href="https://neovim.io/doc/user/vim_diff.html">:help vim-differences</a>.</p>

<h3 id="participating">Participating</h3>

<p>If you are interested in contributing to Neovim, visit <a href="https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md">the github
page</a> for details.
We have a great test suite and automated CI, so you can just jump in and have a
go. Don’t be afraid to open a PR to get comments or just take advantage of the
infrastructure!</p>

<p>To get in touch with the team, join the <a href="https://gitter.im/neovim">gitter channel</a>
(also accessible via <a href="https://webchat.freenode.net/?channels=neovim">IRC</a>), or
visit the <a href="https://www.reddit.com/r/neovim/">Neovim subreddit</a>, which many of
the developers read. Taking part in conversations is a contribution, too!</p>

<h2 id="whats-new">What’s new</h2>

<p>The <a href="https://neovim.io/news/2020/04/">last newsletter</a> covered the release of
Neovim v0.3.0, it is now time to do the same thing with the most exciting
Neovim release that happened since then: v0.4.4!</p>

<h4 id="044-for-users">0.4.4 for Users</h4>

<ul>
  <li>
    <p>Neovim started detecting the background color of the terminal for xterm-compatible terminals (<strong>@joshtriplett</strong>, <a href="https://github.com/neovim/neovim/pull/9509">#9509</a>)</p>
  </li>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">'maxcombine'</code> option has been removed, it now always default to 6 (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/7992">#7992</a>)</p>
  </li>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">'fillchars'</code> setting now has an <code class="language-plaintext highlighter-rouge">eob</code> option, letting users configure the character used to represent lines after the end of a buffer (previously hardcoded to <code class="language-plaintext highlighter-rouge">~</code>) (<strong>@FriedSock</strong>, <a href="https://github.com/neovim/neovim/pull/8546">#8546</a>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">F</code> has been added to the default <code class="language-plaintext highlighter-rouge">'shortmess'</code> option and <code class="language-plaintext highlighter-rouge">S</code> has been removed (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/8619">#8619</a>, <a href="https://github.com/neovim/neovim/pull/10136">#10136</a>)</p>
  </li>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">CursorLine</code> type will now be smarter: if its foreground color is not set, the text of the <code class="language-plaintext highlighter-rouge">CursorLine</code> will use the <code class="language-plaintext highlighter-rouge">CursorLine</code>’s background color and default syntax highlighting colors as foreground (<strong>@zhou13</strong>, <a href="https://github.com/neovim/neovim/pull/8578">#8578</a>).</p>
  </li>
  <li>
    <p>The terminal UI can now support undercurl and colored underline, provided that your terminal has support for that (<strong>@blueyed</strong>, <a href="https://github.com/neovim/neovim/pull/9052">#9052</a>).</p>
  </li>
  <li>
    <p>Neovim’s <code class="language-plaintext highlighter-rouge">'background'</code> setting now defaults to <code class="language-plaintext highlighter-rouge">dark</code> to get a consistent setting across platforms (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/9205">#9205</a>).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">'fillchars'</code> and <code class="language-plaintext highlighter-rouge">'listchars'</code> now are window-local options (<strong>@mhinz</strong>, <a href="https://github.com/neovim/neovim/pull/9539">#9539</a>).</p>
  </li>
  <li>
    <p>The popupmenu can now be made (pseudo) transparent (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/9571">#9571</a>).</p>
  </li>
  <li>
    <p>Floating windows! This enables all kinds of useful features, such as <a href="https://github.com/iamcco/clock.nvim">big clocks</a> (<strong>@bfredl</strong>, <strong>@dzhou121</strong>, <a href="https://github.com/neovim/neovim/pull/6619">#6619</a>)</p>
  </li>
  <li>
    <p>Autocommands now have a <code class="language-plaintext highlighter-rouge">++once</code> modifier to let them execute only once (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/9706">#9706</a>)</p>
  </li>
  <li>
    <p>A new autocommand event named <code class="language-plaintext highlighter-rouge">CompleteChanged</code> has been implemented (<strong>@chemzqm</strong>, <a href="https://github.com/neovim/neovim/pull/9616">#9616</a>)</p>
  </li>
  <li>
    <p>Vim’s TermDebug plugin has been ported to neovim (<strong>@kwon-young</strong>, <a href="https://github.com/neovim/neovim/pull/8364">#8364</a>).</p>
  </li>
  <li>
    <p>The wildmenu can now be turned into a popup menu with <code class="language-plaintext highlighter-rouge">wildoptions=pum</code> (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/9607">#9607</a>). In fact, that’s the default!</p>
  </li>
  <li>
    <p>There now are two events triggered when a UI connects to and disconnects from Neovim: UIEnter and UILeave (<strong>@equalsraf</strong>, <a href="https://github.com/neovim/neovim/6917">#6917</a>).</p>
  </li>
  <li>
    <p>There also are <code class="language-plaintext highlighter-rouge">TermEnter</code> and <code class="language-plaintext highlighter-rouge">TermLeave</code> autocommands triggered when entering/leaving a terminal (<strong>usama54321</strong>, <a href="https://github.com/neovim/neovim/8550">#8550</a>).</p>
  </li>
</ul>

<h4 id="044-for-developers">0.4.4 for Developers</h4>

<ul>
  <li>New UI extensions:
    <ul>
      <li>The <code class="language-plaintext highlighter-rouge">ext_hlstate</code> extension allows semantic identification of builtin and syntax highlights (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/8221">#8221</a>).</li>
      <li>The <code class="language-plaintext highlighter-rouge">ext_linegrid</code> extension sends more gradual screen updates for improved performance (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/9064">#9064</a>).</li>
      <li>The <code class="language-plaintext highlighter-rouge">ext_multigrid</code> extension introduces the concept of a “grid” which is just a rendering surface (<strong>@bfredl</strong>, <strong>@UtkarshMe</strong> <a href="https://github.com/neovim/neovim/pull/8455]">#8455</a>).</li>
      <li>The <code class="language-plaintext highlighter-rouge">ext_messages</code> extension enables UIs to provide an external command line (<strong>@bfredl</strong>, <strong>@dzhou121</strong> <a href="https://github.com/neovim/neovim/pull/7466">#7466</a>)</li>
      <li><code class="language-plaintext highlighter-rouge">ext_popupmenu</code> makes neovim send information about its popup menu (<strong>@bfredl</strong> <a href="https://github.com/neovim/neovim/pull/9607">#9607</a>).</li>
    </ul>
  </li>
  <li>New API function:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">nvim_buf_get_offset</code>: returns the byte offset of a line (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/9180">#9180</a>)</li>
      <li><code class="language-plaintext highlighter-rouge">nvim_buf_is_loaded</code>: checks if a buffer is loaded (<strong>@phodge</strong>, <a href="https://github.com/neovim/neovim/pull/7688">#7688</a>).</li>
      <li><code class="language-plaintext highlighter-rouge">nvim_create_buf</code>: create a new buffer (<strong>@bredl</strong>, <a href="https://github.com/neovim/neovim/pull/9272">#9272</a>)</li>
      <li><code class="language-plaintext highlighter-rouge">nvim_get_context</code>/<code class="language-plaintext highlighter-rouge">nvim_load_context</code>:  explore and restore the editor’s state (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/10619">#10619</a>.</li>
      <li><code class="language-plaintext highlighter-rouge">nvim_input_mouse</code>: perform mouse actions (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull9429">#9429</a>).</li>
      <li><code class="language-plaintext highlighter-rouge">nvim_open_win</code>: creating floating external windows</li>
      <li><code class="language-plaintext highlighter-rouge">nvim_set_keymap</code>: sets a global mapping for a mode (<strong>@yilin-yang</strong>, <a href="https://github.com/neovim/neovim/pull/9224">#9224</a>).</li>
      <li><code class="language-plaintext highlighter-rouge">nvim_win_close</code>: close a window (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/9667">#9667</a>).</li>
      <li><code class="language-plaintext highlighter-rouge">nvim_win_set_buf</code>: sets the current buffer of a window (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/9100">#9100</a>)</li>
      <li><code class="language-plaintext highlighter-rouge">nvim_win_set_config</code>: configure the layout of a window (<strong>@mhinz</strong>, <a href="https://github.com/neovim/neovim/pull/9626">#9626</a>).</li>
    </ul>
  </li>
  <li>Changed API functions:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">nvim_buf_lines_event</code> will now send events for terminal buffers (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/8616">#8616</a>).</li>
    </ul>
  </li>
  <li>
    <p>Neovim now always waits for a UI when launched with –embed, unless –headless is also supplied (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/9024">#9024</a>).</p>
  </li>
  <li>Neovim’s libuv loop has been exposed to lua as <code class="language-plaintext highlighter-rouge">vim.loop</code> (<strong>@zhaozg</strong>, <strong>@andreypopp</strong>, <a href="https://github.com/neovim/neovim/pull/10123">#10123</a>).</li>
</ul>

<h3 id="whats-next">What’s next?</h3>

<p>Neovim contributors have been hard at work and added a lot of new features to v0.5.0 like an <a href="https://microsoft.github.io/language-server-protocol/">LSP client</a> written in Lua and <a href="https://github.com/tree-sitter/tree-sitter">TreeSitter</a> integration. The next Neovim release promises to be fascinating!</p>

<h2 id="around-neovim">Around Neovim</h2>

<h2 id="related-projects">Related projects</h2>

<p>The wiki page of <a href="https://github.com/neovim/neovim/wiki/Related-projects">related
projects</a> is an evergrowing list of projects that somehow make use of Neovim’s extended capabilities. Here’s a gist of additions since the last newsletter:</p>

<h3 id="plugins">Plugins</h3>

<p>The following plugins have found their way into our <a href="https://github.com/neovim/neovim/wiki">wiki</a>:</p>

<ul>
  <li><a href="https://github.com/neoclide/coc.nvim">coc.nvim</a>: Language Server Protocol client that aims to replicate VSCode’s functionnalities</li>
  <li><a href="https://github.com/iamcco/markdown-preview.nvim">markdown-preview.nvim</a>: Provides preview of your markdown files in your browser, with synchronized scrolling.</li>
  <li><a href="https://github.com/sakhnik/nvim-gdb">nvim-gdb</a>: thin wrapper for GDB, LLDB and PDB</li>
  <li><a href="https://github.com/Vigemus/nero.nvim">nero.nvim</a>: A REPL for Neovim</li>
  <li><a href="https://github.com/huawenyu/neogdb.vim">neogdb.vim</a>: Vim GDB front-end for neovim</li>
  <li><a href="https://github.com/bfredl/nvim-luadev">nvim-luadev</a>: REPL for developing lua plugins</li>
  <li><a href="https://github.com/Olical/conjure">Conjure</a>: Clojure and ClojureScript tooling for Neovim over a socket</li>
  <li><a href="https://github.com/Olical/aniseed">Aniseed</a>: Write plugins for Neovim in Fennel, a Lisp that compiles to Lua.</li>
  <li><a href="https://github.com/rafcamlet/nvim-luapad">nvim-luapad</a>: Interactive real time neovim scratchpad for the embedded lua engine.</li>
</ul>

<h3 id="api-clients">API Clients</h3>

<p>Plenty of new API clients:</p>

<ul>
  <li>Java: <a href="https://github.com/esensar/neovim-java">neovim-java</a></li>
  <li>D: <a href="https://github.com/viniarck/nvimhost-d">viniarck/nvimhost-d</a></li>
  <li>Scala: <a href="https://github.com/viniarck/nvimhost-scala">viniarck/nvimhost-scala</a></li>
  <li>NodeJS: <a href="https://github.com/neoclide/neovim">neoclide/neovim</a></li>
  <li>Dart: <a href="https://github.com/smolck/dart-nvim-api">smolck/dart-nvim-api</a></li>
  <li>Ocaml: <a href="https://github.com/janestreet/vcaml">janestreet/vcaml</a></li>
</ul>

<p>The python client also has been renamed to “pynvim”.</p>

<h3 id="guis">GUIs</h3>

<p>Maybe 2018/2019 weren’t the years of the Linux desktop, but they sure were the years of the Neovim GUI:</p>

<ul>
  <li><a href="https://github.com/veonim/veonim">veonim</a>: a really cool electron-based GUI that aims to replicate the VSCode experience.</li>
  <li><a href="http://dinvim.com">DinVim Vim for Mac</a>: A “safe and secure” Neovim GUI - available on the OSX app store.</li>
  <li><a href="https://github.com/akiyosi/gonvim">akiyosi/gonvim</a>: A maintained fork of gonvim.</li>
  <li><a href="https://github.com/etorth/libnvc">etorth/libnvc</a>: An easy to embed GUI based on SDL.</li>
  <li><a href="https://github.com/mvilim/neovim-pytc-example">mvilim/neovim-pytc-example</a>: The first terminal UI for Neovim that isn’t the default terminal UI!</li>
  <li><a href="https://github.com/vhakulinen/gnvim">GNvim</a>: “GUI for neovim, without any web bloat” written in Rust.</li>
  <li><a href="https://github.com/glacambre/firenvim">Firenvim</a>: A big ball of web bloat that embeds Neovim in Chrome, Firefox and other browsers.</li>
  <li><a href="https://github.com/beeender/glrnvim">glrnvim</a>: A terminal wrapper that launches neovim inside of alacritty.</li>
  <li><a href="https://github.com/yatli/fvim">yatli/fvim</a>: A beautiful UI written in F# - who knew functionnal languages could actually be used for writing software?</li>
  <li><a href="https://github.com/asvetliakov/vscode-neovim">Neo Vim</a>: A new attempt at integration neovim into VSCode.</li>
  <li><a href="https://github.com/Kethku/neovide">kethku/neovide</a>: A “No nonsense Neovim client writen in rust” with a tiny bit of cursor madness.</li>
  <li><a href="https://github.com/dontpanic92/dotnvim">dontpanic92/dotnvim</a>: A C# neovim client with transparent backgrounds!</li>
</ul>

<h3 id="blog-posts">Blog posts</h3>

<p>Some posts that talk specifically about Neovim things:</p>

<ul>
  <li>Writing Neovim plugins in lua: https://www.2n.pl/blog/how-to-write-neovim-plugins-in-lua</li>
  <li>Writing your init.vim in lua: https://teukka.tech/luanvim.html</li>
  <li>Using Neovim’s event loop from lua: https://teukka.tech/vimloop.html</li>
</ul>

<h2 id="stats">Stats</h2>

<p>Changed lines since the last newsletter:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log v0.3.0..v0.4.4 --numstat --pretty=tformat: --numstat | nawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s removed lines: %s total lines: %s\n", add, subs, loc }'
added lines: 168844 removed lines: 75466 total lines: 93378
</code></pre></div></div>

<p>Merged commits:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log v0.3.0..v0.4.4 --pretty=oneline | wc -l
3477
</code></pre></div></div>

<p>Different commit authors:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git shortlog -e -s -n v0.3.0..v0.4.4 | wc -l
164
</code></pre></div></div>

<p>Documentation changes:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log v0.3.0..v0.4.4 --numstat --pretty=tformat: --numstat runtime/doc | nawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s removed lines: %s total lines: %s\n", add, subs, loc }'
added lines: 9226 removed lines: 7002 total lines: 2224
</code></pre></div></div>

<h2 id="thanks">Thanks</h2>

<p>Thank you contributors, sponsors, bug-reporters, supporters.
Note that you can now sponsor neovim via <a href="https://github.com/sponsors/neovim">github Sponsors</a> or on <a href="https://opencollective.com/neovim">OpenCollective</a>.
Thank you <strong>@justinmk</strong> for the awesome project and thank you <strong>@brammool</strong> for your foundational work.</p>]]></content><author><name></name></author><category term="newsletter" /><summary type="html"><![CDATA[What is Neovim?]]></summary></entry><entry><title type="html">Newsletter #9 - Three’s company</title><link href="https://neovim.io/news/2020/04/" rel="alternate" type="text/html" title="Newsletter #9 - Three’s company" /><published>2020-04-14T00:00:00+00:00</published><updated>2020-04-14T00:00:00+00:00</updated><id>https://neovim.io/news/2020/newsletter</id><content type="html" xml:base="https://neovim.io/news/2020/04/"><![CDATA[<h2 id="what-is-neovim">What is Neovim?</h2>

<p>Neovim is a fork of the venerable text-editor vim, focused on extensibility and
usability. It is not a rewrite but a continuation and extension of Vim. Many
clones and derivatives exist, some very clever—but none are Vim. Neovim is built
for users who want the good parts of Vim, and more. See a list of differences
via <a href="https://neovim.io/doc/user/vim_diff.html">:help vim-differences</a>.</p>

<h3 id="participating">Participating</h3>

<p>If you are interested in contributing to Neovim, visit <a href="https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md">the github
page</a> for details.
We have a great test suite and automated CI, so you can just jump in and have a
go. Don’t be afraid to open a PR to get comments or just take advantage of the
infrastructure!</p>

<p>To get in touch with the team, join the <a href="https://gitter.im/neovim">gitter channel</a> (also
accessible via <a href="https://webchat.freenode.net/?channels=neovim">IRC</a>), or visit
the <a href="https://www.reddit.com/r/neovim/">Neovim subreddit</a>, which many of the
developers read. Taking part in conversations is a contribution, too!</p>

<p>New contributor shoutout: <a href="https://github.com/janlazo">@janlazo</a> has been on a rampage for both windows support and porting neovim patches since about September 2017. Thank you!</p>

<p>Old contributor shoutout: <a href="https://github.com/jamessan">@jamessan</a> has been around since March 2014, and, while being generally smart and helpful, has been doing tremendous work on the <a href="https://buildd.debian.org/status/package.php?p=neovim">debian package</a> of neovim. Thank you!</p>

<h2 id="whats-new">What’s new</h2>

<p>The <a href="https://neovim.io/news/2017/12/">last newsletter</a> covered everything up to release 0.2.2 of Neovim. Two years have passed, and the project has been as busy as ever improving both user and developer experience. Along the way we released in June 2018 the version 0.3. Though this newsletter arrives late (after version 0.4 was released), we still deemed it worth to introduce 0.3 in case you missed anything (0.4 will be covered in a future newsletter):</p>

<p>As always, check <a href="https://github.com/neovim/neovim/wiki/Following-HEAD">Following HEAD</a> for any breaking changes.</p>

<h4 id="03-for-users">0.3 for Users</h4>

<ul>
  <li>
    <p>A lot of work has been put into making Neovim work better with different terminal emulators, and is still ongoing (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/7664">#7664</a>, <a href="https://github.com/neovim/neovim/pull/7653">#7653</a>, <a href="https://github.com/neovim/neovim/pull/7720">#7720</a>, <a href="https://github.com/neovim/neovim/pull/7640">#7640</a>, <a href="https://github.com/neovim/neovim/pull/7624">#7624</a>, <strong>@florolf</strong>, <a href="https://github.com/neovim/neovim/pull/7676">#7676</a> and <strong>@erw7</strong> <a href="https://github.com/neovim/neovim/pull/8408">#8408</a>)</p>
  </li>
  <li>Linux Users:
    <ul>
      <li>Snap packaging available (<strong>@kalikiana</strong>, <a href="https://github.com/neovim/neovim/pull/7918">#7918</a>)</li>
    </ul>
  </li>
  <li>BSD Users:
    <ul>
      <li>Support for NetBSD (<strong>@utkarsh009</strong>, <a href="https://github.com/neovim/neovim/pull/8197">#8197</a>)</li>
    </ul>
  </li>
  <li>Windows Users:
    <ul>
      <li>Neovim ships with common tools (<strong>@equalsraf, @justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/6105">#6105</a>)</li>
      <li>Building with VS2017 is now supported, see <a href="https://github.com/neovim/neovim/wiki/Building-Neovim#windows--msvc">the wiki</a> (<strong>@b-r-o-c-k</strong>, <a href="https://github.com/neovim/neovim/pull/8084">8084</a>)</li>
      <li>Neovim is available on <a href="https://github.com/cascent/neovim-cygwin">cygwin</a></li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">man.vim</code> improvements, uses lua for speedup (<strong>@keidax</strong>, <a href="https://github.com/neovim/neovim/pull/7623">#7623</a>)</p>
  </li>
  <li>
    <p>Output from <code class="language-plaintext highlighter-rouge">system()</code> and <code class="language-plaintext highlighter-rouge">:!</code> supports multibyte chars, and also handles control chars (CR, TAB) somewhat better (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/issues/7844">#7844</a>)</p>
  </li>
  <li>
    <p>Command mappings are supported (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/4419">#4419</a>)</p>
  </li>
  <li>
    <p>An unmapped META key will be interpreted as Escape (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/8226">#8226</a>)</p>
  </li>
  <li>New flag <code class="language-plaintext highlighter-rouge">msgsep</code> for <code class="language-plaintext highlighter-rouge">display</code> to avoid fullscreen scrolling for messages (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/8088">#8088</a>)
    <ul>
      <li>See it in action: <img src="/images/news9_msgsep.gif" alt="Demonstration of the new multiline message functionality" /></li>
    </ul>
  </li>
  <li>
    <p>Numbered marks are now saved in shada files (<strong>@ZyX-I</strong>, <a href="https://github.com/neovim/neovim/pull/5908">#5908</a>)</p>
  </li>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">--listen</code> command line option replaces the usage of <code class="language-plaintext highlighter-rouge">$NVIM_LISTEN_ADDRESS</code> (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/8247">#8247</a>)</p>
  </li>
  <li>
    <p>Neovim treats stdin as text, rather than commands. If you want to run stdin as normal mode commands, use <code class="language-plaintext highlighter-rouge">nvim -s -</code> (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/7679">#7679</a>, <strong>@ZyX-I</strong>, <a href="https://github.com/neovim/neovim/pull/6299">#6299</a> and <strong>@b-r-o-c-k</strong>,  <a href="https://github.com/neovim/neovim/pull/8276">#8276</a>)</p>
  </li>
  <li>
    <p>Neovim recognizes mouse events in (u)rxvt (<strong>@symphorien</strong>, <a href="https://github.com/neovim/neovim/pull/8309">#8309</a>)</p>
  </li>
  <li>
    <p>Macros apply <code class="language-plaintext highlighter-rouge">:lmap</code> when executing (<strong>@hardenedapple</strong>, <a href="https://github.com/neovim/neovim/pull/5658">#5658</a>)</p>
  </li>
  <li>defaults:
    <ul>
      <li>do <code class="language-plaintext highlighter-rouge">:filetype</code> stuff unless explicitly “off”  (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/7809">#7809</a>)</li>
      <li>new defaults for <code class="language-plaintext highlighter-rouge">fillchars</code> (<strong>@teto</strong>, <strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/8035">#8035</a>)</li>
      <li><code class="language-plaintext highlighter-rouge">maxmem</code> and <code class="language-plaintext highlighter-rouge">maxmemtot</code> have been removed (<strong>@philix</strong>, <a href="https://github.com/neovim/neovim/pull/4486">#4486</a>)</li>
    </ul>
  </li>
</ul>

<h4 id="03-for-developers">0.3 for Developers</h4>

<ul>
  <li>
    <p>The list implementation has been hidden behind an API to foster further improvements (<strong>@ZyX-l</strong>, <a href="https://github.com/neovim/neovim/pull/7708">#7708</a>). Developers, in particular people that port patches from vim, should have a look at <a href="https://github.com/neovim/neovim/wiki/List-management-in-Neovim">the wiki page</a>.</p>
  </li>
  <li>Changed API functions:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">nvim_command_output</code> (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/7821">#7821</a>)</li>
      <li><code class="language-plaintext highlighter-rouge">vim_fgets</code> (<strong>@mhinz</strong>, <a href="https://github.com/neovim/neovim/pull/8228">#8228</a>)</li>
    </ul>
  </li>
  <li>New API functions:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">nvim_list_uis</code> <strong>@geekodour</strong>, <a href="https://github.com/neovim/neovim/pull/8004">#8004</a>)</li>
      <li><code class="language-plaintext highlighter-rouge">nvim_get_commands</code> (<strong>@nimitbhardwaj</strong>, <strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/8375">#8375</a>)</li>
      <li><code class="language-plaintext highlighter-rouge">stdpath</code> (<strong>@docwhat</strong>, <a href="https://github.com/neovim/neovim/pull/6272">#6272</a>)</li>
      <li><code class="language-plaintext highlighter-rouge">nvim_set_client_info</code>, <code class="language-plaintext highlighter-rouge">nvim_get_chan_info</code> and <code class="language-plaintext highlighter-rouge">nvim_list_chans</code>(<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/6743">#6743</a>)</li>
      <li><code class="language-plaintext highlighter-rouge">nvim_buf_attach</code>/<code class="language-plaintext highlighter-rouge">-detach</code> implement buffer change notifications. Using these functions, you can subscribe to events that are sent when a buffer has been updated, no matter the source or method (<strong>@phodge</strong>, <strong>@KillTheMule</strong>, <a href="https://github.com/neovim/neovim/pull/7917">#7917</a>)</li>
    </ul>
  </li>
  <li>
    <p>Channels: support buffered output and bytes sockets/stdio (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/6844">#6844</a>)</p>
  </li>
  <li>A proper viml expression parser is now available (<strong>@ZyX-l</strong>, <a href="https://github.com/neovim/neovim/pull/7234">#7234</a>)
    <ul>
      <li>It comes with various highlight groups, have a look at the following screen recording: <img src="/images/news9_expression_highlight.gif" alt="Demonstration of expression highlighting" /></li>
    </ul>
  </li>
</ul>

<h3 id="the-near-future-upcoming">The near future: Upcoming</h3>

<ul>
  <li>Floating Windows for external UI’s (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/6619">#6619</a>)</li>
  <li>Extended Marks (<strong>@timeyyy</strong>, <a href="https://github.com/neovim/neovim/pull/5031">#5031</a>)</li>
  <li>Built in LSP support (<strong>@tjdevries</strong>, <a href="https://github.com/neovim/neovim/pull/6856">#6856</a>) (see http://langserver.org/ why that could be of interest to you)</li>
</ul>

<h2 id="around-neovim">Around Neovim</h2>

<h3 id="gsoc">GSOC</h3>

<p>Neovim had been accepted into the <a href="https://summerofcode.withgoogle.com/">Google Summer of Code(GSOC)</a>. We’ve had two students working on interesting developments:</p>

<ul>
  <li>@UtkarshMe worked on <a href="https://github.com/neovim/neovim/issues/8320">extending the UI protocol and externalizing window layout and control</a>. Be sure to check out <a href="https://utkarshme.github.io/blog/progress-at-the-end-of-gsoc-with-neovim">his blog</a> for a summary!</li>
  <li>@b-r-o-c-k previously <a href="https://github.com/neovim/neovim/pulls?utf8=%E2%9C%93&amp;q=author%3Ab-r-o-c-k+">active on the windows front</a> before, implemented a <a href="https://github.com/neovim/neovim/issues/8337">.NET API client</a> for Neovim.</li>
</ul>

<p>Thanks for your awesome contributions, and thanks to the mentors @bfredl and @justinmk!</p>

<h2 id="related-projects">Related projects</h2>

<p>The wiki page of <a href="https://github.com/neovim/neovim/wiki/Related-projects">related
projects</a> is an evergrowing list of projects that somehow make use of Neovim’s extended capabilities. Here’s a gist of additions since the last newsletter:</p>

<h3 id="plugins">Plugins</h3>

<p>The following plugins have found their way into our <a href="https://github.com/neovim/neovim/wiki">wiki</a>:</p>

<ul>
  <li><a href="https://github.com/tracyone/neomake-multiprocess">neomake-multiprocess</a>: A vim plugin for running multiple process asynchronously based on neomake</li>
  <li><a href="https://github.com/coachshea/neo-pipe">neopipe</a>: send lines of text to an external command and display output in a scratch buffer</li>
  <li><a href="https://github.com/Lenovsky/nuake">nuake</a>: A Quake-style terminal panel for Neovim</li>
  <li><a href="https://github.com/numirias/semshi">semshi</a>: Semantic Highlighting for Python</li>
  <li><a href="https://github.com/raghur/vim-ghost">vim-ghost</a>: Neovim client for GhostText browser extension (<a href="https://addons.mozilla.org/en-US/firefox/addon/ghosttext/">firefox</a> and <a href="https://chrome.google.com/webstore/detail/ghosttext/godiecgffnchndlihlpaajjcplehddca">chrome</a>)</li>
</ul>

<h3 id="api-clients">API Clients</h3>

<p>If you thought 3 C++ clients wasn’t enough, you will be happy to hear that a 4th contender has entered the arena:</p>

<ul>
  <li><a href="https://github.com/Squareys/magnum-neovim-api">magnum-neovim-api</a></li>
</ul>

<p>If you happen to prefer a language with no API client listed, a good starting point are the <a href="https://neovim.io/doc/user/msgpack_rpc.html#RPC">docs</a>, and be sure to come talk about it on the <a href="https://gitter.im/neovim">gitter channel</a>.</p>

<h3 id="guis">GUIs</h3>

<p>Three new GUIs were added since the last newsletter:</p>

<ul>
  <li><a href="https://github.com/jebberjeb/javafx-neovimpane">javafx</a></li>
  <li><a href="https://github.com/sassanh/qnvim">sassanh/qnvim</a></li>
  <li><a href="https://github.com/igorgladkoborodov/vv">vv</a></li>
</ul>

<h3 id="blog-posts">Blog posts</h3>

<p>Some blog posts that talk about some specifically Neovim things:</p>

<ul>
  <li><a href="https://github.com/KillTheMule/KillTheMule.github.io/blob/master/test_plugins_from_neovim.md"><code class="language-plaintext highlighter-rouge">Testing plugins from Neovim</code></a> walks you through using the Neovim test infrastructure for your plugin</li>
  <li><a href="https://github.com/KillTheMule/KillTheMule.github.io/blob/master/benchmark_rpc.md"><code class="language-plaintext highlighter-rouge">Rpc benchmarks</code></a> shows and benchmarks different approaches in using the RPC API to create folds from a plugin.</li>
  <li><a href="https://mendo.zone/fun/neovim-setup-haskell/"><code class="language-plaintext highlighter-rouge">Neovim for Haskell Development </code></a> shows how Neovim can help you with your haskell development needs</li>
</ul>

<h3 id="featured-project">Featured project</h3>

<p>For quite some time @mhinz has been maintaining <a href="https://github.com/mhinz/neovim-remote">neovim-remote</a>. While only available on unices (though windows support is on the table), it solves some use cases people ask about frequently, such as:</p>

<ul>
  <li>How can I open a file in an already existing Neovim instance?</li>
  <li>How can I open a file from a Neovim terminal without nesting editor instances?</li>
  <li>How can I remotely send a command to a running Neovim instance?</li>
</ul>

<p>To whet your appetite, here’s a little gif</p>

<p><img src="https://github.com/mhinz/neovim-remote/raw/master/images/demo2.gif" alt="Opening files from a Neovim terminal" /></p>

<h3 id="something-missing">Something missing?</h3>

<p>Know more than the wiki? Just <a href="https://github.com/neovim/neovim/wiki/Related-projects/_edit">edit</a> the page to let the world know!</p>

<h2 id="stats">Stats</h2>

<p>Changes lines since the last newsletter:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log  --since="2017-12-16" --numstat --pretty=tformat: --numstat|gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s removed lines: %s total lines: %s\n", add, subs, loc }'
added lines: 109127 removed lines: 40267 total lines: 68860
</code></pre></div></div>

<p>Merged commits:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log  --since="2017-12-16"|wc -l
24167
</code></pre></div></div>

<p>Different commit authors:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git shortlog -e -s -n --since="2017-12-16"|wc -l
129
</code></pre></div></div>

<p>Documentation changes:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log  --since="2017-12-16" --numstat --pretty=tformat: --numstat runtime/doc|gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s removed lines: %s total lines: %s\n", add, subs, loc }'
added lines: 4369 removed lines: 3645 total lines: 724
</code></pre></div></div>

<h2 id="thanks">Thanks</h2>
<p>Thank you contributors, sponsors, bug-reporters, supporters. Thank you <strong>@justinmk</strong> for the awesome
project and thank you <strong>@brammool</strong> for your foundational work.</p>]]></content><author><name></name></author><category term="newsletter" /><summary type="html"><![CDATA[What is Neovim?]]></summary></entry><entry><title type="html">Google Summer of Code 2019</title><link href="https://neovim.io/news/gsoc-2019" rel="alternate" type="text/html" title="Google Summer of Code 2019" /><published>2019-03-17T00:00:00+00:00</published><updated>2019-03-17T00:00:00+00:00</updated><id>https://neovim.io/news/newsletter</id><content type="html" xml:base="https://neovim.io/news/gsoc-2019"><![CDATA[<p>Neovim was again accepted into the Google Summer of Code program.
View <a href="https://summerofcode.withgoogle.com/organizations/6095582066638848/">our page on the GSoC website</a>
for details.  Our <a href="https://github.com/neovim/neovim/wiki/GSoC-2019-Ideas">ideas list</a>
runneth over! You’re also welcome to propose other ideas in
<a href="https://gitter.im/neovim/neovim">chat</a> or on the
<a href="https://github.com/neovim/neovim/issues">ticket tracker</a>.</p>

<h2 id="results-from-last-year">Results from last year</h2>

<p>In our first GSoC ever, we mentored two students who both completed their
projects.</p>

<p><a href="https://github.com/neovim/neovim/issues/8337">Brock Mammen</a> implemented a
<a href="https://github.com/neovim/nvim.net">C# client for Nvim</a>, and even went further
with a <a href="https://github.com/neovim/VSNvim">Nvim extension</a> for Visual Studio!
He also made significant improvements to the build system, particularly for
Windows/MSVC.</p>

<p>The <a href="https://github.com/neovim/neovim/issues/8320"><em>multigrid</em> project</a>
by Utkarsh Maheshwari involved low-level changes to the UI subsystem:</p>

<blockquote>
  <p>breaks up the screen grid in per-window grids, allows UIs to set different
sizes for each window grid and receive grid based events.</p>
</blockquote>

<p>The final product was integrated by mentor <a href="https://github.com/bfredl">Björn Linse</a>
into the Nvim <code class="language-plaintext highlighter-rouge">master</code> branch, providing the foundation for the
<a href="https://neovim.io/doc/user/api.html#nvim_open_win()">floating windows</a> feature.</p>

<p>This demo shows the feature being used in a <a href="https://github.com/neoclide/coc.nvim/">popular plugin</a>
to reveal documentation with completion results:</p>

<p><img src="/images/nvim-0.4.0-floatwin-chemzqm.gif" style="max-width:680px; height:auto;" title="Neovim floating window demo (credit: Qiming zhao)" /></p>

<h2 id="looking-forward">Looking forward</h2>

<p>Our mentors are looking forward to your GSoC proposals in the next weeks!
The best way to get familiar with Neovim development is to
<a href="https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#getting-started">send a pull request</a>
to help out with a small bug or feature request. Working with students on pull
requests is <em>extremely helpful</em> for determining mentor-student workflow.</p>]]></content><author><name></name></author><category term="newsletter" /><summary type="html"><![CDATA[Neovim was again accepted into the Google Summer of Code program. View our page on the GSoC website for details. Our ideas list runneth over! You’re also welcome to propose other ideas in chat or on the ticket tracker.]]></summary></entry><entry><title type="html">Newsletter #8 - Open up the Windows</title><link href="https://neovim.io/news/2017/12/" rel="alternate" type="text/html" title="Newsletter #8 - Open up the Windows" /><published>2017-12-16T00:00:00+00:00</published><updated>2017-12-16T00:00:00+00:00</updated><id>https://neovim.io/news/2017/newsletter</id><content type="html" xml:base="https://neovim.io/news/2017/12/"><![CDATA[<h2 id="what-is-neovim">What is Neovim?</h2>

<p>Neovim is a fork of the venerable text-editor vim, focused on extensibility and
usability. It is not a rewrite but a continuation and extension of Vim. Many
clones and derivatives exist, some very clever—but none are Vim. Neovim is built
for users who want the good parts of Vim, and more. See a list of differences
at <a href="https://neovim.io/doc/user/vim_diff.html">:help vim-differences</a>.</p>

<h3 id="participating">Participating</h3>

<p>If you are interested in contributing to Neovim, read
<a href="https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</a> to get started.
We have a great test suite and automated CI, so you can just jump in and have a
go. Don’t be afraid to open a PR to get comments or just take advantage of the
infrastructure!</p>

<p>To get in touch with the team, join the <a href="gitter.im/neovim">gitter channel</a> (also
accessible via <a href="https://webchat.freenode.net/?channels=neovim">IRC</a>), or visit
the <a href="https://www.reddit.com/r/neovim/">Neovim subreddit</a>, which many of the
developers read. Taking part in conversations is a contribution, too!</p>

<p>New contributor shoutout: <strong>@ckelsel</strong> has been responsible for porting a large number of <a href="https://github.com/neovim/neovim/commits?author=ckelsel">vim patches</a>, as has <a href="https://github.com/neovim/neovim/commits?author=lonerover"><strong>@lonerover</strong></a>. Thank you!</p>

<p>Old contributor shoutout: <strong>@oni-link</strong> isn’t a name you read a lot in the commit logs, but he’s been very helpful in reviewing changes and improving complicated PR’s for quite some time. Thank you!</p>

<h2 id="whats-new">What’s new</h2>

<p>The <a href="https://neovim.io/news/2016/11/">last newsletter</a> has gathered some dust,
so we want to bring you up-to-date in the Neovim world.</p>

<p>Neovim has had 3(!) releases since back then, so let us recap those first and foremost:</p>

<h3 id="release-02">Release 0.2</h3>

<p>This release brings a host of fixes and improvements. We’ll look at some of them closer below, but be sure to also check
out the <a href="https://github.com/neovim/neovim/releases/tag/v0.2.0">release page</a> for all the gory details.</p>

<h4 id="02-for-users">0.2 for Users</h4>
<ul>
  <li>Microsoft Windows is now fully supported
    <ul>
      <li><code class="language-plaintext highlighter-rouge">:terminal</code> mode is available in 0.2.1, see below!</li>
    </ul>
  </li>
  <li>Starting this release, Neovim offers <a href="https://github.com/neovim/neovim/releases/">pre-built packages</a>
for macOS and Windows (32-bit and 64-bit). The Windows package contains
a GUI and some additional tools like <code class="language-plaintext highlighter-rouge">curl.exe</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">:terminal</code> has seen various improvements (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/6185">#6185</a>)
    <ul>
      <li><code class="language-plaintext highlighter-rouge">findfile()</code>, <code class="language-plaintext highlighter-rouge">:find</code> and <code class="language-plaintext highlighter-rouge">gf</code> now work in <code class="language-plaintext highlighter-rouge">:terminal</code> buffers (<strong>@tweekmonster</strong>, <a href="https://github.com/neovim/neovim/pull/6009">#6009</a>)</li>
      <li>Shell output is now throttled to maintain terminal responsiveness (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/5396">#5396</a>)</li>
      <li>Arguments for shell commands now work properly with <code class="language-plaintext highlighter-rouge">:term</code> (<strong>@friedsock</strong>, <a href="https://github.com/neovim/neovim/pull/4504">#4504</a>)</li>
    </ul>
  </li>
  <li>Numerous improvements to man.vim have been made (<strong>@m-wynn</strong>, <strong>@raichoo</strong>, <strong>@renstrom</strong>, <strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/6693">#6693</a>,  <a href="https://github.com/neovim/neovim/pull/6766">#6766</a>, <a href="https://github.com/neovim/neovim/pull/6815">#6815</a>, <a href="https://github.com/neovim/neovim/pull/3104">#3104</a>, <a href="https://github.com/neovim/neovim/pull/7405">#7405</a>)</li>
  <li>Man and help pages now contain a TOC (<strong>@tweekmonster</strong>, <a href="https://github.com/neovim/neovim/pull/5169">#5169</a>)</li>
  <li>The message <code class="language-plaintext highlighter-rouge">Reading from stdin</code> was removed (<strong>@msva</strong>, <a href="https://github.com/neovim/neovim/pull/6298">#6298</a>)</li>
  <li><code class="language-plaintext highlighter-rouge">guicursor</code> now works in the TUI (<strong>@teto</strong>, <a href="https://github.com/neovim/neovim/pull/6423">#6423</a>)</li>
  <li>There’s a new highlight group <code class="language-plaintext highlighter-rouge">Whitespace</code> for whitespace-related <code class="language-plaintext highlighter-rouge">listchars</code> (<strong>@zhou13</strong>, <a href="https://github.com/neovim/neovim/pull/6367">#6367</a>)</li>
  <li>Commandline completion has been implemented (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/6376">#6376</a>)</li>
  <li>The event <code class="language-plaintext highlighter-rouge">DirChanged</code> is now available for autocommands (<strong>@mhinz</strong>, <a href="https://github.com/neovim/neovim/pull/5928">#5928</a>)</li>
  <li><code class="language-plaintext highlighter-rouge">cpoptions</code>: Use the <code class="language-plaintext highlighter-rouge">_</code> flag to toggle <code class="language-plaintext highlighter-rouge">cw</code> behaviour (<strong>@raichoo</strong>, <strong>@chrisbra</strong>, <a href="https://github.com/neovim/neovim/pull/6235">#6235</a>)</li>
  <li><code class="language-plaintext highlighter-rouge">CTRL-R</code> now omits trailing <code class="language-plaintext highlighter-rouge">^M</code> when pasting to the commandline (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/6137">#6137</a>)</li>
  <li>You can now <code class="language-plaintext highlighter-rouge">:edit</code> filenames without escaping whitespaces (<strong>@Kurt-Bonatz</strong>, <a href="https://github.com/neovim/neovim/pull/6119">#6119</a>)</li>
  <li>Changes to defaults:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">mouse=a</code> is no longer the default (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/6022">#6022</a>)</li>
      <li><code class="language-plaintext highlighter-rouge">NVIM_TUI_ENABLE_CURSOR_SHAPE</code> was removed, you can use <code class="language-plaintext highlighter-rouge">guicursor</code> instead (see https://github.com/neovim/neovim/releases/tag/v0.2.0)</li>
      <li><code class="language-plaintext highlighter-rouge">showcmd</code>, <code class="language-plaintext highlighter-rouge">belloff=all</code>, <code class="language-plaintext highlighter-rouge">ruler</code> are now default (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/6087">#6087</a>)</li>
    </ul>
  </li>
</ul>

<h4 id="02-for-developers">0.2 for Developers</h4>

<ul>
  <li>Full API documentation at <a href="https://neovim.io/doc/user/api.html">:help api</a></li>
  <li>API changes:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">{get,set}_option</code> now update local options as appropriate (<strong>@yagebu</strong>, <a href="https://github.com/neovim/neovim/pull/6405">#6405</a>)</li>
      <li><code class="language-plaintext highlighter-rouge">nvim_get_mode</code> is available (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/6247">#6247</a>)</li>
      <li>External UIs can now draw the tabline (<strong>@dzhou121</strong>, <a href="https://github.com/neovim/neovim/pull/6583">#6583</a>)</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">writefile</code> now obeys the <code class="language-plaintext highlighter-rouge">fsync</code> option (<strong>@ZyX-I</strong>, <a href="https://github.com/neovim/neovim/pull/6427">#6427</a>)</li>
  <li>In addition to the effort from the vim guys (7.4.{2055,2057,2058}), <code class="language-plaintext highlighter-rouge">eval.c</code> has been refactored and error messages were improved (<strong>@ZyX-I</strong>, <a href="https://github.com/neovim/neovim/pull/5119">#5119</a>)</li>
  <li>The <code class="language-plaintext highlighter-rouge">id</code> function is now available, and <code class="language-plaintext highlighter-rouge">printf(%p)</code> is finally useful (<strong>@ZyX-I</strong>, <a href="https://github.com/neovim/neovim/pull/6095">#6095</a>)</li>
  <li>All providers will be disabled if <code class="language-plaintext highlighter-rouge">g:loaded_*</code> exists (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/commit/2f38ed11c98a35b7abe53405d8f5f41cb1054f8f">commit</a>)</li>
  <li><code class="language-plaintext highlighter-rouge">setpos</code> can now set lowercase marks in other buffers (<strong>@hardenedapple</strong>, <a href="https://github.com/neovim/neovim/pull/5753">#5753</a>)</li>
  <li>You can check <code class="language-plaintext highlighter-rouge">v:exiting</code> to see if Neovim is exiting (<strong>@mhinz</strong>, <a href="https://github.com/neovim/neovim/pull/5651">#5651</a>)</li>
</ul>

<h3 id="release-021">Release 0.2.1</h3>

<p>Next let’s see what happened in 0.2.1. As before, check out the <a href="https://github.com/neovim/neovim/commit/c67dd5acd0bb9f8d08789dfe6af27d9045e95fb4">release
notes</a>
for details.</p>

<h4 id="021-for-users">0.2.1 for Users</h4>
<ul>
  <li>Nvim now supports window-local highlighting (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/6700">#6700</a>)</li>
  <li>Even more terminal improvements:
    <ul>
      <li>TUI cursor motion, SGR, and scrolling optimizations, cursor shape and terminal type recognition improvements have been merged (<strong>@jdebp</strong>, <a href="https://github.com/neovim/neovim/pull/6816">#6816</a>)</li>
      <li>Terminal buffers are adjusted when using the number column (<strong>@tecywiz121</strong>, <a href="https://github.com/neovim/neovim/pull/7440">#7440</a>)</li>
      <li>A newly created <code class="language-plaintext highlighter-rouge">:terminal</code> will now stay in normal mode (<strong>@nelstrom</strong>, <a href="https://github.com/neovim/neovim/pull/6808">#6808</a>)</li>
    </ul>
  </li>
  <li>The command line can now be colored (<strong>@ZyX-l</strong>, <a href="https://github.com/neovim/neovim/pull/6364">#6364</a>)</li>
  <li>Custom clipboard providers can now be configured (<strong>@nhooyr</strong>, <a href="https://github.com/neovim/neovim/pull/6030">#6030</a>)</li>
  <li>The clipboard provider can now fall back to tmux support (<strong>@xu-cheng</strong>, <a href="https://github.com/neovim/neovim/pull/6894">#6894</a>)</li>
  <li>Further improvements for <code class="language-plaintext highlighter-rouge">:Tutor</code> have been made (<strong>@fmoralesc</strong>, <a href="https://github.com/neovim/neovim/pull/7028">#7028</a>)</li>
  <li><code class="language-plaintext highlighter-rouge">inccommand</code> now works with leading modifiers like <code class="language-plaintext highlighter-rouge">keeppattern</code> (<strong>@jamessan</strong>, <a href="https://github.com/neovim/neovim/pull/6967">#6967</a>)</li>
  <li>The ruby host can be configured (<strong>@alexgenco</strong>, <a href="https://github.com/neovim/neovim/pull/6841">#6841</a>)</li>
  <li>The unnamed register is kept on restart (<strong>@AdnoC</strong>, <a href="https://github.com/neovim/neovim/pull/4700">#4700</a>)</li>
  <li>For Windows users:
    <ul>
      <li>Neovim can be used on the console (<strong>@equalsraf</strong>, <a href="https://github.com/neovim/neovim/pull/6315">#6315</a>)</li>
      <li><code class="language-plaintext highlighter-rouge">:terminal</code> has been implemented (<strong>@erw7</strong>, <a href="https://github.com/neovim/neovim/pull/7007">#7007</a>)</li>
      <li>Path handling on windows has been improved (<strong>@aignas</strong>, <a href="https://github.com/neovim/neovim/pull/7349">#7349</a>)</li>
    </ul>
  </li>
  <li>For Linux users:
    <ul>
      <li>You can now download AppImage packages (<strong>@AdnoC</strong>, <a href="https://github.com/neovim/neovim/pull/6638">#6638</a>)</li>
      <li>Function keys now work in the terminal UI (<strong>@rjmill</strong>, <a href="https://github.com/neovim/neovim/pull/5014">#5014</a>)</li>
      <li>Fixed a crash with extremely long lines (more than 100m virtual columns) (<strong>@Grimy</strong>, <a href="https://github.com/neovim/neovim/pull/3527">#3527</a>)</li>
      <li><code class="language-plaintext highlighter-rouge">:cquit</code> now takes an optional error code as argument (<strong>@joshleeb</strong>, <a href="https://github.com/neovim/neovim/pull/7336">#7336</a>)</li>
      <li>True colors in tmux have been fixed (<strong>@DarkDefender</strong>, <a href="https://github.com/neovim/neovim/pull/7100">#7100</a>)</li>
      <li><code class="language-plaintext highlighter-rouge">:checkhealth</code> is a builtin now, and validates your <code class="language-plaintext highlighter-rouge">$VIMRUNTIME</code> (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/7399">#7399</a>)</li>
      <li><code class="language-plaintext highlighter-rouge">cursorcolumn</code> and <code class="language-plaintext highlighter-rouge">colorcolumn</code> respect syntax highlighting (<strong>@zhou13</strong>, <strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/7364">#7364</a>)</li>
    </ul>
  </li>
</ul>

<h4 id="021-for-developers">0.2.1 for Developers</h4>
<ul>
  <li>Changes:
    <ul>
      <li>External UIs now should use the <code class="language-plaintext highlighter-rouge">FocusGained</code> event instead of sending the <code class="language-plaintext highlighter-rouge">&lt;FocusGained&gt;</code> pseudokey (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/7221">#7221</a>)</li>
    </ul>
  </li>
  <li>Neovim sources are now analyzed with PVS (<strong>@ZyX-l</strong>, <a href="https://github.com/neovim/neovim/pull/6493">#6493</a>)</li>
  <li>External UIs can now draw
    <ul>
      <li>… the tabline (<strong>@dzhou121</strong>, <a href="https://github.com/neovim/neovim/pull/6583">#6583</a>)</li>
      <li>… the command line (<strong>@dzhou121</strong>, <strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/6162">#6162</a>)</li>
      <li>… the wildmenu (<strong>@dzhou121</strong>, <strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/7454">#7454</a>)</li>
    </ul>
  </li>
  <li>Lua is gaining momentum:
    <ul>
      <li>The interface has been implemented (<strong>@ZyX-I</strong>, <a href="https://github.com/neovim/neovim/pull/4411">#4411</a>)</li>
      <li>Lua files can now be required from <code class="language-plaintext highlighter-rouge">lua/</code> (<strong>@ZyX-l</strong>, <a href="https://github.com/neovim/neovim/pull/6789">#6789</a>)</li>
      <li>Call lua directly from the API (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/6704">#6704</a>)</li>
    </ul>
  </li>
  <li>Programmatically get information about mappings via  <code class="language-plaintext highlighter-rouge">get_keymap</code> (<strong>@tjdevries</strong>, <a href="https://github.com/neovim/neovim/pull/6236">#6236</a>)</li>
  <li>You can now retrieve highlights <code class="language-plaintext highlighter-rouge">using nvim_get_hl_by_name/by_id</code> (<strong>@teto</strong>, <a href="https://github.com/neovim/neovim/pull/7082">#7082</a>)</li>
  <li><code class="language-plaintext highlighter-rouge">bufhl</code> can now be used to create new highlighting groups (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/7414">#7414</a>)</li>
  <li>External UIs can get menus from  <code class="language-plaintext highlighter-rouge">menu_get</code> (<strong>@teto</strong>, <a href="https://github.com/neovim/neovim/pull/6322">#6322</a>)
    <ul>
      <li><code class="language-plaintext highlighter-rouge">menu_get</code> pretty-prints special chars, making it possible to feed its results back into e.g. <code class="language-plaintext highlighter-rouge">nvim_input</code> (<strong>@teto</strong>, <strong>@KillTheMule</strong>, <a href="https://github.com/neovim/neovim/pull/7340">#7340</a>)</li>
    </ul>
  </li>
  <li>RPC clients can connect to a socket using <code class="language-plaintext highlighter-rouge">sockconnect</code> (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/6594">#6594</a>)</li>
  <li><code class="language-plaintext highlighter-rouge">serverstart</code> now uses <code class="language-plaintext highlighter-rouge">uv_getaddrinfo()</code>, bringing IPv6 support (<strong>@mhinz</strong>, <a href="https://github.com/neovim/neovim/pull/6680">#6680</a>)</li>
  <li>You can now define several functions in one <code class="language-plaintext highlighter-rouge">:execute</code> call (<strong>@ZyX-I</strong>, <a href="https://github.com/neovim/neovim/pull/6914">#6914</a>)</li>
  <li>Logging has been enabled per default (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/6827">#6827</a>)</li>
</ul>

<h3 id="release-022">Release 0.2.2</h3>

<p>This is a fast-and-furious containing mostly bug-fixes. See the <a href="https://github.com/neovim/neovim/commit/6d2c30daf3b29b84b15b547ef956e165f5e9685d">release-notes</a> for details. Some new features are in, too:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">curdir</code> has been added as a viewoption (<strong>@EricR86</strong>, <a href="https://github.com/neovim/neovim/pull/7447">#7447</a>)</li>
  <li>A node host is available (<strong>@billyvg</strong>, <a href="https://github.com/neovim/neovim/pull/7458">#7458</a>)</li>
  <li><code class="language-plaintext highlighter-rouge">:checkhealth</code> now also validates the runtimepath (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/7526">#7526</a>)</li>
  <li><code class="language-plaintext highlighter-rouge">scrollback</code> now defaults to 10000 (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/7556">#7556</a>)</li>
  <li>A bugfix of note is the reversal of the netrw update, we’ve been seeing quite some reports about that! (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/7557">#7557</a>)</li>
</ul>

<h3 id="023-dev">0.2.3-dev</h3>

<p>Want to know what to expect from the next release? Here’s a list to whet your appetite:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">CmdlineEnter</code> and <code class="language-plaintext highlighter-rouge">CmdlineLeave</code> autocommands (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/7422">#7422</a>)</li>
  <li>Channels: support buffered output and bytes sockets/stdio (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/6844">#6844</a>)</li>
  <li>A proper viml expression parser (<strong>@ZyX-l</strong>, <a href="https://github.com/neovim/neovim/pull/7234">#7234</a>)</li>
  <li>A lot of work has been put into making Neovim work better with different terminal emulators, and is still ongoing (<strong>@justinmk</strong>, <a href="https://github.com/neovim/neovim/pull/7664">#7664</a>, <a href="https://github.com/neovim/neovim/pull/7653">#7653</a>, <a href="https://github.com/neovim/neovim/pull/7720">#7720</a>, <a href="https://github.com/neovim/neovim/pull/7640">#7640</a>, <a href="https://github.com/neovim/neovim/pull/7624">#7624</a> and <strong>@florolf</strong>, <a href="https://github.com/neovim/neovim/pull/7676">#7676</a>)</li>
</ul>

<h3 id="the-near-future-upcoming">The near future: Upcoming</h3>

<p>For an overview of planned features, goals and ideas for Neovim head to the <a href="https://neovim.io/roadmap/">road
map</a>. Some noteworthy upcoming PRs are:</p>

<ul>
  <li>Floating Windows for external UIs (<strong>@bfredl</strong>, <a href="https://github.com/neovim/neovim/pull/6619">#6619</a>)</li>
  <li>Extended Marks (<strong>@timeyyy</strong>, <a href="https://github.com/neovim/neovim/pull/5031">#5031</a>)</li>
  <li>Buffer change notifications (<strong>@phodge</strong>, <a href="https://github.com/neovim/neovim/pull/5269">#5269</a>)</li>
  <li>Built in LSP support (<strong>@tjdevries</strong>, <a href="https://github.com/neovim/neovim/pull/6856">#6856</a>) (see http://langserver.org/ why that could be of interest to you)</li>
</ul>

<p><strong><em>PSA</em></strong>: If you build Neovim from the latest master, always check <a href="https://github.com/neovim/neovim/wiki/Following-HEAD">Following HEAD</a> for any changes.</p>

<h2 id="around-neovim">Around Neovim</h2>

<p>The wiki page of <a href="https://github.com/neovim/neovim/wiki/Related-projects">related
projects</a> has seen quite
some additions, check out the full changes <a href="https://github.com/neovim/neovim/wiki/Related-projects/_compare/7ce8559...e2c051fd85226ff6a67c67f9de55ad9039aa2948">here</a>.</p>

<h3 id="api-clients">API clients</h3>

<p>API clients are at the heart of Neovim’s architecture, and significantly improve developer experience. Write a plugin in
any language you want! Since the last newsletter, we’ve seen the addition of another <a href="https://github.com/DaikiMaekawa/neovim.cpp">C++</a> client, one for <a href="https://github.com/dm1try/nvim">Elixir</a>, and a <a href="https://gitlab.com/HiPhish/neovim.rkt">Racket</a> client. The <a href="https://github.com/neovim/node-client">node client</a> got an overhaul and a new maintainer. Thanks <strong>@billyvg</strong> for taking over! While not totally new, a special shoutout goes to the <a href="https://github.com/alexgenco/neovim-ruby">ruby client</a> for being very well-maintained. Thanks, <strong>@alexgenco</strong>!</p>

<p>If you happen to prefer a language not yet listed, a good starting point are the <a href="https://neovim.io/doc/user/msgpack_rpc.html#RPC">docs</a>, and be sure to come talk about it on the <a href="gitter.im/neovim">gitter channel</a>.</p>

<h3 id="guis">GUIs</h3>

<p>Too much activity has happened on the GUI front to list all new clients, so let’s just have a look at some that stand out. VSCode  is using Neovim to properly <a href="https://github.com/VSCodeVim/Vim">integrate ex-mode commands</a>, and Sublime Text 3 gained <a href="https://github.com/lunixbochs/actualvim">full Neovim integration</a>. The latter also makes use of another
cool Neovim-specific feature, the externalized popupmenu, and it only took them
<a href="https://github.com/lunixbochs/ActualVim/issues/57#issuecomment-286452725">50 LOC</a>. Last but not least, <a href="https://github.com/jeanguyomarch/eovim/">eovim</a> is an <a href="https://www.enlightenment.org/">enlightenment</a> client for Neovim.</p>

<h3 id="the-architecture-of-neovim">The Architecture of Neovim.</h3>

<p>Some students have studied the Architecture of Neovim and published an
“analytical essay” about their findings. Be sure to
<a href="https://delftswa.gitbooks.io/desosa-2017/content/neovim/chapter.html">have a look</a>
if you are interested in the bigger picture.</p>

<h3 id="vimcasts-and-modern-vim">Vimcasts and Modern Vim</h3>

<p>Drew Neil of <a href="http://vimcasts.org">vimcasts</a> fame has started recording <a href="http://vimcasts.org/categories/neovim/">casts about Neovim</a>, and began work on a successor to his praised book <a href="https://pragprog.com/book/dnvim2/practical-vim-second-edition">Practical Vim</a> called <a href="https://pragprog.com/book/modvim/modern-vim">Modern Vim</a>. Most of the book will be  suitable for Vim 8 and Neovim users, but about 1/3rd of the book will cover Neovim-specific functionality.</p>

<h3 id="libuv">Libuv</h3>

<p>One of the founding stones of Neovim has been porting I/O to libuv. So you will be happy to hear that libuv has set out to <a href="https://github.com/libuv/libuv/issues/1287">support more platforms</a>. Neovim, soon coming to a platform near you!</p>

<h3 id="test-suite">Test suite</h3>

<p>Neovim offers easy testing via the wonderfully simple Lua language. Why aren’t others doing it, you ask? Turns out, <a href="https://github.com/neomutt/neomutt/pull/415">they do</a>, or at least, the neomutt project is preparing for it. Very nice to see ideas from Neovim <a href="https://github.com/neomutt/neomutt/issues/414">taken up</a>.</p>

<h2 id="stats">Stats</h2>

<p>Changes lines since the last newsletter:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log  --since="2016-11-01" --numstat --pretty=tformat: --numstat|gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s removed lines: %s total lines: %s\n", add, subs, loc }'
added lines: 255393 removed lines: 221106 total lines: 34287
</code></pre></div></div>

<p>Merged commits:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log  --since="2016-11-01"|wc -l
3110
</code></pre></div></div>

<p>Different commit authors:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git shortlog -e -s -n --since="2016-11-01"|wc -l
146
</code></pre></div></div>

<p>Documentation changes:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log  --since="2016-11-01" --numstat --pretty=tformat: --numstat runtime/doc|gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s removed lines: %s total lines: %s\n", add, subs, loc }'
added lines: 8579 removed lines: 6577 total lines: 2002
</code></pre></div></div>

<h2 id="thanks">Thanks</h2>
<p>Thank you contributors, sponsors, bug-reporters, supporters. Thank you <strong>@justinmk</strong> for the awesome
project and thank you <strong>@brammool</strong> for your foundational work.</p>

<p><strong>@brammool</strong> and <strong>@chrisbra</strong>  from the vim team have left a
few comments on our issue tracker, it’s nice to be working together!</p>]]></content><author><name></name></author><category term="newsletter" /><summary type="html"><![CDATA[What is Neovim?]]></summary></entry><entry><title type="html">Newsletter #7 - Summer of Road</title><link href="https://neovim.io/news/2016/11/" rel="alternate" type="text/html" title="Newsletter #7 - Summer of Road" /><published>2016-11-01T00:00:00+00:00</published><updated>2016-11-01T00:00:00+00:00</updated><id>https://neovim.io/news/2016/newsletter</id><content type="html" xml:base="https://neovim.io/news/2016/11/"><![CDATA[<p>It’s time for the Neovim newsletter! Skip to the <a href="#fun-without-smile">Fun</a> and
<a href="#features">Features</a> sections if you only care about new features. There are
also changes in <a href="#project-management">project management</a> that you should know
about.</p>

<h2 id="what-is-neovim">What is Neovim?</h2>

<p>Each minute, a new text editor is born (source: Hacker News). There are
endless text editors that address the “common case”.</p>

<p>Instead of another <em>Vim-like</em> text editor, Neovim users want a better Vim.
Thousands of small decisions live in the Vim core, accumulated over decades;
most of those decisions are still relevant, solving subtle problems that new
projects have yet to encounter, digest and decide.</p>

<p>Neovim is a refactor of Vim to make it viable for another 30 years of hacking.
See <a href="https://neovim.io/doc/user/vim_diff.html"><code class="language-plaintext highlighter-rouge">:help vim-differences</code></a> for
a reference of changes and improvements.</p>

<h2 id="should-i-switch">Should I switch?</h2>

<p>Neovim very intentionally builds on the long history of Vim community knowledge
and user habits. That means <strong>“switching” from Vim to Neovim is just an
“upgrade”</strong>—like installing a new version of Vim. If you log onto a server or
workstation with only Vim, you won’t be lost. If you find an article about Vim,
it likely also applies to Neovim, unless it’s about <code class="language-plaintext highlighter-rouge">:smile</code>.</p>

<p>So if you like Vim, try Neovim. If you love Vim, try
<a href="https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md">this</a> ;)</p>

<h2 id="hacking-or-plain-old-engineering">Hacking… or plain old Engineering</h2>

<p>From the start, one of Neovim’s explicit goals has been:</p>

<blockquote>
  <p>Simplify maintenance and encourage contributions</p>
</blockquote>

<p>We want a <em>hackable Vim</em>: a codebase and community that enables experimentation
and low-cost trials of new features.</p>

<p>And there’s evidence of real progress towards that ambition. We’ve successfully
executed non-trivial “off-the-roadmap” patches: features which are important to
their authors, but not the highest priority for the project.</p>

<ul>
  <li><a href="https://neovim.io/doc/user/editing.html#:tcd"><code class="language-plaintext highlighter-rouge">:tchdir</code></a> enables tab-local
“working directory”</li>
  <li><code class="language-plaintext highlighter-rouge">'statusline'</code> supports unlimited alignment sections (<a href="https://github.com/neovim/neovim/pull/4489">PR #4489</a>)</li>
  <li><a href="https://neovim.io/doc/user/autocmd.html#TextYankPost">TextYankPost</a>
event makes it trivial to implement a reliable
<a href="https://github.com/bfredl/nvim-miniyank">yank ring</a>, send yanks to an
external service, and
<a href="https://github.com/machakann/vim-highlightedyank">applications we didn’t anticipate</a></li>
  <li><a href="https://neovim.io/doc/user/syntax.html#hl-QuickFixLine">QuickFixLine</a> is
a new highlight group</li>
  <li><code class="language-plaintext highlighter-rouge">man.vim</code> offers completion, improved highlighting, and more</li>
</ul>

<p>These patches were included because they:</p>

<ol>
  <li>fit into existing conventions/design</li>
  <li>included robust test coverage (enabled by an advanced test framework and CI)</li>
  <li>received thoughtful review by other contributors</li>
</ol>

<p>They are casually mentioned in <a href="https://neovim.io/doc/user/vim_diff.html#nvim-features"><code class="language-plaintext highlighter-rouge">:help
nvim-features</code></a> :)</p>

<h2 id="fun-without-smile">Fun without <code class="language-plaintext highlighter-rouge">:smile</code>?</h2>

<p>New clients and innovative applications are appearing more frequently than ever.</p>

<ul>
  <li><a href="https://github.com/rhysd/NyaoVim">NyaoVim</a> is a thoughtfully-designed,
modular <strong>Electron GUI</strong>.
    <ul>
      <li>Its <a href="https://github.com/rhysd/neovim-component"><code class="language-plaintext highlighter-rouge">&lt;neovim-editor&gt;</code></a> web
component can be used in <strong>your own project</strong>, including VS Code, Atom, and
other Electron or nw.js projects!</li>
    </ul>
  </li>
  <li><a href="https://github.com/extr0py/oni">ONI</a> is an Electron-based <strong>Neovim IDE</strong>
showing many exciting possiblities. It also has a cool logo like NyaoVim :)</li>
  <li>Users love <a href="https://github.com/Shougo/deoplete.nvim"><strong>deoplete</strong></a>, the first
<strong>non-blocking auto-completion</strong> plugin for vim.</li>
  <li>@qvacua turned his sights to <code class="language-plaintext highlighter-rouge">nvim</code>, progressing rapidly on a new <code class="language-plaintext highlighter-rouge">nvim</code>-based
backend for his well-known <a href="https://github.com/qvacua/vimr">VimR</a> project,
a polished <strong>GUI for macOS</strong>. There are pre-built <code class="language-plaintext highlighter-rouge">.app</code> bundles for
macOS 10.11 at the <a href="https://github.com/qvacua/vimr/releases">releases</a> page.</li>
  <li>The cross-platform <a href="https://github.com/equalsraf/neovim-qt"><strong>neovim-qt</strong></a> GUI
continues to get better: it’s as fast as gVim, with less flicker, and it
doesn’t depend GTK/KDE.</li>
  <li><a href="https://github.com/rogual/neovim-dot-app">neovim.app</a> is a macOS Neovim GUI
available via homebrew for macOS 10.9+.</li>
  <li><a href="https://github.com/neovimhaskell/nvim-hs">nvim-hs</a> is a host to enable
<strong>writing Neovim plugins in Haskell</strong>.</li>
  <li>Check out <a href="https://github.com/adolenc/cl-neovim">cl-neovim</a> for authoring
<strong>Neovim lisp plugins</strong>. Includes <code class="language-plaintext highlighter-rouge">:Lispdo</code>!</li>
  <li><a href="https://github.com/mhinz/neovim-remote">nvr</a> now supports the Vim
“clientserver” options <code class="language-plaintext highlighter-rouge">--servername</code>, <code class="language-plaintext highlighter-rouge">--remote</code>, etc. <code class="language-plaintext highlighter-rouge">nvr</code> is perfect for
<strong>communicating with a parent <code class="language-plaintext highlighter-rouge">nvim</code> instance</strong> from a <code class="language-plaintext highlighter-rouge">:terminal</code> buffer.</li>
  <li>Intero <a href="https://twitter.com/_simonyang/status/753365931896692736">users are joyful</a>
about <a href="https://github.com/myfreeweb/intero.nvim">intero.nvim</a> and
<a href="https://github.com/parsonsmatt/intero-neovim">intero-neovim</a></li>
</ul>

<p>There are clients for go, julia, perl, Java, R, Elixir, Clojure, and more. Visit
the <a href="https://github.com/neovim/neovim/wiki/Related-projects">related projects</a>
wiki page to discover new projects as they emerge!</p>

<h2 id="project-management">Project management</h2>

<blockquote>
  <p>Clarity and consistency breed contribution. — @robertmeta</p>
</blockquote>

<h3 id="benevolent-dictator-for-a-limited-time">Benevolent Dictator For a Limited time</h3>

<p>In July, Thiago (@tarruda) took a less active role in the project, for personal
reasons. He hopes to resume active contributions in the future.</p>

<p>Some have asked for a “BDFL” to be named. @justinmk has that role, unless you
want it: we’ve made steps to document the role of maintainer, so that anyone
trusted by most contributors can step up in the future.</p>

<p>The ultimate goal is to spread out tasks as horizontally as possible, and to
continue to give the “commit bit” to people we’ve grown to trust. There are
currently 14 core contributors; we’d like to scale that to 50. We don’t want the
project to depend on heroic effort, but a flow of interested parties working
within the conventions and etiquette of the Vim community.</p>

<h3 id="funding">Funding</h3>

<p>The (ongoing) successful <a href="https://salt.bountysource.com/teams/neovim">funding campaign</a>
yielded <a href="https://github.com/tarruda/libmpack">libmpack</a>, <code class="language-plaintext highlighter-rouge">:terminal</code>, and major refactors and improvements (e.g.
decoupling the UI logic from the TUI). With Thiago taking a less active role in
the project, the funding is available to other developers.</p>

<p><a href="https://github.com/ZyX-I">@ZyX-I</a>, a prolific committer to Neovim (21 kLOC
contributed) and Vim (<a href="#note1">13 kLOC</a>, including <code class="language-plaintext highlighter-rouge">if_python</code>), agreed to take
the role of “lead developer”, i.e. the developer who receives the funding. His
work on Neovim includes:</p>

<ul>
  <li>first-class XDG support, shada, build-time generators, automated change-aware
linter, Lua-to-VimL translator</li>
  <li>critical internals such as <code class="language-plaintext highlighter-rouge">msgpackparse()</code> and <code class="language-plaintext highlighter-rouge">os/fileio.c</code> (buffered I/O)</li>
  <li>complete rewrite of Vim JSON support, including granular error messages</li>
  <li>comprehensive test coverage for all of the above</li>
</ul>

<p>The funding does not always go to one person. It’s available to any
<a href="https://github.com/orgs/neovim/people">core contributor</a> who wants to take
a month or more to focus on Neovim.</p>

<h3 id="donations">Donations</h3>

<p>Because funding is monthly, it is (hopefully) a low-friction decision:</p>

<ul>
  <li>To donate $10, you could pledge $1 per month.</li>
  <li>If the project makes you rage, just cancel your pledge.</li>
  <li>If the project makes you happy (despite the lack of <code class="language-plaintext highlighter-rouge">:smile</code>, somehow), let
the pledge continue!</li>
</ul>

<h2 id="api">API</h2>

<p>The Neovim API is one of the defining technical and “soft” features of the
project. In <a href="https://github.com/neovim/neovim/pull/5535">PR #5535</a> we formed
a strategy for <strong>growing the API without breaking clients</strong>.</p>

<ul>
  <li>We established the <em>API Level</em> concept, to enable trivial comparison and
emphasize that the API version is separate from the Neovim version.</li>
  <li>We added version and deprecation fields to the API metadata.</li>
  <li>We’ll never break API function signatures published in a tagged release.</li>
  <li>We won’t remove deprecated API functions until Neovim version <code class="language-plaintext highlighter-rouge">2.0</code> (if ever).</li>
</ul>

<p>The API should only <a href="https://youtu.be/oyLBGkS5ICk?t=1557"><strong>grow</strong></a>, not break.
Each API function is marked by the API level where it first became available.
This makes it practical for the numerous Neovim API clients to support any
released version of Neovim.</p>

<p>Since <a href="https://github.com/neovim/neovim/pull/4934">PR #4934</a> you can call the
API of the current <code class="language-plaintext highlighter-rouge">nvim</code> process <strong>directly from VimL</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:echo nvim_buf_get_lines(42, 1, 3, v:false)
</code></pre></div></div>

<p>Try <code class="language-plaintext highlighter-rouge">:call nvim_&lt;Tab&gt;</code> at the command line to see the available API functions,
or install the <a href="https://github.com/tweekmonster/nvim-api-viewer">nvim-api-viewer</a>
plugin to see a nice overview of available API functions.</p>

<p>We take API reliability seriously, and we’ve tried to think carefully about the
design. Feedback from plugin and client authors is appreciated!</p>

<h2 id="release-strategy">Release strategy</h2>

<h3 id="versioning">Versioning</h3>

<p>One year ago we announced our first release, <code class="language-plaintext highlighter-rouge">0.1</code>. We’ve streamlined the
release process (versioning, tagging, changelogs, announcements).</p>

<p>Some users wonder if <code class="language-plaintext highlighter-rouge">0.1</code> means Neovim is unstable.</p>

<ul>
  <li>Each release since <code class="language-plaintext highlighter-rouge">0.1</code> is considered <strong>stable for use</strong> on all systems
except Windows.
    <ul>
      <li>Windows will be a first-class target starting with <code class="language-plaintext highlighter-rouge">0.2</code>.</li>
    </ul>
  </li>
  <li>Until <code class="language-plaintext highlighter-rouge">1.0</code>, some non-API features may break backwards compatibility. This is
uncommon, and these cases are always
<a href="https://github.com/neovim/neovim/wiki/Following-HEAD">documented</a>.</li>
  <li>In <code class="language-plaintext highlighter-rouge">0.1.6</code> we introduced <strong>API versioning</strong>. Clients can dynamically decide
which functions to use.</li>
</ul>

<p>We follow <a href="https://semver.org">semver</a>; the recommendations there explain
the intention of the <code class="language-plaintext highlighter-rouge">0.x</code> series.</p>

<h3 id="os-packages">OS Packages</h3>

<p>More OS packages are appearing. Neovim is part of <strong>Debian’s <a href="https://packages.debian.org/stretch/neovim">next
release</a>!</strong> Special thanks to
@jamessan (Debian maintainer and Neovim contributor), @fwalch and others who
build packages for their favorite systems and work with us to address inevitable
compiler/platform quirks.</p>

<h2 id="progress">Progress</h2>

<p>What did Neovim contributors accomplish since 2014?</p>

<p>By a <a href="#note2">conservative estimate</a> at least 20,000 new lines of C code have
been written. We’ve written 2200 <em>new</em> tests, in addition to passing Vim’s own
test suite. 273 different people have contributed to the core project. The <a href="https://github.com/neovim/neovim">core
project</a> has more commits in 3 years than Vim
in 12 years.</p>

<p>Besides major refactoring and feature work, a ton of time was put into the
Neovim continuous integration (CI) system. In a stable but fragile C codebase,
maintainers tend to ignore “small” features because they may be too risky. CI
reduces fragility so we can <a href="#hacking-or-plain-old-engineering">welcome</a> feature
work large <em>and small</em>, instead of fearing change.</p>

<p>New features can be tested rigorously with <strong>screen tests</strong>. For example, here’s
a test that exercises the <code class="language-plaintext highlighter-rouge">'wildmode'</code> UI behavior:</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">describe</span><span class="p">(</span><span class="s2">"'wildmenu'"</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
  <span class="n">it</span><span class="p">(</span><span class="s1">':sign &lt;tab&gt; shows wildmenu completions'</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
    <span class="n">execute</span><span class="p">(</span><span class="s1">'set wildmode=full'</span><span class="p">)</span>
    <span class="n">execute</span><span class="p">(</span><span class="s1">'set wildmenu'</span><span class="p">)</span>
    <span class="n">feed</span><span class="p">(</span><span class="s1">':sign &lt;tab&gt;'</span><span class="p">)</span>
    <span class="n">screen</span><span class="p">:</span><span class="n">expect</span><span class="p">(</span><span class="s">[[
                               |
      ~                        |
      ~                        |
      define  jump  list  &gt;    |
      :sign define^             |
    ]]</span><span class="p">)</span>
  <span class="k">end</span><span class="p">)</span>
<span class="k">end</span><span class="p">)</span>
</code></pre></div></div>

<p>After we forked Vim in 2014, there was an unstable period; that gap has become
smaller and smaller, and will vanish in 2017. Each regression fix is covered by
integration tests. Each pull request builds against 12 different environments.
Special thanks to @jszakmeister, @fwalch and @ZyX-I for their work on the build
system, and to @oni-link for fixing some very difficult bugs.</p>

<h3 id="little-things-matter">Little things matter</h3>

<p>One of the strongest impressions from
<a href="https://twitter.com/search?q=neovim&amp;src=typd">social media</a> is that people
really appreciate <em>less friction</em> when they try Neovim. <strong>Defaults matter.</strong>
Tim Pope deserves credit for <a href="https://github.com/tpope/vim-sensible/">curating</a>
many of the <a href="https://neovim.io/doc/user/vim_diff.html#nvim-defaults">defaults</a>
we chose.</p>

<p>@fmoralesc and others thought carefully about how to
<a href="https://github.com/neovim/neovim/issues/2676">implement</a> these defaults without
causing regressions (<code class="language-plaintext highlighter-rouge">encoding=utf8</code> and syntax/filetype were tricky). The work
was tedious, but justified: it’s a <em>one-time</em> cost that helps new users, old
users on new systems (which are everywhere these days: VMs, containers,
servers…), and <em>all</em> users by propagating Vim “best practices”.</p>

<h2 id="features">Features</h2>

<p>Here are some new developments since the last newsletter.</p>

<ul>
  <li><strong>Ruby support</strong> landed in 0.1.5. This means you can write Neovim plugins in
ruby <em>and</em> the legacy Vim <code class="language-plaintext highlighter-rouge">:ruby*</code> commands are supported (so existing
Vim+ruby plugins work in Neovim, such as Command-t and vim-github-dashboard).
    <ul>
      <li>To enable Ruby support, just <code class="language-plaintext highlighter-rouge">gem install neovim</code>. You don’t need to worry
about compiling against a specific version.</li>
    </ul>
  </li>
  <li><strong>Write plugins in Go</strong> with the Neovim API
<a href="https://godoc.org/github.com/neovim/go-client/nvim">Go client</a>!
(Thanks to @garyburd!)</li>
  <li><code class="language-plaintext highlighter-rouge">:CheckHealth</code> detects common problems (like Homebrew’s <code class="language-plaintext highlighter-rouge">doctor</code>). Run it
whenever you install or upgrade Neovim.</li>
  <li><strong>buffer-local highlighting</strong> (<code class="language-plaintext highlighter-rouge">:help api-highlights</code>) is similar to
<code class="language-plaintext highlighter-rouge">matchaddpos()</code>, with some key differences: it is associated with a buffer and
<strong>adapts to line insertions and deletions</strong>. Useful for linter or semantic
highlighter plugins that monitor a buffer for changes and compute highlights
in the background.</li>
</ul>

<h3 id="externalized-ui-widgets">Externalized UI Widgets</h3>

<p>In <a href="https://github.com/neovim/neovim/pull/4432">PR #4432</a> @bfredl made the first
step to <a href="http://tarruda.github.io/articles/neovim-smart-ui-protocol/">give UIs more control</a>
over the display of “widgets”. @romgrk quickly made a
<a href="https://www.youtube.com/watch?v=TI5azVeDUDo">proof of concept</a>.</p>

<p>It didn’t take long for an <a href="https://github.com/neovim/neovim/pull/5686">ambitious patch</a>
to externalize <strong>cmdline, tab, wildmenu, and preview window widgets</strong>. The demo
shows exciting potential:</p>

<iframe width="600" height="400" src="https://www.youtube.com/embed/rzclz1seo0g" frameborder="0" allowfullscreen=""></iframe>

<p>This work was possible because @tarruda cleanly separated the terminal-UI (TUI)
from the internal screen, so <strong>even the built-in TUI is driven by UI events</strong>
like any other externalized UI.</p>

<h3 id="incremental-live-substitute">Incremental (“live”) <code class="language-plaintext highlighter-rouge">:substitute</code></h3>

<p>In May 2016 a group of students mentored by Eric Burel contacted us about
contributing to Neovim. From a list of ideas we provided, they decided to
implement a “live preview” for <code class="language-plaintext highlighter-rouge">:substitute</code>. We merged it in
<a href="https://github.com/neovim/neovim/pull/5561">PR #5561</a>, released in <code class="language-plaintext highlighter-rouge">0.1.7</code>.
Set the <code class="language-plaintext highlighter-rouge">inccommand</code> option to try it:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:set inccommand=split
</code></pre></div></div>

<script type="text/javascript" src="https://asciinema.org/a/92207.js" id="asciicast-92207" async=""></script>

<p>This feature was made possible by our development model: despite having “no
time” for a side-project, we outlined the basic idea, the students made
decisions out-of-band, and we provided clarification as needed.</p>

<ul>
  <li>The students posted a PR to allow ongoing feedback. The PR fork was updated
regularly, so reviewers could pull, build, and test.</li>
  <li>Tests were written using <a href="#progress">screen tests</a>, helping coverity/ASan/etc
to exercise the feature and reviewers to <strong>visualize the behavior</strong>.</li>
  <li>The automated build system continuously ran the changes against 12 different
systems.</li>
</ul>

<p>Eric <a href="https://medium.com/@eric.burel/stop-using-open-source-5cb19baca44d#.4gz835f9y">wrote about the experience</a>.
Thanks to Eric, the students at ENSIMAG,
<a href="https://github.com/KillTheMule">@KillTheMule</a>, and @bfredl for carrying this
feature to a conclusion we are proud of.</p>

<h3 id="upcoming">Upcoming</h3>

<p>Look for the following developments in 2017 for Neovim <code class="language-plaintext highlighter-rouge">0.3</code>.</p>

<ul>
  <li>We will ship Lua as a default scripting alternative in 2017.
The next “inflection point” of reduced-risk, rapid enhancement is to make the
core extensible with Lua. For that
<a href="https://github.com/neovim/neovim/pull/4411">PR #4411</a> is an important step.</li>
  <li>With ZyX’s <a href="https://github.com/neovim/neovim/pull/5119">eval.c refactor</a>
the monolithic <code class="language-plaintext highlighter-rouge">eval.c</code> will be separated into
<a href="https://github.com/neovim/neovim/issues/5081#issuecomment-234772243">modules</a>,
marking a point where Neovim’s VimL implementation diverges from Vim’s. This
will be the world’s second <strong>alternative VimL implementation</strong>
(ZyX’s <a href="https://github.com/neovim/neovim/pull/243">VimL-to-Lua PR</a> was the first).</li>
  <li><a href="https://github.com/neovim/neovim/pull/5031">Extended marks</a> will give plugin
authors more powerful and flexible marks.</li>
  <li>We will take a close look at the
<a href="https://github.com/neovim/neovim/issues/5522">Microsoft Language Server Implementation</a>
to decide how it and similar middleware can integrate elegantly with Neovim.</li>
</ul>

<h2 id="eof">EOF</h2>

<p>So that was 2016 for Neovim. Could 2017 be the Year of the Neovim Desktop?</p>

<p>Neovim’s ideas are finding their way into other projects, such as
<a href="https://news.ycombinator.com/item?id=11576751">Xi editor</a> and Vim itself,
which has seen
<a href="https://github.com/vim/vim/graphs/contributors">more activity this year than any other year in its history</a>.</p>

<p><img src="/images/2016-vimfest.jpg" style="max-width:600px; height:auto;" title="Neovim and Vim maintainers at VimFest 2016" /></p>

<p>There’s a beehive of activity in the gitter and IRC channels (which are
bridged by <a href="https://github.com/matrix-org/matrix-appservice-gitter">matrix</a>
thanks to @leonerd!). <a href="https://neovim.io/community/">Visit us</a> to talk about the
project.</p>

<p>And don’t forget there’s a <a href="https://neovim.io/roadmap/">roadmap</a> at neovim.io if
you want to check where the project is headed.</p>

<p>Thanks for reading.</p>

<p>—Justin M. Keyes (@justinmk)</p>

<hr />

<h5 id="note1">note1</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git log --grep='\([zZ]y[xX]\)\|\([nN]ikolai [pP]av\)\|\([nN]ikolay [pP]av\)' --numstat --pretty=tformat: --numstat|gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s removed lines: %s total lines: %s\n", add, subs, loc }'
added lines: 22590 removed lines: 8620 total lines: 13970

$ git log --grep='[cC]hristian [bB]rab' --numstat --pretty=tformat: --numstat|gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s removed lines: %s total lines: %s\n", add, subs, loc }'
added lines: 10000 removed lines: 3033 total lines: 6967
</code></pre></div></div>

<h5 id="note2">note2</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ohcount msgpack_rpc/ api/ os/ event/ tui/ shada.c rbuffer.c terminal.c memory.c
c                    79      14576       2863      16.4%       2154      19593
</code></pre></div></div>]]></content><author><name></name></author><category term="newsletter" /><summary type="html"><![CDATA[It’s time for the Neovim newsletter! Skip to the Fun and Features sections if you only care about new features. There are also changes in project management that you should know about.]]></summary></entry></feed>
