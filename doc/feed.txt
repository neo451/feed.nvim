*feed.txt*                 For 0.11                 Last change: 2025 March 04

==============================================================================
Table of Contents                                     *feed-table-of-contents*

1. Commands                                                    |feed-commands|
  - Sub commands and arguments      |feed-commands-sub-commands-and-arguments|
  - List of commands                          |feed-commands-list-of-commands|
2. Keymaps                                                      |feed-keymaps|
  - Index buffer                                   |feed-keymaps-index-buffer|
  - Entry buffer                                   |feed-keymaps-entry-buffer|
3. Manage                                                        |feed-manage|
  - From lua                                            |feed-manage-from-lua|
  - From OPML                                          |feed-manage-from-opml|
  - Link formats                                    |feed-manage-link-formats|
4. Search                                                        |feed-search|
  - Regex                                                  |feed-search-regex|
  - Tags                                                    |feed-search-tags|
  - Date                                                    |feed-search-date|
  - Limit                                                  |feed-search-limit|
  - Examples                                            |feed-search-examples|
  - Grep                                                    |feed-search-grep|
5. Recipes                                                      |feed-recipes|
6. Lua API                                                      |feed-lua-api|

==============================================================================
1. Commands                                                    *feed-commands*


SUB COMMANDS AND ARGUMENTS          *feed-commands-sub-commands-and-arguments*

To execute actions available in the current context, or give arguments to the
command, use the following syntax:

Use `:Feed <Tab>`, `:Feed update_feed <Tab>` to get the completion

Use `:Feed<Enter>`, `:Feed update_feed<Enter>` to open menu and select


LIST OF COMMANDS                              *feed-commands-list-of-commands*

  ----------------------------------------------------------------------------------------
  name                            desc                                              bang
  ------------------------------- ------------------------------------------------- ------
  Feed <query>                    opens a index buffer, a list view based on the    no
                                  filter you passed in                              

  Feed index                      opens a index buffer, a list view based on your   no
                                  default filter                                    

  Feed entry                      opens a entry buffer, a markdown view of the      no
                                  entry content                                     

  Feed update                     updates all feeds in the database                 no

  Feed update_feed <feed_url>     update a single feed in the database              no

  Feed sync                       sync the database with your config, removes feeds yes
                                  and entries (if bang) not present                 

  Feed search <query>             opens picker to live search your database         no

  Feed grep                       opens picker to live grep your database           no
                                  (experimental)                                    

  Feed list                       opens a split to show info about all your feeds   no
                                  in database                                       

  Feed log                        opens a split to show log                         no

  Feed load_opml <filepath/url>   import from an OPML file or url                   no

  Feed export_opml <filepath>     export to an OPML file                            no

  Feed web <port>                 opens a server on a port and opens the web        no
                                  interface in browser                              

  Feed urlview                    opens a select UI to picker urls in entry buffer, no
                                  to open in browser                                
  ----------------------------------------------------------------------------------------

==============================================================================
2. Keymaps                                                      *feed-keymaps*

By default, feed.nvim will not set any keymaps for you, press `?` in to see
buffer-local keymaps.


INDEX BUFFER                                       *feed-keymaps-index-buffer*

  action       key
  ------------ --------
  hints        ?
  dot_repeat   .
  undo         u
  redo         <C-r>
  entry        <CR>
  split        <M-CR>
  browser      b
  refresh      r
  update       R
  search       s
  yank_url     Y
  untag        -
  tag          +
  quit         q

ENTRY BUFFER                                       *feed-keymaps-entry-buffer*

  action     key
  ---------- -----
  hints      ?
  browser    b
  next       }
  prev       {
  full       f
  search     s
  untag      -
  tag        +
  urlview    r
  yank_url   Y
  quit       q

==============================================================================
3. Manage                                                        *feed-manage*


FROM LUA                                                *feed-manage-from-lua*

Pass your feeds as list of links and tags in setup

Use `Feed update` to update all

Use `Feed update_feed` to update one feed

>lua
    require("feed").setup({
       feeds = {
          -- These two styles both work
          "https://neovim.io/news.xml",
          {
             "https://neovim.io/news.xml",
             name = "Neovim News",
             tags = { "tech", "news" }, -- tags given are inherited by all its entries
          },
    
          -- three link formats:
          "https://neovim.io/news.xml", -- Regular links
          "rsshub://rsshub://apnews/topics/apf-topnews", -- RSSHub links
          "neovim/neovim/releases", -- GitHub links
       },
    })
<


FROM OPML                                              *feed-manage-from-opml*

Use `Feed load_opml` to import your OPML file

Use `Feed export_opml` to export your OPML file to load in other readers


LINK FORMATS                                        *feed-manage-link-formats*


REGULAR LINKS ~

Must start with `http` or `https`


RSSHUB LINKS ~

RSSHub links are first class citizens, format is `rsshub://{route}`

`rsshub://{route}` will be resolved when fetching according to your config

Discover available `{route}` in RSSHub documentation
<https://docs.rsshub.app/routes/popular> `rsshub://apnews/topics/apf-topnews`
will be resolved to `https://rsshub.app/apnews/topics/apf-topnews` by default

Config example:

>lua
    require("feed").setup({
       rsshub = {
          instance = "127.0.0.1:1200", -- or any public instance listed here https://rsshub.netlify.app/instances
          export = "https://rsshub.app", -- used in export_opml
       },
    })
<


GITHUB LINKS ~

GitHub user/repo links are also first class citizens,format is
`[github://]{user/repo}[{/releases|/commits}]`, so following four all work:

- `neo451/feed.nvim`
- `github://neo451/feed.nvim`
- `neo451/feed.nvim/releases`
- `github://neo451/feed.nvim/releases`

For now it defaults to subscribing to the commits

So first two is resolved into
<https://github.com/neo451/feed.nvim/commits.atom>

Latter two is resolved into <https://github.com/neo451/feed.nvim/releases.atom>


==============================================================================
4. Search                                                        *feed-search*

- use `Feed search` to filter your feeds
- you can also pass the query like `Feed =neovim +read`
- the default query when you open up the index buffer is `+unread @2-weeks-ago`


REGEX                                                      *feed-search-regex*

- no modifier matches entry title or entry url
- `!` is negative match with entry title or url
- `=` is matching feed name and feed url
- `~` is not matching feed name and feed url
- these all respect your `ignorecase` option


TAGS                                                        *feed-search-tags*

- `+` means `must_have`, searches entries’ tags
- `-` means `must_not_have`, searches entries’ tags


DATE                                                        *feed-search-date*

- `@` means `date`, searches entries’ date
- `2015-8-10` searches only entries after the date
- `2-months-ago` searches only entries within two months from now
- `1-year-ago--6-months-ago` means entries in the period


LIMIT                                                      *feed-search-limit*

- `#` means `limit`, limits the number of entries


EXAMPLES                                                *feed-search-examples*

- `+blog +unread -star @6-months-ago #10 zig !rust`

Only Shows 10 entries with tags blog and unread, without tag star, and are
published within 6 month, making sure they have zig but not rust in the title.

- `@6-months-ago +unread`

Only show unread entries of the last six months. This is the default filter.

- `linu[xs] @1-year-old`

Only show entries about Linux or Linus from the last year.

- `-unread +youtube #10`

Only show the most recent 10 previously-read entries tagged as youtube.

- `+unread !n\=vim`

Only show unread entries not having vim or nvim in the title or link.

- `+emacs =http://example.org/feed/`

Only show entries tagged as emacs from a specific feed.


GREP                                                        *feed-search-grep*

Use `Feed grep` to live grep all entries in your database, requires `rg` and
one of the search backends:

- `telescope`
- `fzf-lua`
- `mini.pick`


==============================================================================
5. Recipes                                                      *feed-recipes*

Change the highlight of the tags section and use emojis and mini.icons for tags ~

>lua
    require("feed").setup({
       ui = {
          tags = {
             color = "String",
             format = function(id, db)
                local icons = {
                   news = "📰",
                   tech = "💻",
                   movies = "🎬",
                   games = "🎮",
                   music = "🎵",
                   podcast = "🎧",
                   books = "📚",
                   unread = "🆕",
                   read = "✅",
                   junk = "🚮",
                   star = "⭐",
                }
    
                local get_icon = function(name)
                   if icons[name] then
                      return icons[name]
                   end
                   local has_mini, MiniIcons = pcall(require, "mini.icons")
                   if has_mini then
                      local icon = MiniIcons.get("filetype", name)
                      if icon then
                         return icon .. " "
                      end
                   end
                   return name
                end
    
                local tags = vim.tbl_map(get_icon, db:get_tags(id))
                table.sort(tags)
                return "[" .. table.concat(tags, ", ") .. "]"
             end,
          },
       },
    })
<

Custom function & keymap for podcast and w3m ~

>lua
    local function play_podcast()
       local link = require("feed").get_entry().link
       if link:find("mp3") then
          vim.ui.open(link)
       -- any other player like:
       -- vim.system({ "vlc.exe", link })
       else
          vim.notify("not a podcast episode")
       end
    end
    
    local function show_in_w3m()
       if not vim.fn.executable("w3m") then
          vim.notify("w3m not installed")
          return
       end
       local link = require("feed").get_entry().link
       local w3m = require("feed.ui.window").new({
          relative = "editor",
          col = math.floor(vim.o.columns * 0.1),
          row = math.floor(vim.o.lines * 0.1),
          width = math.floor(vim.o.columns * 0.8),
          height = math.floor(vim.o.lines * 0.8),
          border = "rounded",
          style = "minimal",
          title = "Feed w3m",
          zindex = 10,
       })
       vim.keymap.set({ "n", "t" }, "q", "<cmd>q<cr>", { silent = true, buffer = w3m.buf })
       vim.fn.jobstart({ "w3m", link }, { term = true })
       vim.cmd("startinsert")
    end
    
    require("feed").setup({
       keys = {
          index = {
             [play_podcast] = "p",
             [show_in_w3m] = "w",
          },
       },
    })
<

Custom colorscheme only set when viewing feeds ~

>lua
    local og_color
    
    vim.api.nvim_create_autocmd("User", {
       pattern = "FeedShowIndex",
       callback = function()
          if not og_color then
             og_color = vim.g.colors_name
          end
          vim.cmd.colorscheme("kanagawa-lotus")
       end,
    })
    
    vim.api.nvim_create_autocmd("User", {
       pattern = "FeedQuitIndex",
       callback = function()
          vim.cmd.colorscheme(og_color)
       end,
    })
<

Show estimate reading time ~

>lua
    require("feed").setup({
       ui = {
          order = { "date", "feed", "tags", "title", "reading_time" },
          reading_time = {
             color = "Comment",
             format = function(id, db)
                local cpm = 1000 -- set to whatever you like
                local content = db:get(id):gsub("%s+", " ") -- reads the entry content
                local chars = vim.fn.strchars(content)
                local time = math.ceil(chars / cpm)
                return string.format("(%s min)", time)
             end,
          },
       },
    })
<


==============================================================================
6. Lua API                                                      *feed-lua-api*

:TODO:

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
